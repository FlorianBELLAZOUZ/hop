(module config
   (export (config-init! . Lconfig)
	   (config-set! conf value)
	   (config conf)
	   (scheme2js-config conf)
	   (default-config-alist)
	   (default-scheme2js-config)
	   (set-optim-level config level)))

(define (config-init! . Lconfig)
   (thread-parameter-set! '*config* (if (null? Lconfig)
					(make-hashtable)
					(car Lconfig))))

(define (config conf)
   (hashtable-get (thread-parameter '*config*) conf))
(define scheme2js-config config)

(define (config-set! conf value)
   (hashtable-put! (thread-parameter '*config*) conf value))


(define *O0*
   '((optimize-tail-rec #f)
     (do-inlining #f)
     (inline-runtime #f)
     (runtime-is-constant #f)
     (loop-hoist #f)
     (propagation #f)
     (constant-propagation #f)
     (while #f)
     (correct-modulo #t)
     (optimize-calls #f)
     (optimize-boolify #f)
     (optimize-set! #f)
     (max-tail-depth 40)
     (var-elimination #f)
     (optimize-consts #f)))
(define (O0-config) *O0*)

(define *O1*
   '((optimize-tail-rec #t)
     (do-inlining #t)
     (rec-inline-nb 3)
     (max-inline-size 30)
     (inline-runtime #t)
     (runtime-is-constant #t)
     (loop-hoist #f)
     (propagation #t)
     (constant-propagation #t)
     (while #t)
     (correct-modulo #f)
     (optimize-calls #t)
     (optimize-boolify #t)
     (optimize-set! #t)
     (max-tail-depth 40)
     (var-elimination #t)
     (optimize-consts #t)))
(define (O1-config) *O1*)

(define *O2*
   '((optimize-tail-rec #t)
     (do-inlining #t)
     (rec-inline-nb 1)
     (max-inline-size 15)
     (inline-runtime #f)
     (runtime-is-constant #t)
     (loop-hoist #f)
     (propagation #t)
     (constant-propagation #t)
     (while #t)
     (correct-modulo #f)
     (optimize-calls #t)
     (optimize-boolify #t)
     (optimize-set! #t)
     (max-tail-depth 40)
     (var-elimination #t)
     (optimize-consts #t)))
(define (O2-config) *O2*)

(define *O3*
   '((optimize-tail-rec #t)
     (do-inlining #t)
     (rec-inline-nb 4)
     (max-inline-size 45)
     (inline-runtime #t)
     (runtime-is-constant #t)
     (loop-hoist #t)
     (propagation #t)
     (constant-propagation #t)
     (while #t)
     (correct-modulo #f)
     (optimize-calls #t)
     (optimize-boolify #t)
     (optimize-set! #t)
     (max-tail-depth 40)
     (var-elimination #t)
     (optimize-consts #t)))
(define (O3-config) *O3*)

(define *Obench*
   '((optimize-tail-rec #t)
     (do-inlining #t)
     (rec-inline-nb 4)
     (max-inline-size 45)
     (inline-runtime #t)
     (runtime-is-constant #t)
     (loop-hoist #t)
     (propagation #t)
     (constant-propagation #t)
     (while #t)
     (correct-modulo #f)
     (optimize-calls #t)
     (optimize-boolify #t)
     (optimize-set! #t)
     (max-tail-depth 40)
     (var-elimination #t)
     (optimize-consts #t)))

(define (Obench-config) *Obench*)

(define *default-config*
   (append '((infotron #f)
	     (direct-js-object-access #t)
	     (procedures-provide-js-this #f)
	     (unresolved=JS module)
	     (export-globals module)
	     (encapsulate-modules #f)
	     (trampoline #f)
	     (print-locations #f)
	     (return #f)
	     (suspend/resume #f)
	     (call/cc #f)
	     (extern-always-call/cc #f)
	     (with-closures #f)
	     (include-paths ())
	     (indent 2)
	     (statics-suffix #f))
	   *O1*))
(define (default-config-alist) *default-config*)
    
(define (set-optim-level config level)
   (apply-config config
		 (case level
		    ((0) *O0*)
		    ((1) *O1*)
		    ((2) *O2*)
		    ((3) *O3*)
		    ((bench) *Obench*)
		    (else
		     (if (and (number? level)
			      (> 0 level))
			 *O3*
			 (error "config"
				"Optimization-level unknown: "
				level))))))

(define (apply-config config a-list)
   (for-each (lambda (p)
		(hashtable-put! config (car p) (cadr p)))
	     a-list))

(define (default-scheme2js-config)
   (let ((ht (make-hashtable)))
      (apply-config ht (default-config-alist))
      ht))
