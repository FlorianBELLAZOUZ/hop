(define (without-META line)
   (define META-pattern (pregexp "(?:/\*\*\* META)(.*)"))
   (cadr (pregexp-match META-pattern line)))


(define (parse-var/function line)
   (define exported-fun-pattern (pregexp "(?:var|function) ((?:sc_)?[^ (;]*)"))

   (let ((match (pregexp-match exported-fun-pattern line)))
      (string->symbol (cadr match))))


(define (read-metas p)
   (let loop ((rev-result '())
	      (meta #f))
      (let ((line (read-line p)))
	 (if (or (not line)
		 (eof-object? line))
	     (reverse! rev-result)
	     (cond
		((starts-with? line "/*** META")
		 (let luup ((meta-lines (without-META line))
			    (last-line line))
		    (if (ends-with? last-line "*/")
			(let ((meta (with-input-from-string meta-lines read)))
			   (if (and (pair? meta)
				    (eq? (car meta) 'define-macro))
			       (loop (cons (list #f 'macro meta) rev-result)
				     #f)
			       (loop rev-result meta)))
			(let ((line (read-line p)))
			   (luup (string-append meta-lines "\n" line)
				 line)))))
		((and (starts-with? line "var")
		      meta)
		 (loop (cons (list (parse-var/function line) 'var meta)
			     rev-result)
		       #f))
		((and (starts-with? line "function")
		      meta)
		 (loop (cons (list (parse-var/function line) 'function meta)
			     rev-result)
		       #f))
		(else
		 (loop rev-result meta)))))))
