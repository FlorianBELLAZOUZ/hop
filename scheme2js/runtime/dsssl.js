// generated by ~/prgm/project/hop/2.0.x/bin/hopc -j dsssl.scm -o dsssl.js

/*** META ((export dsssl-get-key-arg)
           (arity 3)
	   (JS "BGl_dssslzd2getzd2keyzd2argzd2zzdssslz00")) */
/*** META ((export dsssl-get-key-rest-arg)
           (arity 1)
	   (JS "BGl_dssslzd2getzd2keyzd2restzd2argz00zzdssslz00")) */
/*** META ((export dsssl-check-key-args!)
           (arity 2)
	   (JS "BGl_dssslzd2checkzd2keyzd2argsz12zc0zzdssslz00")) */

var BGl_dssslzd2getzd2keyzd2argzd2zzdssslz00;
var BGl_dssslzd2getzd2keyzd2restzd2argz00zzdssslz00;
var BGl_dssslzd2checkzd2keyzd2argsz12zc0zzdssslz00;
var const_dsssl;
var BgL_sc_const_1z00_dsssl;
var BgL_sc_const_2z00_dsssl;
const_dsssl = "dsssl formal parsing";
BgL_sc_const_1z00_dsssl = "Unexpected #!keys parameters";
BgL_sc_const_2z00_dsssl = "keyword argument misses value";

sc_tmp = BGl_dssslzd2checkzd2keyzd2argsz12zc0zzdssslz00 = function(dsssl_args, key_list) {
      var stmp;
      var stmp_1;
      var tmp1308;
      var tmp1307;
      var tmp1306;
      var args;
      var armed;
      var opts;
      var tmp1304;
      var tmp1303;
      var args_2;
      var g1305;
      if (key_list === null) {
        args_2 = dsssl_args;
        while (!(args_2 === null)) {
          tmp1303 = !(args_2 instanceof sc_Pair);
          if (tmp1303 !== false) {
            stmp_1 = tmp1303;
          } else {
            tmp1304 = args_2.cdr === null;
            if (tmp1304 !== false) {
              stmp_1 = tmp1304;
            } else {
              stmp_1 = !sc_arity_check(sc_isKeyword, 1)(args_2.car);
            }
          }
          if (stmp_1 !== false) {
            return sc_arity_check(sc_error, 3)(const_dsssl, BgL_sc_const_1z00_dsssl, args_2);
          } else {
            args_2 = args_2.cdr.cdr;
          }
        }
        return dsssl_args;
      } else {
        g1305 = null;
        args = dsssl_args;
        armed = false;
        opts = g1305;
        while (!(args === null)) {
          tmp1306 = !(args instanceof sc_Pair);
          if (tmp1306 !== false) {
            stmp = tmp1306;
          } else {
            tmp1307 = args.cdr === null;
            if (tmp1307 !== false) {
              stmp = tmp1307;
            } else {
              tmp1308 = !sc_arity_check(sc_isKeyword, 1)(args.car);
              if (tmp1308 !== false) {
                stmp = tmp1308;
              } else {
                stmp = sc_arity_check(sc_memq, 2)(args.car, key_list) === false;
              }
            }
          }
          if (stmp !== false) {
            if (armed === false) {
              args = args.cdr;
            } else {
              armed = false;
              opts = new sc_Pair(args.car, opts);
              args = args.cdr;
            }
          } else {
            args = args.cdr.cdr;
            armed = true;
          }
        }
        return sc_arity_check(sc_reverseBang, 1)(opts);
      }
    }, sc_tmp.name = "dsssl-check-key-args!", sc_tmp.location = "(at dsssl.scm 144)", sc_tmp.sc_arity = 2, sc_tmp;
sc_tmp = BGl_dssslzd2getzd2keyzd2argzd2zzdssslz00 = function(dsssl_args, keyword, initializer) {
      var args;
      args = dsssl_args;
      while (!(args === null)) {
        if (!sc_arity_check(sc_isKeyword, 1)(args.car)) {
          args = args.cdr;
        } else {
          if (args.car === keyword) {
            if (!(args.cdr instanceof sc_Pair)) {
              return sc_arity_check(sc_error, 3)("\uEBACdsssl-get-key-arg", BgL_sc_const_2z00_dsssl, args.car);
            } else {
              return args.cdr.car;
            }
          } else {
            if (!(args.cdr instanceof sc_Pair)) {
              return sc_arity_check(sc_error, 3)("\uEBACdsssl-get-key-arg", BgL_sc_const_2z00_dsssl, args.car);
            } else {
              args = args.cdr.cdr;
            }
          }
        }
      }
      return initializer;
    }, sc_tmp.name = "dsssl-get-key-arg", sc_tmp.location = "(at dsssl.scm 1375)", sc_tmp.sc_arity = 3, sc_tmp;
sc_tmp = BGl_dssslzd2getzd2keyzd2restzd2argz00zzdssslz00 = function(dsssl_args) {
      var tmp1309;
      var args;
      args = dsssl_args;
      while (!(args === null)) {
        tmp1309 = !sc_arity_check(sc_isKeyword, 1)(args.car);
        if ((tmp1309 !== false? tmp1309: args.cdr === null) !== false) {
          return args;
        } else {
          args = args.cdr.cdr;
        }
      }
      return null;
    }, sc_tmp.name = "dsssl-get-key-rest-arg", sc_tmp.location = "(at dsssl.scm 2124)", sc_tmp.sc_arity = 1, sc_tmp;
