;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/hop/hop.hop                     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed May 10 16:18:48 2006                          */
;*    Last change :  Mon May 22 14:34:02 2006 (serrano)                */
;*    Copyright   :  2006 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    HOP initial weblet.                                              */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hophop
   (import hophop_config))

;*---------------------------------------------------------------------*/
;*    hop ...                                                          */
;*---------------------------------------------------------------------*/
(define-service (hop)
   (let ((req (the-current-request)))
      (if (or (not (users-added?)) (authorized-service? req 'hop))
	  (hop-main req)
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    *weblets-table* ...                                              */
;*---------------------------------------------------------------------*/
(define *weblets-table* #unspecified)

;*---------------------------------------------------------------------*/
;*    hop-main ...                                                     */
;*---------------------------------------------------------------------*/
(define (hop-main req)
   (let ((t (make-hashtable 20)))
      (hashtable-put! t "hop" #t)
      (hashtable-put! t "home" #t)
      (for-each (lambda (w) (hashtable-put! t w #t)) (hop-builtin-weblets))
      (set! *weblets-table* t))
   (<HOP>
      (<TABLE>
	 :class "directory"
	 (<TR> (<TH> :class "title" "Builtin Weblets"))
	 (<TR> (<TD> (<TABLE> :class "weblets"
			      (<TR> (cons
				     (<HOME> (hop-weblets-directory))
				     (map (lambda (x)
					     (<HTD> (hop-weblets-directory) x))
					  (hop-builtin-weblets)))))))
	 (<TR> (<TD> "&nbsp;"))
	 (<TR> (<TH> :class "title" "Additional Weblets"))
	 (<TR> (<TH> (<TABLE> :class "weblets" (hop-additional-weblets)))))))

;*---------------------------------------------------------------------*/
;*    hop-additional-weblets ...                                       */
;*---------------------------------------------------------------------*/
(define (hop-additional-weblets)
   (let* ((w (append-map find-weblets-in-directory (hop-autoload-directories)))
	  (fw (filter-map (lambda (a)
			     (let ((n (cadr (assq 'name a)))
				   (w (cadr (assq 'weblet a))))
				(unless (hashtable-get *weblets-table* n)
				   (hashtable-put! *weblets-table* n #t)
				   (<HTD> (dirname (dirname w)) n))))
			  (sort w (lambda (a b)
				     (let ((namea (cadr (assq 'name a)))
					   (nameb (cadr (assq 'name b))))
					(string<? namea nameb)))))))
      (map <TR> (list-split! fw 6 (<TD> "")))))

;*---------------------------------------------------------------------*/
;*    <HOME> ...                                                       */
;*---------------------------------------------------------------------*/
(define (<HOME> base)
   (let ((url (hop-url))
	 (logo (format "~a/home/etc/logo.png" base)))
      (<TD>
	 :valign "top"
	 (<TABLE>
	    :width "100%"
	    :onclick ~(set! document.location $url)
	    :title url
	    (<TR>
	       (<TD>
		  :valign "top"
		  :align "center"
		  :class "logo"
		  (<IMG> :class "logo"
			 :src (if (file-exists? logo)
				  logo
				  (string-append (hop-dir)
						 "/etc/default.png")))))
	    (<TR>
	       (<TD>
		  :valign "top"
		  :align "center"
		  :class "legend"
		  (<SPAN> "home")))))))

;*---------------------------------------------------------------------*/
;*    <HTD> ...                                                        */
;*---------------------------------------------------------------------*/
(define (<HTD> base hz)
   (let ((url (format "/hop/~a" hz))
	 (logo (format "~a/~a/etc/logo.png" base hz)))
      (<TD>
	 :valign "top"
	 (<TABLE>
	    :width "100%"
	    :onclick ~(set! document.location $url)
	    :title url
	    (<TR>
	       (<TD>
		  :valign "top"
		  :align "center"
		  :class "logo"
		  (<IMG> :class "logo"
			 :src (if (file-exists? logo)
				  logo
				  (string-append (hop-dir)
						 "/etc/default.png")))))
	    (<TR>
	       (<TD>
		  :valign "top"
		  :align "center"
		  :class "legend"
		  (<SPAN> hz)))))))
	    
;*---------------------------------------------------------------------*/
;*    <HOP> ...                                                        */
;*---------------------------------------------------------------------*/
(define (<HOP> . obj)
   (<HTML>
      (<HEAD> :jscript "hop-notepad.js" :css "hop-notepad.css" 
	      :css (format "~a/hop.hss" (hop-dir)))
      (<BODY>
	 (<CENTER>
	    (<TABLE>
	       :class "hop"
	       (<TR>
		  (<TD>
		     :valign "top"
		     (<IMG> :class "logo"
			    :src (format "~a/etc/logo.png" (hop-dir))))
		  (<TD>
		     :valign "top"
		     (<TABLE>
			(<TR>
			   (<TD>
			      (<DIV> :id "title" "Hop v" (hop-version))))
			(<TR>
			   (<TD>
			      obj))))))))))
				     
	     
