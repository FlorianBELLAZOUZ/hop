;*=====================================================================*/
;*    serrano/prgm/project/hop/1.10.x/weblets/hop/hop.hop              */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed May 10 16:18:48 2006                          */
;*    Last change :  Tue Oct 21 15:40:42 2008 (serrano)                */
;*    Copyright   :  2006-08 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP initial weblet.                                              */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hophop
   (import hophop_config))

;*---------------------------------------------------------------------*/
;*    hop ...                                                          */
;*---------------------------------------------------------------------*/
(define-service (hop)
   (let ((t (make-hashtable 20))
	 (ct (make-hashtable 20)))
      (hashtable-put! t "hop" #t)
      (hashtable-put! t "home" #t)
      ;; builtin weblets
      (for-each (lambda (w)
		   (hashtable-put! t w #t))
		(hop-builtin-weblets))
      ;; user defined weblets
      (for-each (lambda (a)
		   (let ((n (cadr (assq 'name a))))
		      (unless (hashtable-get t n)
			 (let* ((cp (assq 'category a))
				(c (if (pair? cp)
				       (string-capitalize (cadr cp))
				       "Misc")))
			    (hashtable-update! ct
					       c
					       (lambda (o)
						  (if (assoc n o)
						      o
						      (cons (cons n a) o)))
					       (list (cons n a)))))))
		(append-map find-weblets-in-directory (hop-autoload-directories)))
      (<HOP>
	 (<WEBLETS> "Builtin Weblets" (hop-builtin-row))
	 (if (hop-view-by-category?)
	     (map! (lambda (k)
		      (let ((ws (map cdr (hashtable-get ct k))))
			 (<WEBLETS> k (hop-additional-row ws))))
		   (sort (hashtable-key-list ct) string<?))
	     (let ((ws (map cdr (apply append (hashtable->list ct)))))
		(<WEBLETS> "Additional Weblets"
			   (hop-additional-row ws)))))))

;*---------------------------------------------------------------------*/
;*    hop/documentation ...                                            */
;*---------------------------------------------------------------------*/
(define-service (hop/documentation)
   (let* ((file (string-append (hop-dir) "/etc/hop.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    <WEBLETS> ...                                                    */
;*---------------------------------------------------------------------*/
(define (<WEBLETS> title tds)
   (list (<DIV> :class "title" title)
	 (<DIV> :class "weblets" tds)))

;*---------------------------------------------------------------------*/
;*    <WEBLET> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<WEBLET> base #!key url hz logo title)
   (let ((url (or url (format "/hop/~a" hz)))
	 (logo (if logo
		   (format "~a/~a" base logo)
		   (format "~a/~a/etc/logo.png" base hz))))
      (<TABLE> :class "weblet" 
	 (<TR>
	    (<TD> :class "logo"
	       :onclick ~(set! document.location $url)
	       (<IMG> :class "logo"
		  :inline #t
		  :title title
		  :alt title
		  :src (if (file-exists? logo)
			   logo
			   (string-append (hop-dir) "/etc/default.png")))))
	 (<TR>
	    (<TD> :class "legend"
	       (<SPAN> (or hz "home")))))))

;*---------------------------------------------------------------------*/
;*    <HOP> ...                                                        */
;*---------------------------------------------------------------------*/
(define (<HOP> . obj)
   (<HTML>
      (<HEAD> :css (format "~a/hop.hss" (hop-dir))
	 :favicon (format "~a/etc/favicon.png" (hop-dir)))
      (<BODY>
	 (<DIV> :align "center"
	    (<TABLE> :class "hop"
	       (<COLGROUP>
		  (<COL> :width "0*"))
	       (<TR>
		  (<TD> :valign "top"
		     (<IMG> :class "logo" :inline #t
			:alt "a logo"
			:title "a logo"
			:src (format "~a/etc/logo.png" (hop-dir))))
		  (<TD> :valign "top"
		     (<TABLE> :width "100%"
			(<TR>
			   (<TD>
			      (<DIV> :id "title" "Hop v" (hop-version))))
			(<TR>
			   (<TD> :align 'left
			      obj)))))))
	 (<FOOT>
	    (<FOOT-BUTTON> :href "http://www.gnu.org/licenses/gpl.html"
	       :title "Gnu GPL"
	       :src "gpl.png")))))
				     
;*---------------------------------------------------------------------*/
;*    hop-builtin-row ...                                              */
;*---------------------------------------------------------------------*/
(define (hop-builtin-row)
   (cons (<WEBLET> (hop-weblets-directory) :url (hop-url)
		   :logo (make-file-path "home" "etc" "logo.png"))
	 (map (lambda (x)
		 (<WEBLET> (hop-weblets-directory) :hz x))
	      (hop-builtin-weblets))))

;*---------------------------------------------------------------------*/
;*    hop-additional-rows ...                                          */
;*---------------------------------------------------------------------*/
(define (hop-additional-row ws)
   (map! (lambda (a)
	    (let* ((n (cadr (assq 'name a)))
		   (w (cadr (assq 'weblet a)))
		   (d (let ((c (assq 'sdescr a)))
			 (if (pair? c)
			     (if (>= (bigloo-debug) 1)
				 (format "~a - ~a" (cadr c) w)
				 (cadr c))
			     w))))
	       (<WEBLET> (dirname (dirname w)) :hz n :title d)))
	 (sort ws (lambda (a b)
		     (let ((namea (cadr (assq 'name a)))
			   (nameb (cadr (assq 'name b))))
			(string<? namea nameb))))))
