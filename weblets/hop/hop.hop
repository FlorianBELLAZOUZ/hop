;*=====================================================================*/
;*    serrano/prgm/project/hop/2.0.x/weblets/hop/hop.hop               */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed May 10 16:18:48 2006                          */
;*    Last change :  Tue Dec  8 10:46:21 2009 (serrano)                */
;*    Copyright   :  2006-09 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP initial weblet.                                              */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hophop
   
   (import hophop_config)
   
   (export hop
	   hop/panel
	   hop/dashboard
	   hop/dashboard-panel))

;*---------------------------------------------------------------------*/
;*    hop ...                                                          */
;*---------------------------------------------------------------------*/
(define-service (hop)
   (<HOP>
      (hop-panel :width 48 :height 48
	 :icons `("logo.png" ,(string-append (hop-dir) "/etc/default.png")))))

;*---------------------------------------------------------------------*/
;*    hop-make-hashtables ...                                          */
;*---------------------------------------------------------------------*/
(define (hop-make-hashtables)
   (let ((t (make-hashtable 20))
	 (ct (make-hashtable 20)))
      (hashtable-put! t "hop" #t)
      (hashtable-put! t "home" #t)
      ;; builtin weblets
      (for-each (lambda (w)
		   (hashtable-put! t w #t))
		(hop-builtin-weblets))
      ;; user defined weblets
      (for-each (lambda (a)
		   (let ((n (cadr (assq 'name a))))
		      (unless (hashtable-get t n)
			 (let* ((cp (assq 'category a))
				(c (if (pair? cp)
				       (string-capitalize (cadr cp))
				       "Misc")))
			    (hashtable-update! ct
					       c
					       (lambda (o)
						  (if (assoc n o)
						      o
						      (cons (cons n a) o)))
					       (list (cons n a)))))))
		(append-map find-weblets-in-directory (hop-autoload-directories)))
      (values t ct)))

;*---------------------------------------------------------------------*/
;*    hop-panel ...                                                    */
;*---------------------------------------------------------------------*/
(define (hop-panel #!key (showtitle #t) (width 48) (height 48) (icons '()) (open #f))
   (let ((open (or open (if showtitle 'replace 'tab))))
      (multiple-value-bind (t ct)
	 (hop-make-hashtables)
	 (list
	  (<WEBLETS> "Builtin Weblets"
		     (hop-builtin-row :showtitle showtitle
			:width width :height height :icons icons :open open))
	  (if (hop-view-by-category?)
	      (map! (lambda (k)
		       (let ((ws (map cdr (hashtable-get ct k))))
			  (<WEBLETS> k (hop-additional-row ws :open open))))
		    (sort (hashtable-key-list ct) string<?))
	      (let ((ws (map cdr (apply append (hashtable->list ct)))))
		 (let loop ((ws ws)
			    (apps '())
			    (apis '()))
		    (if (null? ws)
			(list
			 (<WEBLETS> "Additional Weblets"
				    (hop-additional-row (reverse! apps)
							:showtitle showtitle
							:width width
							:height height
							:icons icons
							:open open))
			 (<WEBLETS> "Additional APIs"
				    (hop-additional-row (reverse! apis)
							:showtitle showtitle
							:width width
							:height height
							:icons icons
							:open open)))
			(let* ((a (car ws))
			       (name (cadr (assq 'name a))))
			   (if (string-suffix? "-api" name)
			       (loop (cdr ws) apps (cons a apis))
			       (loop (cdr ws) (cons a apps) apis)))))))))))

;*---------------------------------------------------------------------*/
;*    hop/panel ...                                                    */
;*---------------------------------------------------------------------*/
(define-service (hop/panel showtitle size open)
   (let ((size (or size 48)))
      (<DIV> :class "hop-panel"
	 (hop-panel :showtitle showtitle
	    :width size :height size
	    :icons `("logo.png" ,(string-append (hop-dir) "/etc/default.png"))
	    :open (or open 'window)))))

;*---------------------------------------------------------------------*/
;*    hop/documentation ...                                            */
;*---------------------------------------------------------------------*/
(define-service (hop/documentation)
   (let* ((file (string-append (hop-dir) "/etc/hop.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    <WEBLETS> ...                                                    */
;*---------------------------------------------------------------------*/
(define (<WEBLETS> title tds)
   (list (<DIV> :class "weblets-title" title)
	 (<DIV> :class "weblets" tds)))

;*---------------------------------------------------------------------*/
;*    find-logo ...                                                    */
;*---------------------------------------------------------------------*/
(define (find-logo base hz icons)
   (let loop ((icons icons))
      (if (pair? icons)
	  (if (char=? (string-ref (car icons) 0) (file-separator))
	      (if (file-exists? (car icons))
		  (car icons)
		  (loop (cdr icons)))
	      (let ((logo (format "~a/~a/etc/~a" base hz (car icons))))
		 (if (file-exists? logo)
		     logo
		     (loop (cdr icons)))))
	  (string-append (hop-dir) "/etc/default.png"))))
	  
;*---------------------------------------------------------------------*/
;*    <WEBLET> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<WEBLET> base #!key url hz title showtitle width height icons open)
   (let ((url (or url (format "/hop/~a" hz))))
      (<TABLE> :class "weblet" 
	 (<TR>
	    (<TD> :class "logo"
	       :onclick (case open
			   ((tab)
			    ~(tab-open :src $url))
			   ((window)
			    ~(window-open :src $url :title title
				:toolbar #t :location #t directories: #t
				:menubar #t :scrollbars #t :resizable #t
				:titlebar #t))
			   (else
			    ~(set! document.location $url)))
	       (<IMG> :class "logo"
		  :inline #t
		  :title (if title (format "~a -- ~a" hz title) hz)
		  :alt title
		  :width width
		  :height height
		  :src (find-logo base hz icons))))
	 (when showtitle
	    (<TR>
	       (<TD> :class "legend"
		  (<SPAN> (or hz "home"))))))))

;*---------------------------------------------------------------------*/
;*    <HOP> ...                                                        */
;*---------------------------------------------------------------------*/
(define (<HOP> . obj)
   (<HTML>
      (<HEAD> :include "hop-dashboard" "hop-window"
	 :css (format "~a/hop.hss" (hop-dir))
	 :favicon (format "~a/etc/favicon.png" (hop-dir)))
      (<BODY>
	 (<DIV> :align "center"
	    (<TABLE> :class "hop"
	       (<COLGROUP>
		  (<COL> :width "0*"))
	       (<TR>
		  (<TD> :valign "top"
		     (<IMG> :class "logo" :inline #t
			:alt "a logo"
			:title "a logo"
			:src (format "~a/etc/logo.png" (hop-dir))))
		  (<TD> :valign "top"
		     (<TABLE> :width "100%"
			(<TR>
			   (<TD>
			      (<DIV> :id "title" "Hop v" (hop-version))))
			(<TR>
			   (<TD> :align 'left
			      obj)))))))
	 (<FOOT>
	    (<FOOT-BUTTON> :href "http://www.gnu.org/licenses/gpl.html"
	       :title "Gnu GPL"
	       :src "gpl.png")))))
				     
;*---------------------------------------------------------------------*/
;*    hop-builtin-row ...                                              */
;*---------------------------------------------------------------------*/
(define (hop-builtin-row #!key showtitle width height icons open)
   (cons (<WEBLET> (hop-weblets-directory)
		   :hz "home" :url (hop-url)
		   :showtitle showtitle
		   :width width :height :height :icons icons :open open)
	 (map (lambda (x)
		 (<WEBLET> (hop-weblets-directory)
			   :hz x
			   :showtitle showtitle
			   :width width :height :height :icons icons :open open))
	      (hop-builtin-weblets))))

;*---------------------------------------------------------------------*/
;*    hop-additional-row ...                                           */
;*---------------------------------------------------------------------*/
(define (hop-additional-row ws #!key showtitle width height icons open)
   (map! (lambda (a)
	    (let* ((n (cadr (assq 'name a)))
		   (w (cadr (assq 'weblet a)))
		   (d (let ((c (assq 'title a)))
			 (if (pair? c)
			     (if (>= (bigloo-debug) 1)
				 (format "~a - ~a" (cadr c) w)
				 (cadr c))
			     w))))
	       (<WEBLET> (dirname (dirname w)) :hz n :title d
			 :showtitle showtitle
			 :width width :height height :icons icons :open open)))
	 (sort ws (lambda (a b)
		     (let ((namea (cadr (assq 'name a)))
			   (nameb (cadr (assq 'name b))))
			(string<? namea nameb))))))

;*---------------------------------------------------------------------*/
;*    panel-event ...                                                  */
;*---------------------------------------------------------------------*/
(define panel-event
   (symbol->string (gensym)))

;*---------------------------------------------------------------------*/
;*    hop/dashboard ...                                                */
;*---------------------------------------------------------------------*/
(define-service (hop/dashboard)
   ~(let* ((horiz (cond
		     ((> (main-window-width) 800)
		      100)
		     ((> (main-window-width) 600)
		      50)
		     (else
		      10)))
	   (vert (cond
		    ((> (main-window-height) 800)
		     200)
		    ((> (main-window-height) 600)
		     100)
		    (else
		     10)))
	   (padding (cond
		       ((> (main-window-height) 800)
			50)
		       ((> (main-window-height) 600)
			20)
		       (else
			4)))
	   (style (format "border: 1px outset #777; -moz-border-radius: 1em; -webkit-border-radius: 1em; border-radius: 1em; top: ~apx; right: ~apx; bottom: ~apx; left: ~apx; padding: ~apx" vert horiz vert horiz padding))
	   (id1 (symbol->string (gensym)))
	   (id2 (symbol->string (gensym))))
       (define (remove-hop-dashboard! e)
	  (let ((el1 (dom-get-element-by-id id1))
		(el2 (dom-get-element-by-id id2)))
	     (dom-remove-child! document.body el1)
	     (dom-remove-child! document.body el2)
	     (remove-event-listener! $panel-event "server" remove-event-listener!)))
       ;; mask
       (dom-append-child!
	document.body
	(<DIV> :style (string-append "position: fixed; opacity: 0.8; background-color: #242222; z-index: 9997;  " style)
	   :id id1
	   ""))
       ;; frame
       (dom-append-child!
	document.body
	(<DIV> :style (string-append "position: fixed; opacity: 1.0; background-color: transparent; z-index: 9998; cursor: default;" style)
	   :id id2
	   :onclick (remove-hop-dashboard! event)
	   (<IFRAME> :src ($hop/dashboard-panel)
	      :style "border: 0; width: 100%; height: 100%; background-color: transparent; display: none;"
	      :onload (node-style-set! this :display "block"))
	   (<DIV> :style
	      (format "color: #ccc; font-size: 60%; position: fixed; bottom: ~apx; text-align: center; left: 0; right: 0; z-index: 9999;" (+ 4 vert))
	      "Click here to remove...")
	   (add-event-listener! $panel-event "server" remove-hop-dashboard!)))))

;*---------------------------------------------------------------------*/
;*    hop/dashboard-panel ...                                          */
;*---------------------------------------------------------------------*/
(define-service (hop/dashboard-panel)
   (<HTML>
      (<HEAD> :css (format "~a/hop.hss" (hop-dir))
         :include "hop-window")
      (<BODY> :class "hop-dashboard-panel" :style "background: transparent; opacity: 1.0"
	 :onclick ~(with-hop ($(service () (hop-event-signal! panel-event #t))))
	 (<DIV> :style "border: 0; position: absolute; top: 0; bottom: 0; left: 0; right: 0;"
	    (hop-panel
	       :showtitle #f
	       :icons `("logo.png" ,(string-append (hop-dir) "/etc/default.png")))))))
   
