;*=====================================================================*/
;*    .../prgm/project/hop/1.9.x/weblets/hzbuilder/generate.hop        */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed Sep 24 15:46:26 2008                          */
;*    Last change :  Thu Sep 25 10:39:46 2008 (serrano)                */
;*    Copyright   :  2008 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    The code generator                                               */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hzbuilder_generate

   (import hzbuilder_config)
   
   (export hzbuilder/generate))

;*---------------------------------------------------------------------*/
;*    string-valid? ...                                                */
;*---------------------------------------------------------------------*/
(define (string-valid? val)
   (and (string? val) (>fx (string-length val) 0)))

;*---------------------------------------------------------------------*/
;*    hzbuilder/generate ...                                           */
;*---------------------------------------------------------------------*/
(define-service (hzbuilder/generate dir name version header description author
				    logo favicon dashboard
				    category minhop maxhop)
   ;; mandatory checks
   (cond
      ((not (string-valid? dir))
       (http-bad-request (format "Illegal directory name: ~a" dir)))
      ((not (string-valid? name))
       (http-bad-request (format "Illegal weblet name: ~a" name)))
      ((not (string-valid? version))
       (http-bad-request (format "Illegal weblet version: ~a" version)))
      ((not (file-exists? logo))
       (http-bad-request (format "Logo icon does not exist: ~a" logo)))
      ((not (file-exists? favicon))
       (http-bad-request (format "Favicon does not exist: ~a" favicon)))
      ((not (string-valid? category))
       (http-bad-request (format "Illegal category: ~a" category)))
      ((not (string-valid? minhop))
       (http-bad-request (format "Illegal min hop value: ~a" minhop))))
   ;; optional checks
   (unless (string-valid? header)
      (set! header "A Hop Weblet generated by HzBuilder"))
   (unless (string-valid? author)
      (set! author ""))
   (hzbuilder-generate dir name version header description author
		       logo favicon dashboard
		       category minhop maxhop))

;*---------------------------------------------------------------------*/
;*    <TTDIR> ...                                                      */
;*---------------------------------------------------------------------*/
(define (<TTDIR> name)
   (<TT> :class "dir" name))

;*---------------------------------------------------------------------*/
;*    <TTFILE> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<TTFILE> name)
   (<TT> :class "file" name))

;*---------------------------------------------------------------------*/
;*    hzbuilder-generate ...                                           */
;*---------------------------------------------------------------------*/
(define (hzbuilder-generate dir name version header description
			    author logo favicon dashboard
			    category minhop maxhop)
   (let* ((res '())
	  (dirname (make-file-name dir name))
	  (filename (string-append (make-file-name dirname name) ".hop"))
	  (hssname (string-append (make-file-name dirname name) ".hss"))
	  (cfgname (string-append (make-file-name dirname "config") ".hop.in"))
	  (etcname (make-file-name dirname "etc"))
	  (logoname (make-file-name etcname "logo.png"))
	  (faviconname (make-file-name etcname "favicon.png"))
	  (dashname (make-file-name etcname "dashboard.png"))
	  (wikiname (make-file-name etcname (string-append name ".wiki.in")))
	  (webletinfo (make-file-name etcname "weblet.info.in"))
	  (mkmfname (make-file-name dirname "Makefile"))
	  (docname (make-file-name etcname "doc.png")))
      ;; create the directory if it does not already exist
      (unless (directory? dirname)
	 (set! res (cons (<DIV> "Directory created: " (<TTDIR> dirname)) res))
	 (make-directories dirname))
      ;; create the name.hop file if it does not already exists
      (unless (file-exists? filename)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> filename)) res))
	 (hzbuilder-generate-file filename name version header dashboard)
	 ;; if the hss does not exist, create it
	 (unless (file-exists? hssname)
	    (set! res (cons (<DIV> "File created: " (<TTFILE> hssname)) res))
	    (hzbuilder-generate-hss hssname name))
	 ;; if the config does not exist, create it
	 (unless (file-exists? cfgname)
	    (set! res (cons (<DIV> "File created: " (<TTFILE> cfgname)) res))
	    (hzbuilder-generate-config cfgname name author)))
      ;; create the etc directory
      (unless (directory? etcname)
	 (set! res (cons (<DIV> "Directory created: " (<TTDIR> etcname)) res))
	 (make-directories etcname))
      ;; copy the logo file
      (unless (file-exists? logoname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> logoname)) res))
	 (copy-file logo logoname))
      ;; copy the favicon file
      (unless (file-exists? faviconname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> faviconname)) res))
	 (copy-file favicon faviconname))
      ;; copy the dashboard file
      (when (and dashboard (not (file-exists? dashname)))
	 (set! res (cons (<DIV> "File created: " (<TTFILE> dashname)) res))
	 (copy-file dashboard dashname))
      ;; copy the doc icon file
      (unless (file-exists? docname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> docname)) res))
	 (copy-file (make-file-path (hzbuilder-dir) "etc" "doc.png") docname))
      ;; create the wiki file
      (unless (file-exists? wikiname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> wikiname)) res))
	 (hzbuilder-generate-wiki wikiname name header description))
      ;; create the weblet.info file
      (unless (file-exists? webletinfo)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> webletinfo)) res))
	 (hzbuilder-generate-webletinfo webletinfo name header description))
      ;; create the Makefile
      (unless (file-exists? mkmfname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> mkmfname)) res))
	 (hzbuilder-generate-makefile mkmfname dirname name version
				      category minhop maxhop))
      ;; add the okay button and return
      (cons (<DIV> :align 'center
	       (<BUTTON> :onclick ~(let ((log (dom-get-element-by-id
					       "hzb-log")))
				      (node-style-set!
				       log :display "none"))
		  :id "hzb-log-okay"
		  "Okay"))
	    (reverse! res))))

;*---------------------------------------------------------------------*/
;*    hzbuilder-generate-file ...                                      */
;*---------------------------------------------------------------------*/
(define (hzbuilder-generate-file filename name version header dashboard)
   (with-output-to-file filename
      (lambda ()
	 (for-each display [;; the module declaration
(module ,(begin name)
   (import ,(format "~a_config" name)))			       

;; The weblet entry point
(define-service (,(begin name))
   (<HTML>
      (<HEAD> :title ,(format "~s" (string-for-read header))
	 :favicon (service-resource ,(begin name) "etc/favicon.png")
	 :base (service-base-url ,(begin name) (current-request))
	 ,(if dashboard ":include \"hop-dashboard\"" "")
	 :css ,(format "\"~a.hss\"" name))
      (<BODY>
	 (<DIV> :align "center"
	    (<TABLE> :class "main"
	       (<COLGROUP> (<COL> :width "0*"))
	       (<TR>
		  (<TD> (<IMG> :class "logo" :src "etc/logo.png")
			(<DIV> :class "version"
			   (<DIV> ,(format "\"~a v ~a\"" name version))
			   (<DIV> ,(let ((d (current-date)))
				      (format "\"~a ~a ~a\""
					      (date-day d)
					      (month-aname (date-month d) )
					      (date-year d)))))
			(<DIV> :class "buttons"
			   (<DIV> :class "doc"
			      (<A> :title "Documentation"
				 :class "doc"
				 :href "dummy"
				 :onclick ~(set! this.href (,(format "$~a/documentation" name)))
				 :target "_blank"
				 :title ,(format "\"~a documentation\"" name)
				 (<IMG> :class "doc"
				    :inline #t
				    :src (service-resource ,(begin name) "etc/doc.png"))
				 "Help"))))
		  (<TD>
		     (<TABLE> :class "body"
			(<TR> (<TD> :class "weblet-title"
				 ,(format "\"~a - ~a\"" name header)))
			(<TR> (<TD>
				 ;; ========================================
				 ;; INSERT HERE YOU CONTENT
				 (<DIV>
				    (<BUTTON> :onclick ~(with-hop (,(format "$~a/example" name))
							  (lambda (h)
							     (innerHTML-set! "example-result" h)))
				       "Im an example"))
				 (<DIV> :id "example-result")
				 ;; ========================================
				 )))))))
	 (<FOOT>))))

;; an example
(define-service (,(format "~a/example" name))
   (<TABLE>
      (<TR> (<TH> "foo") (<TH> "bar"))
      (<TR> (<TD> (random 10)) (<TD> (random 99)))))

;; the documentation entry point
(define-service (,(format "~a/documentation" name))
   (let* ((file (service-resource ,(format "~a/documentation" name) ,(format "\"etc/~a.wiki\"" name)))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

(define (<CONFIGURE>)
   (<DIV> :class ,(format "\"~a-preferences\"" name)
      (<H1> (<IMG> :src (service-resource ,(begin name) "etc/configure.png"))
	    (format "\"~a Configuration\"" (string-capitalize name)))
      (<BUTTON> :onclick
	 ~(preferences-save "hopaudio-configure"
			    (make-file-name (hop-rc-directory)
					    (format "\"~arc.hop\"" name)))
	 :title "Save configuration (needs admin privileges)"
	 "Save Configuration")
      (hopaudio-preferences-edit :id (format "\"~a-configure\"" name))))

(define-service (,(begin name)/preferences)
   (<HTML>
      (<HEAD> :title ,(format "~s" (string-capitalize name))
	 :favicon (service-resource ,(begin name) "etc/favicon.png")
	 :base (service-base-url ,(begin name) (current-request))
	 :css (format "\"~a.hss\"" name))
      (<HOPAUDIO:BODY> :class (format "\"~a-body-preferences\"" name)
	 (<DIV> :id (format "\"~a-title\"" name)
	    (format "\"~a Configure\"" (string-capitalize name)))
	 (<CONFIGURE>))))])

         (when dashboard
            (newline)
	    (for-each display [
(define-service (hopaudio/dashboard)
   ~(window-open :id ,(format "\"~a/dashboard\"" name)
       :title (format "~s" (string-capitalize name)
       :src (<IFRAME> :src (,(format "$~a/dashboard-panel" name))
	       :style "border: 0; width: 370px; height: 130px;")
       :parent document.body
       :width 375
       :height 160
       :left (- (current-window-width) 390)
       :top (- (current-window-height) 170))))])))))


;*---------------------------------------------------------------------*/
;*    hzbuilder-generate-hss ...                                       */
;*---------------------------------------------------------------------*/
(define (hzbuilder-generate-hss filename name)
   (with-output-to-file filename
      (lambda ()
	 (for-each display [/* the server side module declaration for the hss */
$(module ,(format "~a_hss" name)
   (import ,(format "~a_config" name)))
])
	 (send-file (make-file-path (hzbuilder-dir) "etc" "default.hss")
		    (current-output-port)))))
   
;*---------------------------------------------------------------------*/
;*    hzbuilder-generate-config ...                                    */
;*---------------------------------------------------------------------*/
(define (hzbuilder-generate-config filename name author)
   (with-output-to-file filename
      (lambda ()
	 (for-each display [;; the module declaration for the hss
(module ,(format "~a_config" name)
  (export (,(format "~a-version::bstring" name))
          (,(format "~a-date::bstring" name))
	  (,(format "~a-author::bstring" name))
	  (,(format "~a-dir::bstring" name))
	  (,(format "~a-rc-directory::bstring" name))))

 (define (,(format "~a-version" name))
    "@VERSION@")
 (define (,(format "~a-date" name))
    "@DATE@")
 (define (,(format "~a-author" name))
    ,(format "~s" author))
 
 (define (,(format "~a-dir" name))
    (dirname (the-loading-file)))
 (define (,(format "~a-rc-directory" name))
    (make-file-name (hop-rc-directory) ,(format "~s" name)))
 ]))))
   
;*---------------------------------------------------------------------*/
;*    hzbuilder-generate-wiki ...                                      */
;*---------------------------------------------------------------------*/
(define (hzbuilder-generate-wiki filename name header description)
   (with-output-to-file filename
      (lambda ()
	 (for-each display [
<doc> ,(string-upcase name) -- ,(begin header)

== Description ==

,(begin "[[")/hop/,(begin name)|,(string-upcase name),(begin "]]") ,(begin description)


~~
,(begin ",")(<TABLE> :class "weblet-facts"
  (<TR> (<TD> :rowspan 5 :class "logo"
	   (<IMG> :src (make-file-name (dirname (the-loading-file)) "logo.png")))
        (<TH> (string-capitalize "@HZ@") " version") (<TD> "@VERSION@"))
  (<TR> (<TH> "Hop min version") (<TD> "@MINHOP@"))
  (<TR> (<TH> "Hop max version") (<TD> "@MAXHOP@"))
  (<TR> (<TH> "Date") (<TD> "@DATE@"))
  (<TR> (<TH> "Category") (<TD> "@CATEGORY@")))]))))

;*---------------------------------------------------------------------*/
;*    hzbuilder-generate-webletinfo ...                                */
;*---------------------------------------------------------------------*/
(define (hzbuilder-generate-webletinfo filename name header description)
   (with-output-to-file filename
      (lambda ()
	 (for-each display [
((name "@HZ@")
 (author ,(format "~s" name))
 (version "@VERSION@")
 (publisher "@PUBLISHER@")
 (repository "@REPOSITORY@")
 (category "@CATEGORY@")
 (minhop "@MINHOP@")
 (mxhop "@MAXHOP@")
 (home "@HOME@")
 (title ,(format "~s" header))
 (comment ,(format "~s" description)))]))))

;*---------------------------------------------------------------------*/
;*    hzbuilder-generate-makefile ...                                  */
;*---------------------------------------------------------------------*/
(define (hzbuilder-generate-makefile filename dirname name version category
				     minhop maxhop)
   (with-output-to-file filename
      (lambda ()
	 (let* ((srcs (filter (lambda (f)
				 (and (or (string-suffix? ".hop" f)
					  (string-suffix? ".hss" f)
					  (string-suffix? ".scm" f))
				      (not (file-exists? (string-append f ".in")))))
			      (directory->list dirname)))
		(files (apply string-append
			      (map (lambda (f) (string-append f " ")) srcs))))
	    (for-each display [## run "make" to build the .hz file
HZ=,(begin name)
VERSION=,(begin version)
CATEGORY=,(begin category)
MINHOP=,(begin minhop)
,(if maxhop (format "MAXHOP=~a" maxhop) "")

FILES=,(begin files)config.hop.in \\
  etc/logo.png etc/favicon.png etc/,(begin name).wiki.in etc/weblet.info.in \\
  Makefile

HOPREPOSITORY=,(hzbuilder-repository)

])
	 (send-file (make-file-path (hzbuilder-dir) "etc" "Makefile.hz")
		    (current-output-port))))))
   


