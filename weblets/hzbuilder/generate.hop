;*=====================================================================*/
;*    .../prgm/project/hop/2.0.x/weblets/hzbuilder/generate.hop        */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed Sep 24 15:46:26 2008                          */
;*    Last change :  Tue Dec 22 06:08:04 2009 (serrano)                */
;*    Copyright   :  2008-09 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    The code generator                                               */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hzbuilder_generate

   (import hzbuilder_config)
   
   (export hzbuilder/generate))

;*---------------------------------------------------------------------*/
;*    string-valid? ...                                                */
;*---------------------------------------------------------------------*/
(define (string-valid? val)
   (and (string? val) (>fx (string-length val) 0)))

;*---------------------------------------------------------------------*/
;*    hzbuilder/generate ...                                           */
;*---------------------------------------------------------------------*/
(define-service (hzbuilder/generate dir name version header
				    description directory author
				    logo favicon dashboard
				    category license
				    minhop maxhop home download publisher)
   ;; mandatory checks
   (cond
      ((not (string-valid? dir))
       (http-bad-request (format "Illegal directory name: ~a" dir)))
      ((not (string-valid? name))
       (http-bad-request (format "Illegal weblet name: ~a" name)))
      ((not (string-valid? version))
       (http-bad-request (format "Illegal weblet version: ~a" version)))
      ((not (file-exists? logo))
       (http-bad-request (format "Logo icon does not exist: ~a" logo)))
      ((not (file-exists? favicon))
       (http-bad-request (format "Favicon does not exist: ~a" favicon)))
      ((not (string-valid? category))
       (http-bad-request (format "Illegal category: ~a" category)))
      ((not (string-valid? license))
       (http-bad-request (format "Illegal license: ~a" license)))
      ((not (string-valid? minhop))
       (http-bad-request (format "Illegal min hop value: ~a" minhop))))
   ;; optional checks
   (unless (string-valid? header)
      (set! header "A Hop Weblet generated by HzBuilder"))
   (unless (string-valid? author)
      (set! author ""))
   (hzbuilder-generate dir name version header description directory author
		       logo favicon dashboard
		       category license minhop maxhop home download publisher))

;*---------------------------------------------------------------------*/
;*    <TTDIR> ...                                                      */
;*---------------------------------------------------------------------*/
(define (<TTDIR> name)
   (<TT> :class "dir" name))

;*---------------------------------------------------------------------*/
;*    <TTFILE> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<TTFILE> name)
   (<TT> :class "file" name))

;*---------------------------------------------------------------------*/
;*    hzbuilder-generate ...                                           */
;*---------------------------------------------------------------------*/
(define (hzbuilder-generate dir name version header description directory
			    author logo favicon dashboard
			    category license minhop maxhop
			    home download publisher)
   (let* ((now (current-date))
	  (replac `((@HZ@ ,name)
		    (@HZUPCASE@ ,(string-upcase name))
		    (@TITLE@ ,header)
		    (@VERSION@ ,version)
		    (@MINHOP@ ,minhop)
		    (@MAXHOP@ ,maxhop)
		    (@HOME@ ,home)
		    (@DOWNLOAD@ ,download)
		    (@PUBLISHER@ ,publisher)
		    (@CATEGORY@ ,category)
		    (@LICENSE@ ,license)
		    (@AUTHOR@ ,author)
		    (@DATE@ now)
		    (@DASHBOARD@ ,(if dashboard "#t" "#f"))
		    (@DESCRIPTION@ ,description)
		    (@COMMENT@ ,description)
		    (@DIRECTORY@ ,directory)
		    (@DATEYEAR@ ,(date-year now))
		    (@DATEMONTH@ ,(date-month now))
		    (@DATEAMONTH@ ,(month-name (date-month now)))
		    (@DATEDAY@ ,(date-day now))
		    (@REPOSITORY@ ,(hzbuilder-repository))
		    (@DASHBOARDPNG@ ,(if dashboard "etc/dashboard.png" ""))))
	  (res '())
	  (dirname (make-file-name dir name))
	  (filename (string-append (make-file-name dirname name) ".hop"))
	  (hssname (string-append (make-file-name dirname name) ".hss"))
	  (cfgname (string-append (make-file-name dirname "config") ".hop.in"))
	  (etcname (make-file-name dirname "etc"))
	  (logoname (make-file-name etcname "logo.png"))
	  (faviconname (make-file-name etcname "favicon.png"))
	  (dashname (make-file-name etcname "dashboard.png"))
	  (wikiname (make-file-name etcname (string-append name ".wiki.in")))
	  (webletinfo (make-file-name etcname "weblet.info.in"))
	  (mkmfname (make-file-name dirname "Makefile"))
	  (docname (make-file-name etcname "doc.png"))
	  (homename (make-file-name etcname "homepage"))
	  (homepagename (make-file-name homename "01-homepage.wiki"))
	  (homepagepngname (make-file-name homename "01-homepage.png"))
	  (prefsname (make-file-name etcname "prefs.png")))
      ;; create the directory if it does not already exist
      (unless (directory? dirname)
	 (set! res (cons (<DIV> "Directory created: " (<TTDIR> dirname)) res))
	 (make-directories dirname))
      ;; create the name.hop file if it does not already exists
      (unless (file-exists? filename)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> filename)) res))
	 (sed (hzbuilder-hop-skeleton) filename replac)
	 ;; if the hss does not exist, create it
	 (unless (file-exists? hssname)
	    (set! res (cons (<DIV> "File created: " (<TTFILE> hssname)) res))
	    (sed (hzbuilder-hss-skeleton) hssname replac))
	 ;; if the config does not exist, create it
	 (unless (file-exists? cfgname)
	    (set! res (cons (<DIV> "File created: " (<TTFILE> cfgname)) res))
	    (sed (hzbuilder-config-skeleton) cfgname replac)))
      ;; create the etc directory
      (unless (directory? etcname)
	 (set! res (cons (<DIV> "Directory created: " (<TTDIR> etcname)) res))
	 (make-directories etcname))
      ;; copy the logo file
      (unless (file-exists? logoname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> logoname)) res))
	 (copy-file logo logoname))
      ;; copy the favicon file
      (unless (file-exists? faviconname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> faviconname)) res))
	 (copy-file favicon faviconname))
      ;; copy the dashboard file
      (when (and dashboard (not (file-exists? dashname)))
	 (set! res (cons (<DIV> "File created: " (<TTFILE> dashname)) res))
	 (copy-file dashboard dashname))
      ;; copy the doc icon file
      (unless (file-exists? docname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> docname)) res))
	 (copy-file (make-hzbuilder-path (hzbuilder-docpng)) docname))
      ;; copy the prefs icon file
      (unless (file-exists? prefsname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> prefsname)) res))
	 (copy-file (make-hzbuilder-path (hzbuilder-configurepng)) prefsname))
      ;; create the wiki file
      (unless (file-exists? wikiname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> wikiname)) res))
	 (sed (hzbuilder-doc-skeleton) wikiname replac))
      ;; create the weblet.info file
      (unless (file-exists? webletinfo)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> webletinfo)) res))
	 (sed (hzbuilder-webletinfo-skeleton) webletinfo replac))
      ;; create the directory etc/homepage
      (unless (directory? homename)
	 (set! res (cons (<DIV> "Directory created: " (<TTDIR> etcname)) res))
	 (make-directories homename))
      ;; create the etc/homepage/01-homepage.wiki file
      (unless (file-exists? homepagename)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> homepagename)) res))
	 (sed (hzbuilder-homepage-skeleton) homepagename replac))
      ;; create the etc/homepage/01-homepage.png file
      (unless (file-exists? homepagepngname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> homepagepngname)) res))
	 (copy-file favicon homepagepngname))
      ;; create the Makefile
      (unless (file-exists? mkmfname)
	 (set! res (cons (<DIV> "File created: " (<TTFILE> mkmfname)) res))
	 (sed (hzbuilder-makefile-skeleton) mkmfname replac))
      ;; copy the additional templates
      (let ((custom (hzbuilder-custom-skeletons-dir)))
	 (when (and (string? custom) (directory? custom))
	    (set! res (append (copy-directory custom dirname replac) res))))
      ;; add the okay button and return
      (cons (<DIV> :align 'center
	       (<BUTTON> :onclick ~(let ((log (dom-get-element-by-id
					       "hzb-log")))
				      (node-style-set!
				       log :display "none"))
		  :id "hzb-log-okay"
		  "Okay"))
	    (reverse! res))))

;*---------------------------------------------------------------------*/
;*    make-hzbuilder-path ...                                          */
;*---------------------------------------------------------------------*/
(define (make-hzbuilder-path file)
   (if (and (string? file)
	    (>fx (string-length file) 0)
	    (not (char=? (string-ref file 0) (file-separator))))
       (make-file-name (hzbuilder-dir) file)
       file))

;*---------------------------------------------------------------------*/
;*    copy-directory ...                                               */
;*---------------------------------------------------------------------*/
(define (copy-directory srcdir targetdir replacements)
   
   (define (copy-file file)
      (let ((target (make-file-name targetdir file)))
	 (if (file-exists? target)
	     '()
	     (let ((src (make-file-name srcdir file)))
		(if (directory? src)
		    (begin
		       (make-directory target)
		       (cons (<DIV> "Directory created: " (<TTDIR> target))
			     (copy-directory src target)))
		    (begin
		       (sed src target replacements)
		       (list (<DIV> "File created: " (<TTFILE> target)))))))))
   
   (append-map copy-file (directory->list srcdir)))

;*---------------------------------------------------------------------*/
;*    sed ...                                                          */
;*---------------------------------------------------------------------*/
(define (sed src target replacements)
   
   (define *sed-grammar*
      (regular-grammar (replacements)
	 ((+ (out #\@))
	  (display (the-string))
	  (ignore))
	 ((: #\@ (+ (or alpha digit #\_ #\-)) #\@)
	  (let ((k (the-symbol)))
	     (let ((r (assq k replacements)))
		(if (pair? r)
		    (display (cadr r))
		    (display k)))
	     (ignore)))
	 ("@@"
	  (display #\@)
	  (ignore))
	 ("@"
	  (display #\@)
	  (ignore))
	 (else
	  #f)))
   
   (with-input-from-file src
      (lambda ()
	 (with-output-to-file target
	    (lambda ()
	       (read/rp *sed-grammar* (current-input-port) replacements))))))
