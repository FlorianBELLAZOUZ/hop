;*=====================================================================*/
;*    serrano/prgm/project/hop/1.10.x/weblets/wiki/wiki.hop            */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Mon Nov 17 12:14:57 2008 (serrano)                */
;*    Copyright   :  2005-08 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP wiki                                                         */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module wiki
   (import wiki_config)
   (export wiki
	   wiki/documentation
	   wiki/preferences))

;*---------------------------------------------------------------------*/
;*    wiki ...                                                         */
;*---------------------------------------------------------------------*/
(define-service (wiki path)
   (let ((req (current-request)))
      (if (string? path)
	  (if (authorized-path? req path)
	      (wiki-view req path)
	      (user-access-denied))
	  (wiki-query req))))

;*---------------------------------------------------------------------*/
;*    wiki/documentation ...                                           */
;*---------------------------------------------------------------------*/
(define-service (wiki/documentation)
   (let* ((file (service-resource wiki/documentation "etc/wiki.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    wiki/preferences ...                                             */
;*---------------------------------------------------------------------*/
(define-service (wiki/preferences)
   (<HTML>
      (<HEAD> :title "Hop wiki"
	 :base (service-base-url wiki req)
	 :favicon "etc/favicon.png"
	 :css "wiki.hss")
      (<WIKI:BODY> :class "wiki"
	 ~(define (preferences)
	     (with-hop ($(service ()
			    (let ((prefs (hopmail-prefs))
				  (dir (dirname prefs)))
			       (unless (directory? dir)
				  (make-directories dir))
			       (hopmail-preferences-save prefs)
			       prefs)))))
	 (wiki-preferences-edit :onclick ~(preferences)))))

;*---------------------------------------------------------------------*/
;*    wiki/edit ...                                                    */
;*---------------------------------------------------------------------*/
(define-service (wiki/edit file)
   (let ((req (current-request)))
      (if (and (authorized-service? req 'wiki/edit)
	       (authorized-path? req file))
	  (if (file-exists? file)
	      (<HTML>
		 (<HEAD> :title "Hop wiki"
		    :base (service-base-url wiki req)
		    :favicon "etc/favicon.png"
		    :css "wiki.hss")
		 (let ((editor (<TEXTAREA>
				  :class "editor"
				  :rows 70 :cols 80
				  (with-input-from-file file read-string)))
		       (base (service-base-url wiki/edit req)))
		    (<WIKI:BODY>
		       (<DIV> :id "wiki-edit" file)
		       (<BUTTON>
			  :onclick ~(if (confirm "Save the document?")
					(with-hop ($(service (body)
						       (with-output-to-file file
							  (lambda ()
							     (display body))))
						    $editor.value)))
			  "Save")
		       (<DIV> :align "center"
			  editor))))
	      (htt-file-not-found file))
	  (user-access-denied))))

;*---------------------------------------------------------------------*/
;*    wiki/edit/editor ...                                             */
;*---------------------------------------------------------------------*/
(define-service (wiki/edit/editor file editor)
   (let ((req (current-request)))
      (if (and (authorized-service? req 'wiki/edit/editor)
	       (authorized-path? req file))
	  (begin
	     (run-process editor file :wait #f)
	     #f)
	  (user-access-denied))))
   
;*---------------------------------------------------------------------*/
;*    <WIKI:BODY> ...                                                  */
;*---------------------------------------------------------------------*/
(define (<WIKI:BODY> . body)
   (<BODY> :class "wiki"
      (<DIV> :align 'center
	 (<TABLE> :class "wiki"
	    (<TR>
	       (<TD> :valign "top"
		  (<DIV>
		     (<IMG> :id "logo"
			:inline #t
			:src (service-resource wiki "etc/logo.png")))
		  (<DIV> :class "version" "HopWiki v " (wiki-version)))
	       (<TD> :id "body"
		  (<DIV> :id "wiki-title" "Hop Wiki Pre-Viewer")
		  body))))
      (<FOOT>)))

;*---------------------------------------------------------------------*/
;*    wiki-query ...                                                   */
;*---------------------------------------------------------------------*/
(define (wiki-query req)
   (<HTML>
      (<HEAD>
	 :title "Wiki selection page"
	 :include "hop-paned" "hop-file" "hop-window" "hop-tree"
	 :base (service-base-url wiki req)
	 :favicon "etc/favicon.png"
	 :css "wiki.hss")
      (<WIKI:BODY>
	 (<FILECHOOSER>
	    :filters '(("Wiki (*.wiki)" "^[^.].*[.]wiki$")
		       ("All Files" ".*"))
	    :onopen ~(set! document.location ($wiki this.value))))))

;*---------------------------------------------------------------------*/
;*    wiki-view ...                                                    */
;*---------------------------------------------------------------------*/
(define (wiki-view req file)
   (unless (file-exists? file)
      (with-output-to-file file (lambda () (display "== Sample ==\n"))))
   (if (file-exists? file)
       (<HTML>
	  (<HEAD> :title "Hop wiki"
	     :base (service-base-url wiki req)
	     :favicon "etc/favicon.png"
	     :css "wiki.hss")
	  (<WIKI:BODY> :class "wiki"
	     (<DIV> :id "wiki-edit"
		(when (authorized-service? req 'wiki/edit)
		   (<TABLE> :class 'edit :width "100%"
		      (<TR> (<TD> file)
			    (<TD> :class 'edit
			       (if (http-server-request? req)
				   (<EDIT:EMACS> file)
				   (<EDIT:EDIT> file)))))))
	     (<TABLE> :width "100%"
		(<TR> (<TD> :class "document"
			 (when (and (file-exists? file)
				    (not (directory? file)))
			    (wiki-file->hop file)))))))
       (http-file-not-found file)))

;*---------------------------------------------------------------------*/
;*    <EDIT:EDIT> ...                                                  */
;*---------------------------------------------------------------------*/
(define (<EDIT:EDIT> file)
   (list "[ "
	 (<SPAN> :class "edit"
	    :onclick ~(window.open $(make-service-url wiki/edit file)) "edit")
	 " ]"))
   
;*---------------------------------------------------------------------*/
;*    <EDIT:EMACS> ...                                                 */
;*---------------------------------------------------------------------*/
(define (<EDIT:EMACS> file)
   (let ((editor (preference-get 'wiki-editor :default "emacs")))
      (list "[ "
	    (<SPAN> :class "edit"
	       :onclick ~(window.open $(make-service-url wiki/edit file)) "edit")
	    " | "
	    (<SPAN>
	       :class "edit"
	       :onclick ~(with-hop ($wiki/edit/editor $file $editor))
	       (basename editor))
	    " ]")))
   
