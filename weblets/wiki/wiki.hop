;*=====================================================================*/
;*    serrano/prgm/project/hop/2.1.x/weblets/wiki/wiki.hop             */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Tue Mar  2 10:27:05 2010 (serrano)                */
;*    Copyright   :  2005-10 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP wiki                                                         */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module wiki
   
   (import wiki_config)

   ~(import wiki_client)
   
   (export wiki
	   wiki/compile
	   wiki/documentation
	   wiki/preferences
	   (<DOCUMENT> . l)
	   (<TOC> l))

   (static (class wiki-document
	      (head read-only)
	      (toc read-only)
	      (body read-only))
	   (class wiki-toc
	      (body read-only))))

;*---------------------------------------------------------------------*/
;*    wiki ...                                                         */
;*---------------------------------------------------------------------*/
(define-service (wiki #!key path (xml "xhtml"))
   (let ((req (current-request)))
      (if (string? path)
	  (if (authorized-path? req path)
	      (let ((be (hop-get-xml-backend (string->symbol xml))))
		 (instantiate::http-response-hop
		    (backend be)
		    (content-type (xml-backend-mime-type be))
		    (xml (wiki-view req path #t #f))))
	      (user-access-denied))
	  (wiki-query req xml))))

;*---------------------------------------------------------------------*/
;*    wiki ...                                                         */
;*---------------------------------------------------------------------*/
(define-service (wiki/compile #!optional path (xml "xhtml"))
   (let ((req (current-request)))
      (if (string? path)
	  (if (authorized-path? req path)
	      (let ((be (hop-get-xml-backend (string->symbol xml))))
		 (instantiate::http-response-hop
		    (backend be)
		    (content-type (xml-backend-mime-type be))
		    (xml (wiki-view req path #f #t))))
	      (user-access-denied))
	  (wiki-query req xml))))

;*---------------------------------------------------------------------*/
;*    wiki/documentation ...                                           */
;*---------------------------------------------------------------------*/
(define-service (wiki/documentation)
   (let* ((file (service-resource wiki/documentation "etc/wiki.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    wiki/preferences ...                                             */
;*---------------------------------------------------------------------*/
(define-service (wiki/preferences)
   (<HTML>
      (<HEAD> :title "Hop wiki"
	 :base (service-base-url wiki (current-request))
	 :favicon "etc/favicon.png"
	 :css "wiki.hss" "wiki-prefs.hss")
      (<WIKI:BODY> :class "wiki-preferences"
	 (<DIV> :align "center"
	    (<TABLE> :class "preferences"
	       (<TR>
		  (<TD> :colspan 2
		     (<DIV> :id "title" "Wiki Preferences")))
	       (<TR>
		  (<TD> :class "wiki-preferences"
		     (<BUTTON> :title "Save configuration (needs admin privileges)"
			:onclick ~(preferences-save
				   "wiki-configure"
				   (make-file-name (hop-rc-directory)
						   "wikirc.hop"))
			"Save Configuration")
		     (wiki-preferences-edit :id "wiki-configure"))))))))

;*---------------------------------------------------------------------*/
;*    wiki/edit ...                                                    */
;*---------------------------------------------------------------------*/
(define-service (wiki/edit file)
   (let ((req (current-request)))
      (if (and (authorized-service? req 'wiki/edit)
	       (authorized-path? req file))
	  (if (file-exists? file)
	      (<HTML>
		 (<HEAD> :title "Hop wiki"
		    :base (service-base-url wiki req)
		    :favicon "etc/favicon.png"
		    :css "wiki.hss")
		 (let ((editor (<TEXTAREA>
				  :class "editor"
				  :rows 70 :cols 80
				  ((hop-locale->charset)
				   (with-input-from-file file read-string))))
		       (base (service-base-url wiki/edit req)))
		    (<WIKI:BODY> :prefs #t
		       (<DIV> :id "wiki-edit" file)
		       (<BUTTON>
			  :onclick ~(if (confirm "Save the document?")
					(with-hop ($(service (body)
						       (with-output-to-file file
							  (lambda ()
							     (display
							      ((hop-charset->locale) body)))))
						    $editor.value)))
			  "Save")
		       (<DIV> :align "center"
			  editor))))
	      (htt-file-not-found file))
	  (user-access-denied))))

;*---------------------------------------------------------------------*/
;*    wiki/edit/editor ...                                             */
;*---------------------------------------------------------------------*/
(define-service (wiki/edit/editor file editor)
   (let ((req (current-request)))
      (if (and (authorized-service? req 'wiki/edit/editor)
	       (authorized-path? req file))
	  (begin
	     (run-process editor file :wait #f)
	     #f)
	  (user-access-denied))))
   
;*---------------------------------------------------------------------*/
;*    <WIKI:BODY> ...                                                  */
;*---------------------------------------------------------------------*/
(define-xml-compound <WIKI:BODY> ((prefs #f)
				  (compiled #f)
				  (path #f)
				  (class "wiki")
				  body)
   (<BODY> :class class
      (<DIV> :align 'center
	 (if compiled
	     (<TABLE> :class "wiki"
		(<TR> (<TD> :id "body" :class "wiki-compiled" body)))
	     (<TABLE> :class "wiki"
		(<TR>
		   (<TD> :valign "top" :class "wiki-logo"
		      (<DIV>
			 (<IMG> :id "logo"
			    :inline #t
			    :src (service-resource wiki "etc/logo.png")))
		      (<DIV> :class "version"
			 (<DIV> "HopWiki v " (wiki-version)))
		      (<WIKI:BUTTONS> prefs path))
		   (<TD> :id "body"
		      (<DIV> :id "wiki-weblet-title" "Hop Wiki Pre-Viewer")
		      body)))))
      (<FOOT> :inline #t)))

;*---------------------------------------------------------------------*/
;*    <WIKI:BUTTONS> ...                                               */
;*---------------------------------------------------------------------*/
(define (<WIKI:BUTTONS> prefs path)
   (<DIV> :class "buttons"
      (<DIV> :class "button doc"
	 (<A> :title "Wiki Documentation"
	    :class "doc"
	    :href "documentation"
	    :onclick ~(set! this.href ($wiki/documentation))
	    :target "_blank"
	    (<IMG> :class "doc"
	       :inline #t
	       :src (service-resource wiki "etc/doc.png"))
	    "Help"))
      (when prefs
	 (<DIV> :class "button prefs"
	    (<A> :title "Wiki Preferences"
	       :class "doc"
	       :href "preferences"
	       :onclick ~(set! this.href ($wiki/preferences))
	       :target "_blank"
	       (<IMG> :class "doc"
		  :inline #t
		  :src (service-resource wiki "etc/prefs.png"))
	       "Prefs")))
      (when path
	 (<DIV> :class "button prefs"
	    (<A> :title "Compile"
	       :class "doc"
	       :href "compile"
	       :onclick ~(set! this.href ($wiki/compile $path))
	       :target "_blank"
	       (<IMG> :class "doc"
		  :inline #t
		  :src (service-resource wiki "etc/compile.png"))
	       "Compile")))))

;*---------------------------------------------------------------------*/
;*    wiki-query ...                                                   */
;*---------------------------------------------------------------------*/
(define (wiki-query req xml)
   (<HTML>
      (<HEAD> :title "Wiki selection page"
	 :include "hop-paned" "hop-file" "hop-window" "hop-tree" "hop-dashboard"
	 :base (service-base-url wiki req)
	 :favicon "etc/favicon.png"
	 :css "wiki.hss")
      (<WIKI:BODY>
	 (<FILECHOOSER>
	    :filters '(("Wiki (*.wiki)" "^[^.].*[.]wiki$")
		       ("All Files" ".*"))
	    :onopen ~(set! document.location ($wiki :path this.value :xml $xml))))))

;*---------------------------------------------------------------------*/
;*    wiki-load ...                                                    */
;*---------------------------------------------------------------------*/
(define (wiki-load file syn)
   (when (and (file-exists? file) (not (directory? file)))
      (wiki-file->hop file :syntax (when (wiki-syntax? syn) syn))))

;*---------------------------------------------------------------------*/
;*    wiki-view ...                                                    */
;*---------------------------------------------------------------------*/
(define (wiki-view req file prefs compiled)
   (unless (file-exists? file)
      (with-output-to-file file (lambda () (display "== Sample ==\n"))))
   (if (file-exists? file)
       (let ((hoppath (string-append (prefix file) ".hop")))
	  (if (file-exists? hoppath)
	      (wiki-view-hop hoppath req file prefs compiled)
	      (wiki-view-wiki req file prefs compiled)))))

;*---------------------------------------------------------------------*/
;*    wiki-view-wiki ...                                               */
;*---------------------------------------------------------------------*/
(define (wiki-view-wiki req file prefs compiled)
   (if (file-exists? file)
       (let* ((body (wiki-load file #f))
	      (jscript (sort (lambda (s1 s2)
				(string<? (prefix s1) (prefix s2)))
			     (filter (lambda (path)
					(or (string-suffix? ".scm" path)
					    (string-suffix? ".js" path)))
				     (directory->path-list (dirname file)))))
	      (css (sort (lambda (s1 s2)
			    (string<? (prefix s1) (prefix s2)))
			 (filter (lambda (path)
				    (or (string-suffix? ".hss" path)
					(string-suffix? ".css" path)))
				 (directory->path-list (dirname file)))))
	      (head (make-wiki-head compiled :jscript jscript :css css)))
	  (<WIKI:HTML> :compiled compiled :prefs prefs :file file
	     :req req
	     head (cons* #f #f body)))
       (http-file-not-found file)))

;*---------------------------------------------------------------------*/
;*    wiki-env ...                                                     */
;*---------------------------------------------------------------------*/
(define wiki-env (eval-find-module 'wiki))

;*---------------------------------------------------------------------*/
;*    wiki-view-hop ...                                                */
;*---------------------------------------------------------------------*/
(define (wiki-view-hop path req file prefs compiled)
   (cond
      ((not (file-exists? file))
       (http-file-not-found file))
      ((not (file-exists? path))
       (http-file-not-found path))
      (else
       (let ((doc (hop-load path :env wiki-env)))
	  (if (wiki-document? doc)
	      (with-access::wiki-document doc (head toc body)
		 (let ((head (when head
				(apply make-wiki-head compiled
				       (xml-element-body head))))
		       (toc (or toc (hop-wiki->toc body :max-depth 3 :ul <OL>))))
		    (<WIKI:HTML> :compiled compiled :prefs prefs :file file
		       :req req
		       head toc body)))
	      (http-service-error req
				  'wiki
				  (format "Loading path \"~a\"should have produced a DOCUMENT" path)))))))

;*---------------------------------------------------------------------*/
;*    make-wiki-head ...                                               */
;*---------------------------------------------------------------------*/
(define (make-wiki-head compiled . attributes)
   (<HEAD> :title "Hop wiki"
      :inline compiled
      :favicon (service-resource wiki "etc/favicon.png")
      :css (service-resource wiki "wiki.hss")
      :jscript (service-resource wiki "wiki.scm")
      :include "hop-dashboard"
      :jscript ~(define (oncompile) $compiled)
      attributes))

;*---------------------------------------------------------------------*/
;*    <WIKI:HTML> ...                                                  */
;*---------------------------------------------------------------------*/
(define-xml-compound <WIKI:HTML> ((compiled #f boolean)
				  (prefs #f)
				  (file #unspecified string)
				  (req #f)
				  (attributes)
				  body)
   (<HTML>
      (car body)
      (<WIKI:BODY> :class "wiki"
	 :prefs prefs
	 :compiled compiled
	 :path file
	 (unless compiled
	    (<DIV> :id "wiki-edit"
	       (when (authorized-service? req 'wiki/edit)
		  (<TABLE> :class 'edit :width "100%"
		     (<TR> (<TD> file)
			   (<TD> :class 'edit
			      (if (http-server-request? req)
				  (<EDIT:EMACS> file)
				  (<EDIT:EDIT> file))))))))
	 (<DIV> :class "wiki-head" :id "wiki-head")
	 (when (cadr body)
	    (<DIV> :class "wiki-toc" :id "wiki-toc" (cadr body))
	    (<DIV> :class "wiki-toc wiki-toc-popup" :id "wiki-toc-popup"
	       :onclick ~(wiki-hide-toc-popup this)
	       (cadr body)))
	 (<DIV> :class "wiki-body" :id "wiki-body" (cddr body))
	 (<DIV> :class "wiki-foot" :id "wiki-foot"))))

;*---------------------------------------------------------------------*/
;*    <DOCUMENT> ...                                                   */
;*---------------------------------------------------------------------*/
(define (<DOCUMENT> . l)
   (let ((heads (filter (lambda (x) (xml-markup-is? x 'head)) l))
	 (tocs (filter wiki-toc? l))
	 (body (filter (lambda (x)
			  (and (not (wiki-toc? x))
			       (not (xml-markup-is? x 'head))))
		       l)))
      (instantiate::wiki-document
	 (head (when (pair? heads) (car heads)))
	 (toc (when (pair? tocs) (wiki-toc-body (car tocs))))
	 (body body))))

;*---------------------------------------------------------------------*/
;*    <TOC> ...                                                        */
;*---------------------------------------------------------------------*/
(define (<TOC> l)
   (instantiate::wiki-toc
      (body l)))

;*---------------------------------------------------------------------*/
;*    <EDIT:EDIT> ...                                                  */
;*---------------------------------------------------------------------*/
(define (<EDIT:EDIT> file)
   (list "[ "
	 (<SPAN> :class "edit"
	    :onclick ~(window.open $(wiki/edit file)) "edit")
	 " ]"))
   
;*---------------------------------------------------------------------*/
;*    <EDIT:EMACS> ...                                                 */
;*---------------------------------------------------------------------*/
(define (<EDIT:EMACS> file)
   (let ((editor (preference-get 'wiki-editor :default "emacs")))
      (list "[ "
	    (<SPAN> :class "edit"
	       :onclick ~(window.open $(wiki/edit file)) "edit")
	    " | "
	    (<SPAN>
	       :class "edit"
	       :onclick ~(with-hop $(wiki/edit/editor file editor))
	       (basename editor))
	    " ]")))
