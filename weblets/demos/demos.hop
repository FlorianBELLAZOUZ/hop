;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/webconf/webconf.hop             */
;*    -------------------------------------------------------------    */
;*    Author      :  Erick Gallesio                                    */
;*    Creation    :  Thu Mar  2 11:12:55 2006                          */
;*    Last change :  Mon Feb 14 06:14:00 2005                          */
;*    Copyright   :  2006 Erick Gallesio                               */
;*    -------------------------------------------------------------    */
;*    HOP Demos                                                        */
;*=====================================================================*/

(define (htmlize obj)				;; FIXME. must be completely changed
  (cond
    ((null? obj) '())
    ((pair? obj) (cons (htmlize (car obj))
		       (htmlize (cdr obj))))
    ((string? obj) (pregexp-replace* ">"
				     (pregexp-replace* "<" obj "&lt;")
				     "&gt;"))
    (else (error 'htmlize "Cannot htmlize" obj))))


;; ----------------------------------------------------------------------
;;	module ...
;; ----------------------------------------------------------------------
;(module demos_demos)

(define *demos-directory*
   (make-file-name (hop-weblets-directory) "demos"))

(define *filter-initialized* #f)
(define *user-code* (make-hashtable))


;; ----------------------------------------------------------------------
;;	Utilities ...
;; ----------------------------------------------------------------------
(define (<DEMO-HEAD>)
  (<HEAD>
    (<HOP-HEAD> :jscript "hop-window.js" "hop-foldlist.js"
		:css "hop-window.css" "hop-foldlist.css")
    (<LINK> :rel "stylesheet"
	    :type "text/css"
	    :href (format "~a/demos.hss" *demos-directory*))))

(define (read-source-file file)
  (let ((in (open-input-file file)))
    (and (input-port? in)
	 (with-output-to-string
	   (lambda ()
	     (let Loop ((l (read-line in)))
	       (unless (eof-object? l)
		 (display l)
		 (newline)
		 (Loop (read-line in)))))))))

;; ----------------------------------------------------------------------
;;	demos-filter ...
;; ----------------------------------------------------------------------
(define-service (demos file)
  (<HTML>
   (<DEMO-HEAD>)
   (<FRAMESET> :cols "20%,*"  :frameborder 1 :border 4 :framespacing 0
      (<FRAME> :name "list" :src "demos/show-tree")
      (<FRAME> :name "code" :src "demos/initial-doc"))))


;; ----------------------------------------------------------------------
;;	demos/show-tree service ...
;; ----------------------------------------------------------------------
(define-service (demos/show-tree)
  (let ((lst (with-input-from-file (make-file-path (hop-demos-directory) "list.hop")
	       read)))
    (<HTML>
     (<HEAD>
      (<DEMO-HEAD>))
     (<H1> "Hop Demos")
     (<BODY>
      (<FL> :icono (make-file-path (hop-icons-directory) "folder-open.png")
	    :iconc (make-file-path (hop-icons-directory) "folder-close.png")
       (map (lambda (x)
	      (<FLITEM> :open #t
			(<FLHEAD> (<SPAN> :class "hop-demos-category"  (car x)))
		 (map (lambda (y)
			(<A> :class "hop-demos-link"
			     :href (make-service-url demos/show-demo
						     (car y) (cadr y))
			     :target "code"
			     (car y)))
		      (cdr x))))
	    lst))))))


;; ----------------------------------------------------------------------
;;	demos/initial-doc service ...
;; ----------------------------------------------------------------------
(define-service (demos/initial-doc)
  (<HTML>
   (<DEMO-HEAD>)
   (<BODY>
    (<H1> "Welcome on the Hop demos browser")
    (<P> "Choose a demo on the left part of the screen. For each demo, "
	 "you'll see on the right part of the screen:")
    (<UL> (<LI> "some explanations on the demo code, ")
	  (<LI> "the code of the demo"))
    (<P> "To change the code of a demo, use «Edit» button before launching"
	 "its execution with the «Run» button")
    (<TABLE> :width "98%"
       (<TR> (<TD> :align "right" (<HOP-FOOT-LOGO>)))))))


;; ----------------------------------------------------------------------
;;	demos/show-demo service ...
;; ----------------------------------------------------------------------
(define (show-documentation path)
  (let ((doc (open-input-file path)))
    (<DIV> :class "hop-demos-comment"
       (if (input-port? doc)
	   (let Loop ((txt (hop-read doc))
		      (res '()))
	     (if (eof-object? txt)
		 (map eval (reverse! res))
		 (Loop (hop-read doc)
		       (cons txt res))))
	   (<H2> "No documentation available for this demo")))))

(define (show-demo-code title path code)
  (<HTML>
   (<DEMO-HEAD>)
   (<BODY> :class "hop-demos-code"
      ;; Create the run window
      (<FLOAT-WINDOW> :id "hop-run-window" :width 640 :height 480
		      :in-frame #t :title (format "~a demo" (basename path)))
      ;; Create the edit window
      (<FLOAT-WINDOW> :id "hop-edit-window" :width 700 :height 400
		      :title " Edit code"
	(<FORM> :action (service (txt)
			  (show-demo-code title path txt))
	  (<BUTTON> :class "hop-demo-button" "Replace" :onclick "submit()")
	  (<BUTTON> :class "hop-demo-button" "Cancel"
		    :onclick { hop_close_float_window("hop-edit-window") })
	  (<TEXTAREA> :name "txt" :cols 80 :rows 25 code)))
      ;; Document
      (<H1> title)
      (show-documentation (make-file-path (dirname path) "comment.hop"))
      (<BUTTON> :class "hop-demo-button" "Run"
	:onclick { hop_open_float_window($(make-service-url demos/run path code),
					  "hop-run-window", 50, 50)})
      (<BUTTON> :class "hop-demo-button" "Edit"
		:onclick { hop_open_float_window(null, "hop-edit-window", 10, 25)})
      ;; Display the code
      (<DIV> :class "hop-demos-code"
	     (<PRE> (htmlize code))))))

(define-service (demos/show-demo title demo)
  (let* ((file (make-file-path (hop-demos-directory)
			       demo (string-append demo ".hop")))
	 (code (read-source-file file)))
    (show-demo-code title file code)))


;; ----------------------------------------------------------------------
;; 	demos/run service ...
;; ----------------------------------------------------------------------  
(define-service (demos/run path code)
  ;; First register the code associated to path in global hash-table
  (hashtable-put! *user-code* path code)
  ;; Return a scripts which loads the new code
  (<HTML>
   (<BODY>
    (<SCRIPT> :type "text/javascript"
       (format "location='http://~a:~a/~a'" (hostname) (hop-port) path)))))

;; ----------------------------------------------------------------------
;; 	demos/about service ...
;; ----------------------------------------------------------------------  
(define-service (demos/about)
  (<WEBLET-ABOUT> :title "demos"
		  :subtitle "Hop Demonstrations"
		  :icon (format "~a/demos.png" *demos-directory*)
		  :version (hop-version)
   (<P> [This weblet gives access to all the demos which are provided
	 with the Hop distribution.])
   (<P> [Enjoy])))


;; ----------------------------------------------------------------------
;; 	demo-filter ...
;; ----------------------------------------------------------------------
(define (demo-filter req)
  (define (run-customized-demo path code)
    (let ((port (open-input-string code))
	  (t    (current-thread)))
      (hop-load-afile (dirname path))
      (if (thread? t)
	  (thread-specific-set! t path)
	  (set! *the-loading-file* path))
      (let loop ((last #unspecified))
	(let ((sexp (hop-read port)))
	  (if (eof-object? sexp)
	      last
	      (loop (with-handler
		       (lambda (e)
			 (if (&warning? e)
			     (begin (warning-notify e) #unspecified)
			     (raise e)))
		       (eval sexp))))))))
 
  (with-access::http-request req (path host port localhostp)
     (if (and localhostp
	      (substring-at? path (hop-demos-directory) 0))
	 (let ((code (hashtable-get *user-code* path)))
	   (if  code
	       (let ((rep (run-customized-demo path code)))
		 (cond
		   ((%http-response? rep)
		    rep)
		   ((xml? rep)
		    (instantiate::http-response-hop
		     (content-type (mime-type path "text/html"))
		     (xml rep)))
		   (else
		    (http-warning "Demo code evaluation produced no result"))))
	       req))
	 req)))


;; ----------------------------------------------------------------------
;; 	Initialization ...
;; ----------------------------------------------------------------------
(unless *filter-initialized*
  (hop-filter-add! demo-filter)
  (set! *filter-initialized* #t))





