;*=====================================================================*/
;*    serrano/prgm/project/hop/2.2.x/weblets/shutdown/shutdown.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Thu Dec 16 07:37:07 2010 (serrano)                */
;*    Copyright   :  2005-10 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP server trace facility                                        */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module weblet_shutdown
   (export shutdown
	   shutdown/kill
	   shutdown/documentation
	   shutdown/preferences))

;*---------------------------------------------------------------------*/
;*    shutdown ...                                                     */
;*---------------------------------------------------------------------*/
(define-service (shutdown #!key exitval restart)
   (let ((req (current-request)))
      (if (or (authorized-service? req 'admin) (authorized-service? req 'shutdown))
	  (<SHUTDOWN> req exitval restart
		      (<SPAN> "Shutdown the serving HOP broker..."))
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    shutdown/kill ...                                                */
;*---------------------------------------------------------------------*/
(define-service (shutdown/kill #!key key exitval)
   (when (and (equal? key (hop-process-key)) (hop-accept-kill))
      (hop-verb 1 "shutdown/kill...\n")
      (exit exitval)))
       
;*---------------------------------------------------------------------*/
;*    <SHUTDOWN> ...                                                   */
;*---------------------------------------------------------------------*/
(define (<SHUTDOWN> req exitval restart msg)
   (<HTML>
      (<HEAD>
	 (<META> :name "viewport"
	    :content "width=device-width, initial-scale=1.")
	 :title "Hop Shutdown weblet"
	 :base (service-base-url shutdown req)
	 :include "hop-foot"
	 :css "shutdown.hss"
	 :favicon "etc/favicon.png")
      (<BODY> :id "body"
	 (<DIV> :align "center"
	    (<TABLE> :class "shutdown"
	       (<TR>
		  (<TD> (<IMG> :src "etc/logo.png"))
		  (<TD>
		     (<TABLE>
			(<TR>
			   (<TD>
			      (<DIV> :id "title"
				 "Hop Shutdown")))
			(<TR>
			   (<TD> msg))
			(<TR>
			   (<TD> :id "buttons" :align 'right
			      (<BUTTON> :onclick
				 ~(begin
				     (node-style-set! "shutdown" :color "black")
				     (set! document.location "/hop"))
				 "Cancel")
			      (<BUTTON> :id "shutdown" :onclick
				 ~(let ((but this))
				     (innerHTML-set!
				      $msg
				      (<SPAN> :class "warning"
					 "Shutting down in..."))
				     (let loop ((i 3))
					(if (>= i 1)
					    (let ((m (format "~as" i)))
					       (innerHTML-set! but m)
					       (node-style-set! but :color "red")
					       (after 1000
						      (lambda () (loop (- i 1)))))
					    (begin
					       (innerHTML-set! $msg "System down...")
					       (innerHTML-set! but "0s")
					       (with-hop ($(service ()
							      (let ((v (cond
									  ((integer? exitval)
									   exitval)
									  ((string? exitval)
									   (string->integer exitval))
									  (else
									   0))))
								 (hop-verb 1 "Hop shutdown, exit value: " v "\n")
								 (exit v))))
						  (lambda (_) #f)
						  (lambda (e)
						     (when $restart
							(innerHTML-set! $msg "Restarting...wait")
							(after 10000 (lambda ()
								       (set! location.href "/hop")))
							#f)))))))
				 "Shutdown"))))))))
	 (<FOOT>))))

;*---------------------------------------------------------------------*/
;*    shutdown-preferences ...                                         */
;*---------------------------------------------------------------------*/
(define-preferences shutdown-preferences
   ("printer" expr shutdown-print))
 
;*---------------------------------------------------------------------*/
;*    shutdown/documentation ...                                       */
;*---------------------------------------------------------------------*/
(define-service (shutdown/documentation)
   (let* ((file (service-resource shutdown/documentation "etc/shutdown.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    shutdown/preferences ...                                         */
;*---------------------------------------------------------------------*/
(define-service (shutdown/preferences)
   (shutdown-preferences-edit
    :onclick ~(with-hop ($(service ()
			     (shutdown-preferences-save shutdown-prefs))))))
