;*=====================================================================*/
;*    .../prgm/project/hop/2.0.x/weblets/webfilter/webfilter.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Sun Apr 19 07:53:13 2009 (serrano)                */
;*    Copyright   :  2005-09 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP webfilter weblet                                             */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module weblet_webfilter)

;*---------------------------------------------------------------------*/
;*    webfilter-dir ...                                                */
;*---------------------------------------------------------------------*/
(define webfilter-dir
   (make-file-name (hop-weblets-directory) "webfilter"))

(define webfilter-prefs
   (make-file-name (hop-rc-directory) "webfilter.prefs"))

;*---------------------------------------------------------------------*/
;*    Global parameters                                                */
;*---------------------------------------------------------------------*/
(define-parameter webfilter-http-header-filter #t)
(define-parameter webfilter-http-headers
   '((user-agent: . "Mozilla/5.0 (X11; U; Linux i686; rv:1.8.0.1) Gecko/20060124 Firefox/1.5.0.1")))

(define-parameter webfilter-blacklist #t)

(define-parameter webfilter-google-unbounce #t)

(define-parameter webfilter-flash-stop #f)
(define-parameter webfilter-flash-content-length #e200000)

(define-preferences webfilter-preferences
   ("Header filtering" (bool "enable" "disable") webfilter-http-header-filter)
   ("Header re-writting" quote webfilter-http-headers)
   ("Blacklisting" (bool "enable" "disable") webfilter-blacklist)
   ("Google unbouncing" (bool "enable" "disable") webfilter-google-unbounce)
   ("Flash stopping" (bool "enable" "disable") webfilter-flash-stop)
   ("Flash stop max length" integer webfilter-flash-content-length))

;*---------------------------------------------------------------------*/
;*    load webfilter config                                            */
;*---------------------------------------------------------------------*/
(when (file-exists? webfilter-prefs)
   (webfilter-preferences-load webfilter-prefs))

;*---------------------------------------------------------------------*/
;*    load-blacklist ...                                               */
;*---------------------------------------------------------------------*/
(define (load-blacklist t f)
   (when (file-exists? f)
      (hop-verb 2 "Loading domain blacklist `" f "'...\n")
      (with-input-from-file f
	 (lambda ()
	    (let loop ()
	       (let ((s (read-of-strings)))
		  (when (string? s)
		     (hashtable-put! t s #t)
		     (loop))))))))

;*---------------------------------------------------------------------*/
;*    domain-blacklist                                                 */
;*---------------------------------------------------------------------*/
(define *domain-blacklist*
   (let ((t (make-hashtable)))
      (load-blacklist t (make-file-name webfilter-dir "BLACKLIST"))
      (load-blacklist t (make-file-name (hop-rc-directory) "BLACKLIST"))
      t))

;*---------------------------------------------------------------------*/
;*    blacklist-domain! ...                                            */
;*---------------------------------------------------------------------*/
(define (blacklist-domain! domain)
   (hashtable-put! *domain-blacklist* domain #t))

;*---------------------------------------------------------------------*/
;*    <WEBFILTER:HTML> ...                                             */
;*---------------------------------------------------------------------*/
(define (<WEBFILTER:HTML> body)
   (<HTML>
      (<HEAD>
	 :favicon (service-resource webfilter "etc/favicon.png")
	 :title "Hop Webfilter"
	 :include "hop-notepad" "hop-sorttable" "hop-prefs"
	 :base (service-base-url webfilter (current-request))
	 :css "webfilter.hss")
      (<BODY>
	 (<DIV> :align "center"
	    (<TABLE> :class "webfilter"
	       (<TR>
		  (<TD>
		     (<IMG> :src "etc/logo.png"))
		  (<TD>
		     (<TABLE>
			(<TR>
			   (<TD>
			      (<DIV> :id "title" "Hop Web Filtering")))
			(<TR>
			   (<TD>
			      body)))))))
	 (<FOOT>))))
   
;*---------------------------------------------------------------------*/
;*    <HTTP-HEADERS-TABLE> ...                                         */
;*---------------------------------------------------------------------*/
(define (<HTTP-HEADERS-TABLE> id)
   
   (define (save-entry l key val)
      (cond
	 ((eq? l #unspecified)
	  (if (or (string=? val "") (string=? key ""))
	      #t
	      (let ((key (string->keyword (string-downcase key))))
		 (webfilter-http-headers-set!
		  (cons (cons key val) (webfilter-http-headers)))
		 (webfilter-preferences-save webfilter-prefs)
		 (<HTTP-HEADERS-TABLE> id))))
	 (else
	  (if (or (string=? val "") (string=? key ""))
	      (begin
		 (webfilter-http-headers-set!
		  (remq! l (webfilter-http-headers)))
		 (webfilter-preferences-save webfilter-prefs)
		 (<HTTP-HEADERS-TABLE> id))
	      (let ((key (string->keyword (string-downcase key))))
		 (set-car! l key)
		 (set-cdr! l val)
		 (webfilter-preferences-save webfilter-prefs)
		 (<HTTP-HEADERS-TABLE> id))))))
   
   (<DIV>
    ~(define (keypress el event id1 id2 save)
	(node-style-set! el :color "red")
	(if (= event.keyCode 13)
	    (let* ((el1 (dom-get-element-by-id id1))
		   (el2 (dom-get-element-by-id id2))
		   (key el1.value)
		   (val el2.value))
	       (node-style-set! el :color "blue")
	       (with-hop (save key val)
		  (lambda (t)
		     (innerHTML-set! $id t))))))
    (<TABLE>
       :class "http-headers"
       (<TR>
	  (<TH> "Key") (<TH> "Value"))
       (map (lambda (l)
	       (let ((key (if (eq? l #unspecified)
			      ""
			      (keyword->string (car l))))
		     (val (if (eq? l #unspecified)
			      ""
			      (cdr l)))
		     (id1 (xml-make-id))
		     (id2 (xml-make-id))
		     (save (service (key val) (save-entry l key val))))
		  (<TR>
		     (<TD>
			(<INPUT>
			   :id id1
			   :type "text"
			   :size 30
			   :value key
			   :onkeypress ~(keypress this event $id1 $id2 $save)))
		     (<TD>
			(<INPUT>
			   :id id2
			   :type "text"
			   :size 80
			   :value val
			   :onkeypress ~(keypress this event $id1 $id2 $save))))))
	    (append (sort (webfilter-http-headers)
			  (lambda (c1 c2)
			     (string-ci<? (keyword->string (car c1))
					  (keyword->string (car c2)))))
		    '(#unspecified))))))

;*---------------------------------------------------------------------*/
;*    <HTTP-HEADERS> ...                                               */
;*---------------------------------------------------------------------*/
(define (<HTTP-HEADERS>)
   (<TABLE>
      :class "webfilter-config"
      (<TR>
	 (<TH>
	    (<P> [This filter re-writes outgoing HTTP headers.])))
      (let ((txt (<SPAN>
		    :class (if (webfilter-http-header-filter)
			       "enable"
			       "disable")
		    "HTTP headers filtering")))
	 (<TR>
	    (<TH>
	       (<INPUT>
		  :type "checkbox"
		  :checked (webfilter-http-header-filter)
		  :onchange ~(begin
				(with-hop ($(service (val)
					       (webfilter-http-header-filter-set! val)
					       (webfilter-preferences-save webfilter-prefs))
					    this.checked))
				(set! $txt.className
				      (if this.checked "enable" "disable"))))
	       txt)))
      (<TR>
	 (let ((id "http-headers-table"))
	    (<TD> :id id (<HTTP-HEADERS-TABLE> id))))))

;*---------------------------------------------------------------------*/
;*    <BLACKLIST> ...                                                  */
;*---------------------------------------------------------------------*/
(define (<BLACKLIST>)
   (<TABLE>
      :class "webfilter-config"
      (<TR>
	 (<TH>
	    (<P> [This filter bans domains registered in black lists.])))
      (let ((txt (<SPAN>
		    :class (if (webfilter-blacklist) "enable" "disable")
		    "Black listing")))
	 (<TR>
	    (<TD>
	       (<INPUT>
		  :type "checkbox"
		  :checked (webfilter-blacklist)
		  :onchange ~(begin
				(with-hop ($(service (val)
					       (webfilter-blacklist-set! val)
					       (webfilter-preferences-save webfilter-prefs))
					    this.checked))
				(set! $txt.className
				      (if this.checked "enable" "disable"))))
	       txt)))))
   
;*---------------------------------------------------------------------*/
;*    <GOOGLE> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<GOOGLE>)
   (<TABLE>
      :class "webfilter-config"
      (<TR>
	 (<TH>
	    (<P> [This filter prevents Google bouncing.])
	    (<P> :class "readme"
		 [Google bouncing is a technique that enables Google to log
users requests selections. That is, when Google serves a request, instead
of returning a list of found URLs, it returns a list of URLs pointing to
Google, each containing a forward pointer to the actual URL.])))
      (let ((txt (<SPAN>
		    :class (if (webfilter-google-unbounce) "enable" "disable")
		    "Google unbounce")))
	 (<TR>
	    (<TD>
	       (<INPUT>
		  :type "checkbox"
		  :checked (webfilter-google-unbounce)
		  :onchange ~(begin
				(with-hop ($(service (val)
					       (webfilter-google-unbounce-set! val)
					       (webfilter-preferences-save webfilter-prefs)))
				   this.checked)
				(set! $txt.className
				      (if this.checked "enable" "disable"))))
	       txt)))))
   
;*---------------------------------------------------------------------*/
;*    <FLASH> ...                                                      */
;*---------------------------------------------------------------------*/
(define (<FLASH>)
   (<TABLE>
      :class "webfilter-config"
      (<TR>
	 (<TH>
	    (<P> [This filter change the default ,(<TT> "play") attribute
		       to Flash script to ,(<TT> "false").])
	    (<P> :class "readme"
		 [This filter prevents annoying Flash scripts to be started
		       automatically when the page is loaded.])))
      (let ((txt1 (<SPAN>
		    :class (if (webfilter-flash-stop) "enable" "disable")
		    "Flash stop"))
	    (txt2 (<SPAN>
		    :class (if (webfilter-flash-stop) "enable" "disable")
		    "Max content length")))
	 (<TR>
	    (<TD>
	       (<INPUT>
		  :type "checkbox"
		  :checked (webfilter-flash-stop)
		  :onchange ~(begin
				(with-hop ($(service (val)
					       (webfilter-flash-stop-set! val)
					       (webfilter-preferences-save webfilter-prefs)))
				   this.checked)
				(set! $txt1.className
				      (if this.checked "enable" "disable"))))
	       txt1
	       "&#160;&#160;"
	       (<INPUT>
		  :type "text"
		  :size 6
		  :value (webfilter-flash-content-length)
		  :onchange ~(begin
				(with-hop ($(service (val)
					       (webfilter-flash-content-length-set!
						(string->elong val))
					       (webfilter-preferences-save webfilter-prefs))
					    this.checked))
				(set! $txt2.className
				      (if this.checked "enable" "disable"))))
	       txt2)))))
   
;*---------------------------------------------------------------------*/
;*    webfilter ...                                                    */
;*    -------------------------------------------------------------    */
;*    WEBFILTER falls into the admin tools, hence, in addition to be   */
;*    granted the right to execute WEBFILTER, the ADMIN right must be  */
;*    granted for executing it.                                        */
;*---------------------------------------------------------------------*/
(define-service (webfilter)
   (let ((req (current-request)))
      (if (authorized-service? req 'admin)
	  (<WEBFILTER:HTML>
	     (<DIV>
		(<NOTEPAD>
		   (<NPHEAD> "")
		   (<NPTAB>
		      (<NPTABHEAD> "Headers")
		      (<HTTP-HEADERS>))
		   (<NPTAB>
		      (<NPTABHEAD> "Blacklist")
		      (<BLACKLIST>))
		   (<NPTAB>
		      (<NPTABHEAD> "Google")
		      (<GOOGLE>))
		   (<NPTAB>
		      (<NPTABHEAD> "Flash")
		      (<FLASH>)))))
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    webfilter/documentation ...                                      */
;*---------------------------------------------------------------------*/
(define-service (webfilter/documentation)
   (let* ((file (service-resource webfilter/documentation "etc/webfilter.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    http-headers-rewrite ...                                         */
;*---------------------------------------------------------------------*/
(define (http-headers-rewrite resp)
   (with-access::%http-response resp (header)
      (for-each (lambda (h)
		   (when (and (pair? h) (string? (car h)))
		      (let* ((v (string->keyword
				 (string-downcase!
				  (keyword->string (car h)))))
			     (c (assq v (webfilter-http-headers))))
			 (when (pair? c)
			    (set-cdr! h (cdr c))))))
		header))
   resp)

;*---------------------------------------------------------------------*/
;*    blacklist ...                                                    */
;*---------------------------------------------------------------------*/
(define (blacklist req)
   (when (webfilter-blacklist)
      (with-access::http-request req (host port path header)
	 (when (hashtable-get *domain-blacklist*  host)
	    (hop-verb 2 (hop-color req req " BLACKLISTED") ": " host ":" port path "\n")
	    (hop-verb 3 " header: " header "\n")
	    (instantiate::http-response-string
	       (start-line "HTTP/1.0 404 Not Found"))))))

;*---------------------------------------------------------------------*/
;*    google ...                                                       */
;*---------------------------------------------------------------------*/
(define (google req)
   (when (webfilter-google-unbounce)
      (with-access::http-request req (host path)
	 (when (and (string=? host "www.google.com")
		    (substring-at? path "/url" 0))
	    (let ((q (cgi-fetch-arg "q" path)))
	       (when q
		  (instantiate::http-response-string
		     (start-line "HTTP/1.0 301 Moved Permanently")
		     (header (list (cons 'location: q))))))))))

;*---------------------------------------------------------------------*/
;*    flash ...                                                        */
;*---------------------------------------------------------------------*/
(define (flash req resp)
   (define flash-grammar
      (regular-grammar (op)
	 ((uncase "<embed ")
	  (display "<param name='PLAY' value='false'><embed play='false' " op)
	  (ignore))
	 ((+ (out #\space))
	  (display (the-string) op)
	  (ignore))
	 ((+ #\space)
	  (display (the-string) op)
	  (ignore))
	 (else
	  (flush-output-port op))))
   (when (webfilter-flash-stop)
      (instantiate::http-response-filter
	 (response resp)
	 (headerf (lambda (header)
		     (let ((c (assq content-encoding: header)))
			(if (equal? c '(content-encoding: . "gzip"))
			    (delete c header)
			    header))))
	 (bodyf (lambda (ip op status header cl)
		   (if (< cl (webfilter-flash-content-length))
		       (let ((c (assq content-encoding: header)))
			  (if (equal? c '(content-encoding: . "gzip"))
			      (let ((ipz (open-input-gzip-port ip)))
				 (unless (= cl #e-1)
				    (let ((barrier (elong->fixnum cl)))
				       (input-port-fill-barrier-set! ip barrier)))
				 (unwind-protect
				    (read/rp flash-grammar ipz op)
				    (close-input-port ipz))
				 (flush-output-port op))
			      (begin
				 (unless (= cl #e-1)
				    (let ((barrier (elong->fixnum cl)))
				       (input-port-fill-barrier-set! ip barrier)))
				 (read/rp flash-grammar ip op))))
		       (begin
			  (send-chars ip op cl)
			  (flush-output-port op))))))))

;*---------------------------------------------------------------------*/
;*    Remote hook                                                      */
;*---------------------------------------------------------------------*/
(hop-http-response-remote-hook-add!
 (lambda (req resp)
    (or (blacklist req)
	(google req)
	(let ((resp2 (http-headers-rewrite resp)))
	   (or (flash req resp2)
	       resp2)))))

;*---------------------------------------------------------------------*/
;*    webfilter/preferences ...                                        */
;*---------------------------------------------------------------------*/
(define-service (webfilter/preferences)
   (let ((req (current-request)))
      (if (not (user-authorized-service? (http-request-user req) 'admin))
	  (user-access-denied req)
	  (<WEBFILTER:HTML>
	     (<PREFERENCES>)))))

;*---------------------------------------------------------------------*/
;*    <PREFERENCES> ...                                                */
;*---------------------------------------------------------------------*/
(define (<PREFERENCES>)
   (<DIV>
      (<BUTTON> :title "Save configuration (needs admin privileges)"
	 :onclick ~(preferences-save "webfilter-configure" $webfilter-prefs)
	 "Save configuration")
      (webfilter-preferences-edit :id "webfilter-configure")))

;*---------------------------------------------------------------------*/
;*    The user configuration                                           */
;*---------------------------------------------------------------------*/
(hop-load-rc "webfilterrc.hop")

