;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/webconf/webconf.hop             */
;*    -------------------------------------------------------------    */
;*    Author      :  Erick Gallesio                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Tue Mar  7 22:25:53 2006 (eg)                     */
;*    Copyright   :  2006 Erick Gallesio                               */
;*    -------------------------------------------------------------    */
;*    HOP Weblet configuration                                         */
;*=====================================================================*/

;; ----------------------------------------------------------------------
;;	module ...
;; ----------------------------------------------------------------------
;;(module weblet_configuration)
;; (export webconf-make-window)

;; ----------------------------------------------------------------------
;;	*webconf-directory* ...
;; ----------------------------------------------------------------------
(define *webconf-directory*
   (make-file-name (hop-weblets-directory) "webconf"))

;; ----------------------------------------------------------------------
;;	webconf-filter ...
;; ----------------------------------------------------------------------
(define-service (webconf)
   (<HTML>
      (<HEAD>
	 (<HOP-HEAD> :jscript "hop-folditem.js" "hop-window.js"
		     :css "hop-folditem.css" "hop-window.css")
	 (<LINK> :rel "stylesheet"
		 :type "text/css"
		 :href (format "~a/webconf.hss" *webconf-directory*)))
      (<BODY>
         (<H1> "Weblets Configuration")
	 ;; Create the About and Configuration windows (not displayed yet) 
	 (<FLOAT-WINDOW> :title "About ..." :id "hop-webconf-aboutwin")
	 (<FLOAT-WINDOW> :title "Configure ..." :id "hop-webconf-confwin"
		       :in-frame #t)

	 ;; Display all the weblets
	 (map (lambda (dir)
		(<DIV> :class "webconf-dir"
		   (<P> (<B> "Directory: ") (<CODE> dir))
		   (<DIV> :class "webconf-items"
		     (<FL> 
		       (map (lambda (x)
			      (let ((weblet-name (cadr (assoc 'name x))))
				(<FLITEM>
				    (<FLHEAD> (<SPAN> :class "webconf-item"
						      weblet-name))
				    (show-weblet-config x))))
			  (find-weblets dir))))))
	      (hop-autoload-directories)))))

;; ----------------------------------------------------------------------
;;	webconf/activate service ...
;; ----------------------------------------------------------------------
(define-service (webconf/activate wl value)
  (let* ((conf (get-weblet-config wl))
	 (v    (assoc 'active conf)))
    (if v
	(set-car! (cdr v) value)
	(set! conf (list (list 'active value))))

    ;; Write conf in the config file
    (let ((confdir (weblets-config-directory)))
      (unless (file-exists? confdir)
	(make-directories confdir))
      (with-output-to-file (make-file-path confdir (string-append wl ".conf"))
	(lambda ()
	  (printf ";; -*- scheme -*- generated file on ~A\n(\n" (date))
	  (for-each (lambda (x) (printf "  ~A\n" x)) conf)
	  (display ")\n"))))))


;; ----------------------------------------------------------------------
;; 	show-weblet-config ...
;; ----------------------------------------------------------------------
(define (show-weblet-config infos)

  (define (about-button name about)
    (let ((serv (string-append (hop-service-base) "/" name "/" about)))
      (<BUTTON> "About"
	 :onclick { hop_open_float_window($serv, "hop-webconf-aboutwin", 50, 50)})))
  
  (define (config-button name config)
    (let ((serv (if (string=? config "")
		    (string-append (hop-service-base) "/" name)
		    (string-append (hop-service-base) "/" name "/" config))))
      (<BUTTON> "Configure"
	 :onclick { hop_open_float_window($serv, "hop-webconf-confwin", 100, 100)})))
  ;;
  ;; show-weblet-config
  ;;
  (let* ((get    (lambda (prop)
		   (let ((val (assoc prop infos)))
		     (and val (cadr val)))))
	 (name    (get 'name))
	 (version (get 'version))
	 (loc     (get 'weblet))
	 (desc    (get 'description))
	 (author  (get 'author))
	 (about   (get 'about-service))
	 (config  (get 'config-service))
	 (active  (get 'active)))
    (<DIV> :class "webconf-infos"
       ;; title
       (<H1> (or desc name))
       ;; Infos + Config
       (<TABLE> :width "100%" :justify "center"
	  ;; Informations on the widget
	  (if author
	      (<TR> (<TH> "Author: ") (<TD> author)))
	  (if version
	      (<TR> (<TH> "Version: ") (<TD> version)))
	  (<TR> (<TH> "Location: ") (<TD> loc))
	  (<TR> :height "10px")
	  ;; Widget activation
	  (<TR> (<TH> "Active: ")
		(<TD> "Yes "
		      (<INPUT> :type 'radio :name name :checked (and active)
			       :onclick {hop( $webconf/activate( $name, true ),
					      false )})
		      " No "
		      (<INPUT> :type 'radio :name name :checked (not active)
			       :onclick {hop( $webconf/activate( $name, false ),
					      false )}))))
       (if about  (about-button name about))
       (if config (config-button name config)))))

;; ----------------------------------------------------------------------
;; 	webconf-about ...
;; ----------------------------------------------------------------------  
(define-service (webconf/about)
  (<WEBLET-ABOUT> :title "webconf"
		  :subtitle "Hop weblets configuration tool"
		  :icon (format "~a/configure.png" *webconf-directory*)
		  :version (hop-version)
   (<P> [This weblet can be used to configure the installed widgets.])))
  
