;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/webconf/webconf.hop             */
;*    -------------------------------------------------------------    */
;*    Author      :  Erick Gallesio                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Tue Feb 28 14:08:08 2006 (eg)                     */
;*    Copyright   :  2006 Erick Gallesio                               */
;*    -------------------------------------------------------------    */
;*    HOP Weblet configuration                                         */
;*=====================================================================*/


;; ----------------------------------------------------------------------
;;	module ...
;; ----------------------------------------------------------------------
;;(module weblet_configuration)
;; (export webconf-make-window)

;; ----------------------------------------------------------------------
;;	*webconf-directory* ...
;; ----------------------------------------------------------------------
(define *webconf-directory*
   (make-file-name (hop-weblets-directory) "webconf"))

;; ----------------------------------------------------------------------
;;	webconf-filter ...
;; ----------------------------------------------------------------------
(define-service (webconf)
   (<HTML>
      (<HEAD>
	 (<HOP-HEAD>)
	 (<LINK> :rel "stylesheet"
		 :type "text/css"
		 :href (format "~a/webconf.hss" *webconf-directory*))
      	 (<SCRIPT> :type "text/javascript"
		   :src (format "~a/webconf.js" *webconf-directory*)))
      (<BODY>
         (<H1> "Weblets Configuration")
	 ;; Create the About and Configuration windows (not displayed yet) 
	 (<HOP-WINDOW> :title "About ..." :id "hop-webconf-aboutwin")
	 (<HOP-WINDOW> :title "Configure ..." :id "hop-webconf-confwin"
		       :in-frame #t)
	 ;; Display all the weblets
	 (map (lambda (dir)
		(<DIV> :class "webconf-dir"
		   (<P> (<B> "Directory: ") (<CODE> dir))
		   (<UL> 
		    (map (lambda (x)
			   (let ((id (symbol->string (gensym "wc")))
				 (wl (cadr (assoc 'name x))))
			     (<LI> (<A> :href "#" :class "webconf-link"
					:onclick { hop_webconf_toggle($id) }
					wl)
				   (<DIV> :id id
					  :style "display:none"
					  (show-weblet-config x)))))
			 (find-weblets dir)))))
	      (hop-autoload-directories)))))

;; ----------------------------------------------------------------------
;;	webconf/activate service ...
;; ----------------------------------------------------------------------
(define-service (webconf/activate wl value)
  (let* ((conf (get-weblet-config wl))
	 (v    (assoc 'active conf)))
    (if v
	(set-car! (cdr v) value)
	(set! conf (list (list 'active value))))

    ;; Write conf in the config file
    (let ((confdir (weblets-config-directory)))
      (unless (file-exists? confdir)
	(make-directories confdir))
      (with-output-to-file (make-file-path confdir (string-append wl ".conf"))
	(lambda ()
	  (printf ";; -*- scheme -*- generated file on ~A\n(\n" (date))
	  (for-each (lambda (x) (printf "  ~A\n" x)) conf)
	  (display ")\n"))))))


;; ----------------------------------------------------------------------
;; 	show-weblet-config ...
;; ----------------------------------------------------------------------
(define (show-weblet-config infos)

  (define (about-button name about)
    (let ((serv (string-append "/hop/" name "/" about)))
      (<BUTTON> "About"
	 :onclick { hop_open_float_window($serv, "hop-webconf-aboutwin", 50, 50)})))
  
  (define (config-button name config)
    (let ((serv (if (string=? config "")
		    (string-append "/hop/" name)
		    (string-append "/hop/" name "/" config))))
      (<BUTTON> "Configure"
	 :onclick { hop_open_float_window($serv, "hop-webconf-confwin", 100, 100)})))
  ;;
  ;; show-weblet-config
  ;;
  (let* ((get    (lambda (prop)
		   (let ((val (assoc prop infos)))
		     (and val (cadr val)))))
	 (name    (get 'name))
	 (version (get 'version))
	 (loc     (get 'weblet))
	 (desc    (get 'description))
	 (author  (get 'author))
	 (about   (get 'about-service))
	 (config  (get 'config-service))
	 (active  (get 'active)))
    (<DIV> :class "webconf-infos"
       ;; title
       (<H1> (or desc name))
       ;; Infos + Config
       (<TABLE> :width "100%" :justify "center"
	  ;; Informations on the widget
	  (if author
	      (<TR> (<TH> "Author: ") (<TD> author)))
	  (if version
	      (<TR> (<TH> "Version: ") (<TD> version)))
	  (<TR> (<TH> "Location: ") (<TD> loc))
	  (<TR> :height "10px")
	  ;; Widget activation
	  (<TR> (<TH> "Active: ")
		(<TD> "Yes "
		      (<INPUT> :type 'radio :name name :checked (and active)
			       :onclick {hop( $webconf/activate( $name, true ),
					      false )})
		      " No "
		      (<INPUT> :type 'radio :name name :checked (not active)
			       :onclick {hop( $webconf/activate( $name, false ),
					      false )}))))
       (if about  (about-button name about))
       (if config (config-button name config)))))
  
;*---------------------------------------------------------------------*/
;*    webconf about ...                                                */
;*---------------------------------------------------------------------*/
(define-service (webconf/about)
  (<WEBLET-ABOUT> :title "webconf"
		  :subtitle "Hop weblets configuration tool"
		  :icon (format "~a/configure.png" *webconf-directory*)
		  :version (hop-version)
   (<P> [This weblet can be used to configure the installed widgets.])))
  

;*---------------------------------------------------------------------*/
;*    <HOP-WINDOW> ...                                                 */
;*---------------------------------------------------------------------*/
(define-xml-compound HOP-WINDOW ((id #unspecified string)
				 (class #f)
				 (title "")
				 (width #f)
				 (height #f)
				 (visible #f)
				 (in-frame #f)
				 body)
  (define (<TD-BORDER> img)
    (<TD> :width 8 :height 8
	  (if img (<IMG> :src (format "~A/~A"(hop-icons-directory) img)) "")))
  
  (define (<TD-EAST> img)
    (<TD> :width 8
	  :style (format "background-image:url(~a/~a);background-repeat:repeat-y"
			 (hop-icons-directory) img)))
  
  (define (<TD-SOUTH> img)
    (<TD> :height 8 :width "100%"
	  :style (format "background-image:url(~a/~a);background-repeat:repeat-x"
			 (hop-icons-directory) img)))
  
  (let* ((id         (xml-make-id id 'HOP-WINDOW))
	 (cls        (or class "hop-float-window"))
	 (handle-id  (string-append id "-handle"))
	 (content-id (string-append id "-content")))
    (list 
      (<DIV> :id id :class cls
	     :style (string-append
		        (if width  (format "width: ~A; " width) "")
			(if height (format "height: ~A; " height) "")
			(format "display:~a" (if visible "block" "none")))
	(<TABLE> :width "100%" :height "100%" :cellpadding 0 :cellspacing 0
		 :border 0 :rules "none"
	 (<TR>	; Line #1
	  (<TD> :colspan 3 :rowspan 3 :valign "top"
	    (<TABLE> :class "hop-float-handle" :id handle-id :width "100%"
		     :cellpadding 0 :cellspacing 0 :border 0 :rules "none"
	      (<TR>
	       (<TD> :class "hop-float-title" :width "100%" title)
	       (<TD> :class "hop-float-close-button"
		     (<A> (<B> "X") :onclick {hop_close_float_window($id)}))))
	    (<DIV> :class "hop-float-content" :id content-id body))
	  (<TD-BORDER> #f))

	 (<TR>	; Line #2
	  (<TD-BORDER> "shadow-ne.png"))

	 (<TR>	; Line #3
	  (<TD-EAST> "shadow-e.png"))

	 (<TR>	; Line #4
	  (<TD-BORDER> #f) (<TD-BORDER> "shadow-sw.png")
	  (<TD-SOUTH> "shadow-s.png") (<TD-BORDER> "shadow-se.png"))))
      (<SCRIPT> :type "text/javascript"
		{ hop_float_window_init($id, $in-frame)}))))
