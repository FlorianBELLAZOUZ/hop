;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/bbdb/bbdb.hop                   */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Tue Jan 24 17:51:32 2006 (serrano)                */
;*    Copyright   :  2005-06 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP bbdb script                                                  */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module webet_bbdb)

;*---------------------------------------------------------------------*/
;*    bbdb-directory ...                                               */
;*---------------------------------------------------------------------*/
(define bbdb-directory
   (make-file-name (hop-weblets-directory) "bbdb"))

;*---------------------------------------------------------------------*/
;*    bbdb filter ...                                                  */
;*---------------------------------------------------------------------*/
(define-weblet (bbdb)
   (let ((req (the-current-request)))
      (multiple-value-bind (db match name fname emails)
	 (bbdb-cookie-config req)
	 (instantiate::http-response-hop
	    (xml (<HTML>
		  (<HEAD>
		   (<HOP-HEAD>)
		   (<LINK> :rel "stylesheet"
			   :type "text/css"
			   :href (format "~a/bbdb.css" bbdb-directory))
		   (<SCRIPT> :type "text/javascript"
			     :src (format "~a/bbdb.js" bbdb-directory)))
		  (<BODY> :class "bbdb"
			  (<BBDB-CONFIG> req db "" name fname emails match))))))))

;*---------------------------------------------------------------------*/
;*    bbdb-install-directory ...                                       */
;*---------------------------------------------------------------------*/
(define bbdb-install-directory
   (let ((dir (make-file-name (hop-weblets-directory) "bbdb")))
      (lambda ()
	 dir)))

;*---------------------------------------------------------------------*/
;*    bbdb-mutex ...                                                   */
;*---------------------------------------------------------------------*/
(define bbdb-mutex (make-mutex "bbdb"))
   
;*---------------------------------------------------------------------*/
;*    bbdb-db-file ...                                                 */
;*---------------------------------------------------------------------*/
(define bbdb-db-file (make-file-name (getenv "HOME") ".bbdb"))

;*---------------------------------------------------------------------*/
;*    bbdb-db ...                                                      */
;*---------------------------------------------------------------------*/
(define bbdb-db '())

;*---------------------------------------------------------------------*/
;*    bbdb-record ...                                                  */
;*---------------------------------------------------------------------*/
(define-struct bbdb-record name firstname emails phones addresses url)

;*---------------------------------------------------------------------*/
;*    <BBDB-CONFIG> ...                                                */
;*---------------------------------------------------------------------*/
(define (<BBDB-CONFIG> req file string name firstname emails match)
   (define (search)
      (<TABLE>
       :class "search"
       (<TR>
	(<TH> "Search string")
	(<TD> (<INPUT>
	       :id "search"
	       :type 'text
	       :name "bbdb-search"
	       :value string
	       :size 50
	       :onkeypress {if(event.keyCode == 13)
			      hop( $bbdb/search(this.value),
				   hop_replace_document )}))
	(<TH> "Data base")
	(<TD> (<INPUT>
	       :id "bbdb-db"
	       :type 'text
	       :name "bbdb-db"
	       :value file
	       :size 40
	       :onchange {hop( $bbdb/config( "db", this.value ) )})))))
   (define (config-match)
      (<TABLE>
       (<TR>
	(<TH> "search mode: ")
	(<TD> (<INPUT>
	       :type 'radio
	       :name "match"
	       :value "exact"
	       :checked (eq? match 'exact)
	       :onclick {hop( $bbdb/config( this.name, this.value ) )}))
	(<TD> "exact")
	(<TD> (<INPUT>
	       :type 'radio
	       :name "match"
	       :value "prefix"
	       :checked (eq? match 'prefix)
	       :onclick {hop( $bbdb/config( this.name, this.value ) )}))
	(<TD> "prefix")
	(<TD> (<INPUT>
	       :type 'radio
	       :name "match"
	       :value "suffix"
	       :checked (eq? match 'suffix)
	       :onclick {hop( $bbdb/config( this.name, this.value ) )}))
	(<TD> "suffix")
	(<TD> (<INPUT>
	       :type 'radio
	       :name "match"
	       :value "member"
	       :checked (eq? match 'member)
	       :onclick {hop( $bbdb/config( this.name, this.value ) )}))
	(<TD> "member"))))
   (define (config-fields)
      (<TABLE>
       (<TR>
	(<TH> "search fields: ")
	(<TD> (<INPUT>
	       :type 'checkbox
	       :class "glop"
	       :name "name"
	       :value "name"
	       :checked (eq? name 'true)
	       :onclick {hop( $bbdb/config( this.value,
					    this.checked ?
					    "true" : "false" ) )}))
	(<TD> :class "glop" "name")
	(<TD> (<INPUT>
	       :type 'checkbox
	       :name "firstname"
	       :value "firstname"
	       :checked (eq? firstname 'true)
	       :onclick {hop( $bbdb/config( this.value,
					    this.checked ?
					    "true" : "false" ) )}))
	(<TD> "firstname")
	(<TD> (<INPUT>
	       :type 'checkbox
	       :name "emails"
	       :value "emails"
	       :checked (eq? emails 'true)
	       :onclick {hop( $bbdb/config( this.value,
					    this.checked ?
					    "true" : "false" ) )}))
	(<TD> "emails"))))
   (define (config)
      (<TABLE>
       :class "config"
       ;; search mode
       (<TR> (<TD> :align "left" (config-match))
	     (<TD> :align "right" (config-fields)))))
   (with-access::http-request req (path user)
      (<DIV>
       :class "config"
       (<FORM>
	:method 'put
	:action path
	(<TABLE>
	 (<TR> (<TD> :valign "top" (search)))
	 (<TR> (<TD> :valign "top" (config))))))))

;*---------------------------------------------------------------------*/
;*    bbdb-cookie-config ...                                           */
;*---------------------------------------------------------------------*/
(define (bbdb-cookie-config req)
   (define (cookie->exp req)
      (let ((cookie (http-cookie-get req "bbdb" #f #f)))
	 (if (string? cookie)
	     (let ((p (open-input-string (escape-string cookie))))
		(let ((l (read p)))
		   (close-input-port p)
		   l))
	     #unspecified)))
   (define (plist-assq k l)
      (and (pair? l)
	   (let ((r (memq k l)))
	      (and (pair? r) (pair? (cdr r)) (cadr r)))))
   (let ((l (cookie->exp req)))
      (values (or (plist-assq :db l) bbdb-db-file)
	      (or (plist-assq :match l) 'member)
	      (or (plist-assq :name l) 'true)
	      (or (plist-assq :firstname l) 'true)
	      (or (plist-assq :emails l) 'false))))
   
;*---------------------------------------------------------------------*/
;*    bbdb-config ...                                                  */
;*---------------------------------------------------------------------*/
(define-service (bbdb/config prop val)
   (multiple-value-bind (db match name fname emails)
      (bbdb-cookie-config (the-current-request))
      (cond
	 ((string=? prop "db")
	  (set! db val))
	 ((string=? prop "match")
	  (set! match (string->symbol val)))
	 ((string=? prop "name")
	  (set! name (string->symbol val)))
	 ((string=? prop "firstname")
	  (set! fname (string->symbol val)))
	 ((string=? prop "emails")
	  (set! emails (string->symbol val))))
      (let ((cookie (cons Set-Cookie: 
			  (format "bbdb=\"(:db \\\"~a\\\" :match ~a :name ~a :firstname ~a :emails ~a)\"; path=/;"
				  db match name fname emails))))
	 (load-db! db)
	 ;; acknowledge with the cookie
	 (instantiate::http-response-string
	    (header (list cookie))))))

;*---------------------------------------------------------------------*/
;*    bbdb-parse-record ...                                            */
;*---------------------------------------------------------------------*/
(define (bbdb-parse-record rec)
   (define (flat as)
      (cond
	 ((null? as)
	  as)
	 ((string? as)
	  as)
	 ((pair? (car as))
	  (flat (append (car as) (cdr as))))
	 (else
	  (cons (car as) (flat (cdr as))))))
   (match-case rec
      (((and ?fn (? string?)) (and ?n (? string?)) ?- ?- ?ps ?as ?es . ?opts)
       (bbdb-record (and (>fx (string-length n) 0) (string-downcase n))
		    (and (>fx (string-length fn) 0) (string-downcase fn))
		    (if (eq? es 'nil) '() (map string-downcase es))
		    (if (eq? ps 'nil) '() ps)
		    (if (eq? as 'nil) '() (map flat as))
		    (let ((c (and (pair? opts)
				  (pair? (car opts))
				  (assq 'url (car opts)))))
		       (if c (cdr c) #f))))
      (else
       #f)))
	  
;*---------------------------------------------------------------------*/
;*    bbdb-read-db ...                                                 */
;*---------------------------------------------------------------------*/
(define (bbdb-read-db file)
   (if (not (file-exists? file))
       (http-file-not-found file)
       (let ((bbdb '()))
	  (with-input-from-file file
	     (lambda ()
		(for-each (lambda (r)
			     (let ((br (bbdb-parse-record r)))
				(if (bbdb-record? br)
				    (set! bbdb (cons br bbdb)))))
			  (read))))
	  bbdb)))

;*---------------------------------------------------------------------*/
;*    load-db! ...                                                     */
;*---------------------------------------------------------------------*/
(define (load-db! db)
   (when (or (not (pair? bbdb-db)) (not (string=? bbdb-db-file db)))
      (mutex-lock! bbdb-mutex)
      (set! bbdb-db-file db)
      (set! bbdb-db (bbdb-read-db bbdb-db-file))
      (mutex-unlock! bbdb-mutex))
   bbdb-db)
   
;*---------------------------------------------------------------------*/
;*    bbdb-match-string ...                                            */
;*---------------------------------------------------------------------*/
(define (bbdb-match-string method)
   (case method
      ((exact)
       string=?)
      ((prefix)
       (lambda (s1 s2)
	  (let ((l1 (string-length s1))
		(l2 (string-length s2)))
	     (and (>fx l1 l2)
		  (substring-at? s1 s2 0)))))
      ((suffix)
       (lambda (s1 s2)
	  (let ((l1 (string-length s1))
		(l2 (string-length s2)))
	     (and (>fx l1 l2)
		  (substring-at? s1 s2 (-fx l1 l2))))))
      (else
       string-member?)))
		    
;*---------------------------------------------------------------------*/
;*    bbdb-search-records ...                                          */
;*---------------------------------------------------------------------*/
(define (bbdb-search-records bbdb match string n? f? e?)
   (filter (lambda (br)
	      (let* ((firstname (bbdb-record-firstname br))
		     (name (bbdb-record-name br))
		     (emails (bbdb-record-emails br)))
		 (or (and n? (string? name) (match name string))
		     (and f? (string? firstname) (match firstname string))
		     (and e? (any? (lambda (s) (match s string)) emails)))))
	   bbdb))

;*---------------------------------------------------------------------*/
;*    <BBDB-RECORD> ...                                                */
;*---------------------------------------------------------------------*/
(define (<BBDB-RECORD> rec)
   (define (<ROW> key val)
      (<TR> (<TD> :align "right" :valign "top" (<SPAN> :class "key" key))
	    (<TD> :align "left" (<SPAN> :class key val))))
   (define (<PHONES> ps)
      (if (pair? ps)
	  (<TABLE> :cellspacing 0 :cellpadding 0
	   (map (lambda (p)
		   (<TR> (<TD> (car p))
			 (<TD> (<SPAN> :class "phone" (cadr p)))))
		ps))
	  ""))
   (define (<ADDRESSES> as)
      (if (pair? as)
	  (<TABLE> :cellspacing 0 :cellpadding 0
		   (map (lambda (a)
			   (<TR> (<TD> (<SPAN> :class "location" (car a)))
				 (map (lambda (e)
					 (<TR>
					  (<TD>
					   (<SPAN> :class "address" e))))
				      (cdr a))))
			as))
	  ""))
   (<DIV> :class "bbdb"
	  (<TABLE>
	   (<ROW> "name" (bbdb-record-name rec))
	   (<ROW> "firstname" (bbdb-record-firstname rec))
	   (let ((url (bbdb-record-url rec)))
	      (if url
		  (<ROW> "url" (<A> :href url url))
		  #f))
	   (let ((emails (bbdb-record-emails rec)))
	      (if (pair? emails)
		  (<ROW> "emails" (<TABLE>
				   (map (lambda (email)
					   (<TR>
					    (<TD>
					     (<A> :class "hopmailto"
						  :href (string-append
							 "mailto:" email)
						  email))))
					emails)))
		  #f))
	   (let ((phones (bbdb-record-phones rec)))
	      (if (pair? phones)
		  (<ROW> "phones" (<PHONES> phones))
		  #f))
	   (let ((addresses (bbdb-record-addresses rec)))
	      (if (pair? addresses)
		  (<ROW> "addresses" (<ADDRESSES> addresses))
		  #f)))))

;*---------------------------------------------------------------------*/
;*    bbdb-search ...                                                  */
;*---------------------------------------------------------------------*/
(define-service (bbdb/search string)
   (let ((req (the-current-request)))
      (multiple-value-bind (db ma name fname emails)
	 (bbdb-cookie-config req)
	 (let* ((bbdb (load-db! db))
		(es (bbdb-search-records bbdb
					 (bbdb-match-string ma)
					 string
					 (eq? name 'true)
					 (eq? fname 'true)
					 (eq? emails 'true))))
	    (instantiate::http-response-hop
	       (xml (<HTML>
		     (<HEAD>
		      (<HOP-HEAD>)
		      (<LINK> :rel "stylesheet"
			      :type "text/css"
			      :href (format "~a/bbdb.css"
					    bbdb-directory))
		      (<SCRIPT> :type "text/javascript"
				:src (format "~a/bbdb.js"
					     bbdb-directory)))
		     (<BODY> :class "bbdb"
			     (<BBDB-CONFIG> req db string name fname emails ma)
			     (map (lambda (rec)
				     (<DIV> :class "bbdb-entry"
					    (<BBDB-RECORD> rec)))
				  es)))))))))
