;*=====================================================================*/
;*    serrano/prgm/project/hop/2.2.x/weblets/test/event.hop            */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Jul  2 13:30:07 2007                          */
;*    Last change :  Tue Jan  4 18:05:05 2011 (serrano)                */
;*    Copyright   :  2007-11 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Testing events                                                   */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module weblet_test-event
   (import weblet_test)
   (export test/events))

;*---------------------------------------------------------------------*/
;*    test/events ...                                                  */
;*---------------------------------------------------------------------*/
(define-service (test/events)
   (let ((evt1 (symbol->string (gensym "event-ok")))
	 (evt2 (symbol->string (gensym "event-a")))
	 (evt3 (symbol->string (gensym "event-b")))
	 (evt4 (symbol->string (gensym "event-ready"))))
      (<TEST-HTML>
	 :source (service-resource test/events "event.hop")
	 (<DIV> :class "comment"
	    "This test checks events. If the test succeeds you should see
notifications when the mouse enters and leaves the area above. You should
also see a notification for mouse moves and clicks. In addition, if server
events succeeded, you should see an acknowledge.")
	 (let* ((b (<DIV> :align "center"
		      :style "border: 1px solid black; height: 64px"
		      "I'm a sensitive region"))
		(b3 (<SPAN> :style "color: red" "...waiting"))
		(b4 (<SPAN> :style "color: red" ""))
		(b5 (<SPAN> :style "color: red" ""))
		(b6 (<SPAN> :style "color: gray; font-style: italic" ""))
		(b2 (<DIV> :style "padding-top: 3ex"
		       ~(add-event-listener! $b
					     "mouseover"
					     (lambda (e)
						(mouse-pos "mouse entered" e)
						(add-event-listener!
						 document
						 "mousemove"
						 mouse-move
						 #f))
					     #f)
		       ~(add-event-listener! $b
					     "mouseout"
					     (lambda (e)
						(mouse-pos "mouse left" e)
						(remove-event-listener!
						 document
						 "mousemove"
						 mouse-move
						 #f))
					     #f)
		       ~(add-event-listener! $b
					     "mousedown"
					     (lambda (e)
						(mouse-click "mouse down" e))
					     #f)
		       ~(add-event-listener! $b
					     "mouseup"
					     (lambda (e)
						(mouse-click "mouse up" e))
					     #f)
		       "&nbsp;")))
	    (<DIV>
	       ~(define (mouse-move e)
		   (mouse-pos "mouve move" e))
	       ~(define (mouse-pos msg e)
		   (innerHTML-set!
		    $b2
		    (string-append msg " "
				   (number->string (event-mouse-x e))
				   " x "
				   (number->string (event-mouse-y e)))))
	       ~(define (mouse-click msg e)
		   (innerHTML-set!
		    $b2
		    (string-append msg " "
				   (number->string (event-mouse-button e)))))
	       ~(define (add e)
		   (when e.value
		      (let ((nval (string-append $b4.innerHTML e.value)))
			 (innerHTML-set! $b4 nval)
			 #t)))
	       ~(define (add-text e)
		   (when e.value
		      (innerHTML-set! $b5 (apply string-append e.value))))
	       ~(add-event-listener! window "ready"
		   (lambda (e)
		      (let ((imp (if (string? (hop-config "server_event"))
				     (hop-config "server_event")
				     "long polling")))
			 (innerHTML-set! $b6 imp))))
	       ~(add-event-listener! $evt1 "server"
		   (lambda (e)
		      (when e.value
			 (innerHTML-set! $b3 e.value)))
		   #t)
	       ~(add-event-listener! $evt2 "server" add #t)
	       ~(add-event-listener! $evt3 "server" add #t)
	       ~(add-event-listener! $evt4 "server" add-text #t)
	       ~(add-event-listener! document "server"
		   (lambda (e)
		      (cond
			 ((equal? e.value $evt1)
			  (set! e.value "ok"))
			 ((equal? e.value $evt2)
			  (set! e.value "A"))
			 ((equal? e.value $evt3)
			  (set! e.value "B")))))
	       ~(add-event-listener! document "serverready"
		   (lambda (e)
		      (with-hop ($(service :ttl 1 ()
				     (tprint "EVT.1: " evt1)
				     (hop-event-signal!
				      evt1 evt1)
				     (tprint "EVT.2: " evt2)
				     (hop-event-signal!
				      evt2 evt2)
				     (tprint "EVT.3: " evt3)
				     (hop-event-signal!
				      evt3 evt3)
				     (tprint "EVT.4: " evt4)
				     (hop-event-signal!
				      evt4 (list "foo" "\"" "bar")))))))
	       (<H4> "Client events")
	       b
	       b2
	       (<H4> "Server events")
	       (<DIV> "client-side implementation: " b6)
	       (<DIV> "Server event: " b3
		      ", Server event 2 (AB or BA when okay): " b4)
	       (<DIV> "Server string event should be [foo\"bar]: " b5)
	       (<H4> "Orientation (browser dependent)")
	       (<DIV> :style "border: 1px solid black; text-align: center;"
		  (<SPAN> :id "orientation" "Move your device"))
	       ~(add-event-listener! window "load"
		   (lambda (e)
		      (let ((ox 1)
			    (oy 1)
			    (oz 1)
			    (PI/2 (* 2 (atan 1))))
			 (add-event-listener! window "MozOrientation"
			    (lambda (e)
			       (when (or (> (abs (- e.x ox)) 0.05)
					 (> (abs (- e.y oy)) 0.05)
					 (> (abs (- e.z oz)) 0.05))
				  (set! ox e.x)
				  (set! oy e.y)
				  (set! oy e.z)
				  (node-style-set! "orientation"
				     :color "red"
				     :MozTransform (format "rotate(~arad) scale(~a,~a)" (* PI/2 (- e.x)) (+ 1 (* 2 e.y)) (+ 1 (* 2 e.z)))))))))))))))
		      
				    
      
