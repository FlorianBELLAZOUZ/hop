;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/test/test.hop                   */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Sat Sep 29 08:43:59 2007 (serrano)                */
;*    Copyright   :  2005-07 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP client side testing                                          */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module weblet_test
   (import weblet_test-image
	   weblet_test-event
	   weblet_test-fl
	   weblet_test-tree
	   weblet_test-tabslider
	   weblet_test-notepad
	   weblet_test-paned
	   weblet_test-busy
	   weblet_test-sorttable
	   weblet_test-slider
	   weblet_test-canvas
	   weblet_test-window
	   weblet_test-fselector
	   weblet_test-sound
	   weblet_test-audio)
   (export (<TEST-HTML> . args)))

;*---------------------------------------------------------------------*/
;*    hoprc-dir ...                                                    */
;*---------------------------------------------------------------------*/
(define-parameter hoprc-dir
   (make-file-path (getenv "HOME") ".config" "hop"))
   
;*---------------------------------------------------------------------*/
;*    test/documentation ...                                           */
;*---------------------------------------------------------------------*/
(define-service (test/documentation)
   (let* ((file (service-resource test/documentation "etc/test.wiki"))
	  (url (format "/hop/test/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    test ...                                                         */
;*---------------------------------------------------------------------*/
(define-service (test)
   (<TEST-HTML>
      (<DIV> :style "-moz-column-count: 2; column-count: 2; margin-top: 2ex;"
	 (<H4> "Simple tests")
	 (<UL>
	    (<LI> (<A> :href test/images :target "_blank" "Images"))
	    (<LI> (<A> :href test/events :target "_blank" "Events")))
	 (<H4> "Hop Widget tests")
	 (<UL>
	    (<LI> (<A> :href test/fl :target "_blank" "Fold lists"))
	    (<LI> (<A> :href test/notepad :target "_blank" "Notepads"))
	    (<LI> (<A> :href test/paned :target "_blank" "Pans"))
	    (<LI> (<A> :href test/slider :target "_blank" "Sliders"))
	    (<LI> (<A> :href test/sorttable :target "_blank" "Sorttables"))
	    (<LI> (<A> :href test/tree :target "_blank" "Trees"))
	    (<LI> (<A> :href test/tabslider :target "_blank" "Tabsliders"))
	    (<LI> (<A> :href test/canvas :target "_blank" "Canvas"))
	    (<LI> (<A> :href test/window :target "_blank" "Windows"))
	    (<LI> (<A> :href test/fselector :target "_blank" "File Selector")))
	 (<H4> "Miscellaneous tests")
	 (<UL>
	    (<LI> (<A> :href test/busy :target "_blank" "Busy anim"))
	    (<LI> (<A> :href test/sound :target "_blank" "Sounds"))
	    (<LI> (<A> :href test/audio :target "_blank" "Audio"))))))

;*---------------------------------------------------------------------*/
;*    <TEST-HTML> ...                                                  */
;*---------------------------------------------------------------------*/
(define-xml-compound <TEST-HTML> ((include #f)
				  (onload #f)
				  (source #f)
				  body)
   (let ((src (when source
		 (<PRE> :style "display: none"
		    (with-input-from-file source
		       (lambda ()
			  (html-string-encode (read-string))))))))
      (<HTML>
	 (cond
	    ((string? include)
	     (<HEAD> :title "Hop client-side testing"
		:base (service-base-url test (current-request))
		:css "test.hss" :include include))
	    ((pair? include)
	     (apply <HEAD> :title "Hop client-side testing"
		    :base (service-base-url test (current-request))
		    :css "test.hss" :include include))
	    (else
	     (<HEAD> :title "Hop client-side testing"
		:base (service-base-url test (current-request))
		:css "test.hss")))
	 (<BODY> :onload onload
	    
	    ~(define (toggle-source)
		(if (string=? (node-style-get $src "display") "none")
		    (node-style-set! $src "display" "block")
		    (node-style-set! $src "display" "none")))

	    (<DIV> :align "center"
	       (<TABLE> :class "test"
		  (<COLGROUP> (<COL> :width "0*"))
		  (<TR>
		     (<TD> :id "logo" (<IMG> :id "logo" :src "etc/logo.png"))
		     (<TD> (<TABLE> :width "100%"
			      (<TR>
				 (<TD> :id "title" "Hop client-side testing"))
			      (when source
				 (<TR> 
				    (<TD> :id "source"
				       "View source: "
				       (<SPAN> :onclick ~(toggle-source)
					  (basename source))
				       src)))
			      (<TR>
				 (<TD> 
				    body)))))))
	    (<FOOT>)))))
   
