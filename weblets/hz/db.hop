;*=====================================================================*/
;*    serrano/prgm/project/hop/2.4.x/weblets/hz/db.hop                 */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Mar 20 17:06:26 2006                          */
;*    Last change :  Sat Mar 30 19:22:46 2013 (serrano)                */
;*    Copyright   :  2006-20 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP hz db management                                             */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hz_db
   
   (library sqlite)
   
   (import hz_config
	   hz_weblet
	   hz_depend
	   hz_sync)
   
   (export (hz-db-init!)
	   (hz-db-add-or-update! ::weblet)
	   (hz-db-update! w)
	   (hz-db-remove-weblet ::weblet)
	   (hz-db-sync-stamp::int)
	   (hz-db-sync-stamp-inc!)
	   (hz-db-sync-date::date)
	   (hz-db-sync-date-update! ::date)
	   (hz-db-find ::bstring ::bstring)
	   (hz-db-find-by-name ::bstring)
	   (hz-db-find-by-key ::bstring)
	   (hz-db-find-by-url ::bstring)
	   (hz-db-find-new::pair-nil)
	   (hz-db-find-update::pair-nil)
	   (hz-db-find-keyword::pair-nil ::bstring)
	   (hz-db-get-categories::pair-nil)
	   (hz-db-get-entries-by-category ::bstring)
	   (hz-db-get-entry-by-name-category::weblet ::bstring ::bstring)))

;*---------------------------------------------------------------------*/
;*    *db-mutex* ...                                                   */
;*---------------------------------------------------------------------*/
(define *db-mutex* (make-mutex "hz-db"))

;*---------------------------------------------------------------------*/
;*    *db*                                                             */
;*---------------------------------------------------------------------*/
(define *db* #unspecified)

;*---------------------------------------------------------------------*/
;*    class-field-sqlite-type ...                                      */
;*---------------------------------------------------------------------*/
(define (class-field-sqlite-type f)
   (or (class-field-info f) "STRING"))

;*---------------------------------------------------------------------*/
;*    hz-db-columns ...                                                */
;*---------------------------------------------------------------------*/
(define-parameter hz-db-columns
   (map (lambda (f)
	   (cons (class-field-name f) (class-field-sqlite-type f)))
      (vector->list (class-all-fields weblet))))

;*---------------------------------------------------------------------*/
;*    hz-db-row ...                                                    */
;*---------------------------------------------------------------------*/
(define-parameter hz-db-row
   (sqlite-format "~L" (map car (hz-db-columns))))

;*---------------------------------------------------------------------*/
;*    hz-db-init! ...                                                  */
;*    -------------------------------------------------------------    */
;*    If the DB exists, re-configure it for the current HZ version.    */
;*    Otherwise, creates it.                                           */
;*---------------------------------------------------------------------*/
(define (hz-db-init!)
   (with-lock *db-mutex*
      (lambda ()
	 (let loop ()
	    (when (eq? *db* #unspecified)
	       (if (file-exists? (hz-db))
		   (with-handler
		      (lambda (e)
			 (exception-notify e)
			 (fprintf (current-error-port)
			    "Deleting exising database ~s..." (hz-db))
			 (delete-file (hz-db))
			 (loop))
		      (hz-db-reconfigure!
			 (instantiate::sqltiny
			    (path (hz-db))
			    (sync 'automatic))))
		   (begin
		      (make-directory (dirname (hz-db)))
		      (let ((db (instantiate::sqltiny
				   (path (hz-db))
				   (sync 'automatic))))
			 (sqlite-exec db
			    "CREATE TABLE info (name STRING, date STRING, stamp INTEGER, version STRING)")
			 (sqlite-exec db
			    "INSERT INTO info VALUES ('info', ~q, ~q, ~q)"
			    (elong->string (date->seconds (make-date)))
			    1
			    (hz-version))
			 (sqlite-exec db
			    "CREATE TABLE weblets (~L)"
			    (map (lambda (s) (format "~a ~a" (car s) (cdr s)))
			       (hz-db-columns)))
			 (set! *db* db))))))))
   (hz-sync-standard-weblets!)
   (hz-db-sync-date-update! (current-date)))

;*---------------------------------------------------------------------*/
;*    hz-db-reconfigure! ...                                           */
;*---------------------------------------------------------------------*/
(define (hz-db-reconfigure! db)
   (let ((cols (sqlite-table-name-of-columns db "weblets")))
      (if (not (pair? cols))
	  (error 'hz "Cannot reconfigure database" db)
	  (let ((names (map string->symbol cols)))
	     (for-each (lambda (f)
			  (unless (memq (class-field-name f) names)
			     (sqlite-exec db
				"ALTER TABLE weblets ADD COLUMN ~a ~a"
				(class-field-name f)
				(class-field-sqlite-type f))))
		(vector->list (class-all-fields weblet))))))
   (set! *db* db))

;*---------------------------------------------------------------------*/
;*    db-sync-stamp ...                                                */
;*---------------------------------------------------------------------*/
(define (db-sync-stamp)
   (string->integer (sqlite-exec *db* "SELECT stamp FROM info")))

;*---------------------------------------------------------------------*/
;*    hz-db-sync-stamp ...                                             */
;*---------------------------------------------------------------------*/
(define (hz-db-sync-stamp)
   (with-lock *db-mutex*
      (lambda ()
	 (db-sync-stamp))))

;*---------------------------------------------------------------------*/
;*    hz-db-sync-stamp-inc! ...                                        */
;*---------------------------------------------------------------------*/
(define (hz-db-sync-stamp-inc!)
   (with-lock *db-mutex*
      (lambda ()
	 (let ((n (+fx 1 (db-sync-stamp))))
	    (sqlite-exec *db*
	       "UPDATE info SET stamp=~a WHERE (name='info')" n)))))

;*---------------------------------------------------------------------*/
;*    hz-db-sync-date ...                                              */
;*---------------------------------------------------------------------*/
(define (hz-db-sync-date)
   (with-lock *db-mutex*
      (lambda ()
	 (seconds->date
	  (string->elong
	   (sqlite-exec *db* "SELECT date FROM info"))))))

;*---------------------------------------------------------------------*/
;*    hz-db-sync-date-update! ...                                      */
;*---------------------------------------------------------------------*/
(define (hz-db-sync-date-update! ndate)
   (let ((nd (elong->string (date->seconds ndate))))
      (with-lock *db-mutex*
	 (lambda ()
	    (sqlite-exec *db* "UPDATE info SET date=~q WHERE (name='info')"
			 nd)))))

;*---------------------------------------------------------------------*/
;*    hz-make-weblet ...                                               */
;*---------------------------------------------------------------------*/
(define (hz-make-weblet st dr na ve in ur ho pu au ca mi ma dp is ti co sig auth dir)
   (unless (and (string? ve) (string? in))
      (error "hz-make-weblet" "pas bon" 
	 (format "~s ~a ~a" na ve in)))
   (instantiate::weblet
      (stamp (string->integer st))
      (driver dr)
      (name na)
      (version (version-unpadding ve))
      (install (version-unpadding in))
      (url ur)
      (home ho)
      (publisher pu)
      (author au)
      (category ca)
      (minhop mi)
      (maxhop ma)
      (depends (string->obj dp))
      (installable (string->obj is))
      (title ti)
      (comment co)
      (signature sig)
      (authorization auth)
      (directory dir)))

;*---------------------------------------------------------------------*/
;*    hz-db-find ...                                                   */
;*---------------------------------------------------------------------*/
(define (hz-db-find name category)
   (sqlite-eval *db* hz-make-weblet
      "SELECT ~a FROM weblets WHERE (name=~q) AND (category=~q)"
      (hz-db-row) name category))

;*---------------------------------------------------------------------*/
;*    hz-db-find-by-name ...                                           */
;*---------------------------------------------------------------------*/
(define (hz-db-find-by-name name)
   (sqlite-eval *db* hz-make-weblet
      "SELECT ~a FROM weblets WHERE (name=~q)"
      (hz-db-row) name))

;*---------------------------------------------------------------------*/
;*    hz-db-find-by-key ...                                            */
;*---------------------------------------------------------------------*/
(define (hz-db-find-by-key key)
   (sqlite-eval *db* hz-make-weblet
      "SELECT ~a FROM weblets WHERE (key=~q)"
      (hz-db-row) key))

;*---------------------------------------------------------------------*/
;*    hz-db-find-by-url ...                                            */
;*---------------------------------------------------------------------*/
(define (hz-db-find-by-url url)
   (sqlite-eval *db* hz-make-weblet
      "SELECT ~a FROM weblets WHERE (url=~q)"
      (hz-db-row) url))

;*---------------------------------------------------------------------*/
;*    hz-db-find-new ...                                               */
;*---------------------------------------------------------------------*/
(define (hz-db-find-new)
   (let ((stamp (hz-db-sync-stamp)))
      (sqlite-map *db* hz-make-weblet
	 "SELECT ~a FROM weblets WHERE (stamp>=~q)" (hz-db-row) stamp)))

;*---------------------------------------------------------------------*/
;*    hz-db-find-update ...                                            */
;*---------------------------------------------------------------------*/
(define (hz-db-find-update)
   (sqlite-map *db* hz-make-weblet
      "SELECT ~a
         FROM weblets
        WHERE (install != '') AND (version > install)" (hz-db-row)))

;*---------------------------------------------------------------------*/
;*    hz-db-find-keyword ...                                           */
;*---------------------------------------------------------------------*/
(define (hz-db-find-keyword key)
   (with-lock *db-mutex*
      (lambda ()
	 (sqlite-map *db* hz-make-weblet
	    "SELECT * FROM weblets WHERE (name LIKE '%~a%') || (author LIKE '%~a%') || (title LIKE '%~a%') || (comment LIKE '%~a%') ORDER BY name ASC"
	    key key key key))))

;*---------------------------------------------------------------------*/
;*    hz-db-add-or-update! ...                                         */
;*---------------------------------------------------------------------*/
(define (hz-db-add-or-update! w)
   (with-access::weblet w (name category url stamp install version installable)
      (set! installable (hz-weblet-installable? w))
      (with-lock *db-mutex*
	 (lambda ()
	    (let ((old (hz-db-find name category)))
	       (if (isa? old weblet)
		   (with-access::weblet old ((oldinstall install)
					     (oldversion version))
		      (when (string-null? install)
			 (set! install oldinstall))
		      (sqlite-exec *db*
			 "UPDATE weblets SET ~l
                           WHERE (name=~q) AND (category=~q)"
			 (map (lambda (n v)
				 (sqlite-format "~a=~q" (car n) v))
			    (hz-db-columns)
			    (weblet->list w))
			 name
			 category))
		   (begin
		      (sqlite-exec *db*
			 "INSERT INTO weblets (~a) VALUES (~k)"
			 (hz-db-row)
			 (weblet->list w)))))))))
   
;*---------------------------------------------------------------------*/
;*    hz-db-update! ...                                                */
;*---------------------------------------------------------------------*/
(define (hz-db-update! w)
   (with-access::weblet w (name category url stamp install version installable)
      (set! installable (hz-weblet-installable? w))
      (with-lock *db-mutex*
	 (lambda ()
	    (let ((old (hz-db-find name category)))
	       (sqlite-exec *db*
		  "UPDATE weblets SET ~l
                           WHERE (name=~q) AND (category=~q)"
		  (map (lambda (n v)
			  (sqlite-format "~a=~q" (car n) v))
		     (hz-db-columns)
		     (weblet->list w))
		  name
		  category))))))
   
;*---------------------------------------------------------------------*/
;*    hz-db-remove-weblet ...                                          */
;*---------------------------------------------------------------------*/
(define (hz-db-remove-weblet w)
   (with-access::weblet w (name category url stamp)
      (with-lock *db-mutex*
	 (lambda ()
	    (let ((old (hz-db-find name category)))
	       (when (isa? old weblet)
		  (sqlite-exec *db*
		     "DELETE from weblets WHERE (name=~q) AND (category=~q)"
		     name
		     category)))))))
   
;*---------------------------------------------------------------------*/
;*    hz-db-get-categories ...                                         */
;*---------------------------------------------------------------------*/
(define (hz-db-get-categories)
   (with-lock *db-mutex*
      (lambda ()
	 (sqlite-map *db* (lambda (x) x)
	    "SELECT DISTINCT category FROM weblets ORDER BY category ASC"))))

;*---------------------------------------------------------------------*/
;*    hz-db-get-entries-by-category ...                                */
;*---------------------------------------------------------------------*/
(define (hz-db-get-entries-by-category category)
   (with-lock *db-mutex*
      (lambda ()
	 (sqlite-map *db* hz-make-weblet
	    "SELECT ~a FROM weblets WHERE (category=~q) ORDER BY name ASC"
	    (hz-db-row) category))))

;*---------------------------------------------------------------------*/
;*    hz-db-get-entry-by-name-category ...                             */
;*---------------------------------------------------------------------*/
(define (hz-db-get-entry-by-name-category name category)
   (with-lock *db-mutex*
      (lambda ()
	 (sqlite-eval *db* hz-make-weblet
	    "SELECT ~a FROM weblets WHERE (name=~q) AND (category=~q)"
	    (hz-db-row) name category))))
