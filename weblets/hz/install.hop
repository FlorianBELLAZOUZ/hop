;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/hz/install.hop                  */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Mar 24 09:21:45 2006                          */
;*    Last change :  Wed Nov 28 11:11:57 2007 (serrano)                */
;*    Copyright   :  2006-07 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Actual installation/uninstallation.                              */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hz_install
   
   (import hz_config
	   hz_package
	   hz_weblet
	   hz_db)
   
   (export (hz-install-url ::bstring)
	   (hz-install-weblet ::weblet)
	   (hz-load ::bstring)
	   (hz-uninstall-weblet ::weblet)))

;*---------------------------------------------------------------------*/
;*    hz-install-url ...                                               */
;*---------------------------------------------------------------------*/
(define (hz-install-url url)
   (hz-db-init!)
   (multiple-value-bind (name version)
      (package-url-parse url)
      (let* ((hzfile (format "~a-~a.hz" name version))
	     (hzpath (make-file-name (hz-download-directory) hzfile)))
	 (unless (file-exists? hzpath)
	    (with-url url
	       (lambda (str)
		  (with-output-to-file hzpath
		     (lambda ()
			(display str))))
	       :timeout (hz-connection-timeout)))
	 (let ((w (hz-install-file hzpath name version url)))
	    (reset-autoload!)
	    w))))

;*---------------------------------------------------------------------*/
;*    hz-install-file ...                                              */
;*---------------------------------------------------------------------*/
(define (hz-install-file path name version url)
   ;; untar the .hz into the weblets directory
   (let* ((p (open-input-gzip-file path)))
      (unwind-protect
	 (untar p :directory (hz-weblets-directory))
	 (close-input-port p)))
   ;; add the weblet to the database
   (let* ((p (make-file-path (hz-weblets-directory) name "etc" "weblet.info"))
	  (i (if (file-exists? p)
		 (with-input-from-file p read)
		 `((name ,name) (version ,version))))
	  (e (info->weblet i :name name :version version :url url)))
      ;; add the publisher for other possible weblets
      (weblet-stamp-set! e (hz-db-sync-stamp))
      (hz-install-weblet e)))

;*---------------------------------------------------------------------*/
;*    hz-install-weblet ...                                            */
;*---------------------------------------------------------------------*/
(define (hz-install-weblet e)
   (unless (string=? (weblet-publisher e) "")
      (hz-publisher-add! (weblet-publisher e)))
   ;; update the database
   (weblet-install-set! e (weblet-version e))
   (hz-db-add-or-update! e)
   e)
   
;*---------------------------------------------------------------------*/
;*    hz-load ...                                                      */
;*---------------------------------------------------------------------*/
(define (hz-load path)
   (with-url path
      (lambda (s)
	 (let* ((p0 (open-input-string s))
		(p (open-input-gzip-port p0)))
	    (unwind-protect
	       (let* ((tmp (make-file-name (os-tmp) "hop"))
		      (files (untar p :directory tmp)))
		  (if (pair? files)
		      (let* ((file (car files))
			     (base (substring file
					      (+fx (string-length tmp) 1)
					      (string-length file)))
			     (dir (dirname base))
			     (name (if (string=? dir ".") base dir))
			     (src (make-file-path
				   tmp name (string-append name ".hop"))))
			 (if (file-exists? src)
			     (hop-load src)
			     (error 'hz-load "Cannot find HOP source" path)))
		      (error 'hz-load "Cannot find HOP source" path)))
	       (begin
		  (close-input-port p)
		  (close-input-port p0)))))
      :timeout (hz-connection-timeout)))

;*---------------------------------------------------------------------*/
;*    hz-uninstall-weblet ...                                          */
;*---------------------------------------------------------------------*/
(define (hz-uninstall-weblet w)
   (hz-db-init!)
   (when (weblet? w)
      (with-access::weblet w (name install)
	 (when (delete-path (make-file-path (hz-weblets-directory) name))
	    (set! install "")
	    (hz-db-add-or-update! w)))))
