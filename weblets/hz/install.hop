;*=====================================================================*/
;*    serrano/prgm/project/hop/2.3.x/weblets/hz/install.hop            */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Mar 24 09:21:45 2006                          */
;*    Last change :  Fri Jun  1 08:21:02 2012 (serrano)                */
;*    Copyright   :  2006-12 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Actual installation/uninstallation.                              */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hz_install
   
   (import hz_config
	   hz_package
	   hz_weblet
	   hz_db)
   
   (export (hz-load ::bstring)
	   (hz-install-weblet ::weblet)
	   (hz-download-url ::bstring #!key auth weblet override)
	   (hz-install-url ::bstring #!key auth weblet override publisher)
	   (hz-uninstall-weblet ::weblet)))

;*---------------------------------------------------------------------*/
;*    hz-check-weblet ...                                              */
;*    -------------------------------------------------------------    */
;*    Check that one weblet can be installed (check depends). Returns  */
;*    #t on success, returns the name of the failing weblet and        */
;*    the reason of the failure.                                       */
;*---------------------------------------------------------------------*/
(define (hz-check-weblet e)
   (with-access::weblet e (depends)
      #t))
   
;*---------------------------------------------------------------------*/
;*    hz-load ...                                                      */
;*---------------------------------------------------------------------*/
(define (hz-load path)
   (with-url path
      (lambda (s)
	 (let* ((p0 (open-input-string s))
		(p (open-input-gzip-port p0)))
	    (unwind-protect
	       (let* ((tmp (make-file-name (os-tmp) "hop"))
		      (files (untar p :directory tmp)))
		  (if (pair? files)
		      (let* ((file (car files))
			     (base (substring file
					      (+fx (string-length tmp) 1)
					      (string-length file)))
			     (dir (dirname base))
			     (name (if (string=? dir ".") base dir))
			     (src (make-file-path
				   tmp name (string-append name ".hop"))))
			 (if (file-exists? src)
			     (hop-load-weblet src)
			     (error "hz-load" "Cannot find HOP source" path)))
		      (error "hz-load" "Cannot find HOP source" path)))
	       (begin
		  (close-input-port p)
		  (close-input-port p0)))))
      :timeout (hz-connection-timeout)))

;*---------------------------------------------------------------------*/
;*    hz-install-weblet ...                                            */
;*---------------------------------------------------------------------*/
(define (hz-install-weblet e)
   (with-access::weblet e (name url authorization)
      (hz-install-url url :auth authorization :weblet e)))

;*---------------------------------------------------------------------*/
;*    hz-download-url ...                                              */
;*---------------------------------------------------------------------*/
(define (hz-download-url url #!key auth weblet override)

   (define (download url name version path)
      (let ((header (cond
		       ((string? auth)
			(list (list authorization: auth)))
		       ((pair? auth)
			(list (list authorization:
				 (http-basic-authorization
				    (car auth) (cdr auth)))))
		       (else
			'()))))
	 (with-url url
	    (lambda (str)
	       ;; download the file
	       (with-output-to-file path
		  (lambda ()
		     (display str)))
	       ;; return the path name
	       path)
	    :fail (lambda (xhr)
		     (with-access::xml-http-request xhr (input-port status)
			;; raise an error to stop everything
			(let ((msg (read-string input-port)))
			   ;; WARNING, MS 19dec2010: this code is incorrect,
			   ;; READ-STRING is not correct. A true parsing
			   ;; (with content-length) should be needed here.
			   (list status url msg))))
	    :timeout (hz-connection-timeout)
	    :header header)))
      
   (multiple-value-bind (name version)
      (package-url-parse url)
      (let* ((hzfile (format "~a-~a.hz" name version))
	     (hzpath (make-file-name (hz-download-directory) hzfile)))
	 (cond
	    ((not (file-exists? hzpath))
	     (download url name version hzpath))
	    ((not override)
	     hzpath)
	    (else
	     (delete-file hzpath)
	     (download url name version hzpath))))))
   
;*---------------------------------------------------------------------*/
;*    hz-install-url ...                                               */
;*---------------------------------------------------------------------*/
(define (hz-install-url url #!key auth weblet override publisher)
   (hz-db-init!)
   (multiple-value-bind (name version)
      (package-url-parse url)
      (let ((r (hz-download-url url :auth auth :weblet weblet :override override)))
	 (if (and (string? r) (file-exists? r))
	     ;; now downloaded, install
	     (let ((w (hz-install-file weblet r name version url)))
		;; add the publisher to the publisher list
		(when (and (string? publisher) (not (string-null? publisher)))
		   (hz-publisher-add! publisher))
		(reset-autoload!)
		w)
	     ;; propagate the failure
	     r))))

;*---------------------------------------------------------------------*/
;*    hz->weblet ...                                                   */
;*---------------------------------------------------------------------*/
(define (hz->weblet name version url)
   (let* ((dir (make-file-name (hz-weblets-directory) name))
	  (p  (make-file-path dir "etc" "weblet.info"))
	  (i (if (file-exists? p)
		 (with-input-from-file p read)
		 `((name ,name) (version ,version)))))
      (info->weblet i :name name :version version :url url :dir dir)))

;*---------------------------------------------------------------------*/
;*    hz-install-file ...                                              */
;*---------------------------------------------------------------------*/
(define (hz-install-file e path name version url)
   ;; untar the .hz into the weblets directory
   (let* ((p (open-input-gzip-file path)))
      (unwind-protect
	 (untar p :directory (hz-weblets-directory))
	 (close-input-port p)))
   ;; add the weblet to the database
   (let ((e (or e (hz->weblet name version url))))
      ;; add the publisher for other possible weblets
      (with-access::weblet e (stamp publisher install version)
	 (set! stamp (hz-db-sync-stamp))
	 ;; mark the weblet as installed
	 (unless (or (not (string? publisher)) (string=? publisher ""))
	    (hz-publisher-add! publisher))
	 ;; update the database
	 (set! install version))
      (hz-db-add-or-update! e)
      ;; try to configure the weblet
      e))
   
;*---------------------------------------------------------------------*/
;*    hz-uninstall-weblet ...                                          */
;*---------------------------------------------------------------------*/
(define (hz-uninstall-weblet w)
   (hz-db-init!)
   (when (isa? w weblet)
      (with-access::weblet w (name install)
	 (when (delete-path (make-file-path (hz-weblets-directory) name))
	    (set! install "")
	    (hz-db-add-or-update! w)))))
