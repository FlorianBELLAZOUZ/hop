;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/hz/install.hop                  */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Mar 24 09:21:45 2006                          */
;*    Last change :  Sun Sep  3 08:16:31 2006 (serrano)                */
;*    Copyright   :  2006 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    Actual installation/uninstallation.                              */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hz_install
   
   (import hz_config
	   hz_db)
   
   (export (hz-install ::dbhz)
	   (hz-uninstall ::dbhz)
	   (hz-install-ondemand db req ::bstring ::bstring)))

;*---------------------------------------------------------------------*/
;*    hz/get ...                                                       */
;*---------------------------------------------------------------------*/
(define-service (hz/get hz)
   (instantiate::http-response-file
      (file (make-file-name (hz-repository) hz))))

;*---------------------------------------------------------------------*/
;*    hz-install ...                                                   */
;*---------------------------------------------------------------------*/
(define (hz-install hz)
   (with-access::dbhz hz (name category install version hop)
      (multiple-value-bind (_ uinfo host port path)
	 (url-parse hop)
	 ;; get the tarball
	 (let* ((hzpath (format "~a/~a-~a.hz" category name version))
		(req (instantiate::http-request
			(userinfo uinfo)
			(host host)
			(port port)
			(path (make-hop-service-url hz/get hzpath)))))
	    (http-send-request
	     req
	     (lambda (status clength p)
		(case status
		   ((200)
		    (let ((base (make-file-name (hop-rc-directory) "weblets")))
		       (unless (file-exists? base) (make-directory base))
		       (let ((lst (hz-untar (elong->fixnum clength) p base)))
			  (if (pair? lst)
			      (let ((path (make-file-path
					   base
					   name
					   (string-append name ".hop")))
				    (url (make-file-name
					  (hop-service-base)
					  name)))
				 (for-each hop-load-once-unmark! lst)
				 (autoload path (autoload-prefix url))
				 (set! install version))
			      (error 'hz-install
				     "Installation failure"
				     hzpath)))))
		   ((401 407)
		    (user-access-denied req))
		   (else
		    (error 'hz-install "Can't download hz" hzpath)))))))))

;*---------------------------------------------------------------------*/
;*    hz-uninstall ...                                                 */
;*---------------------------------------------------------------------*/
(define (hz-uninstall hz)
   (with-access::dbhz hz (name install)
      (let ((dir (make-file-path (hop-rc-directory) "weblets" name)))
	 (rm-rf dir)
	 (set! install ""))))

;*---------------------------------------------------------------------*/
;*    hz-untar ...                                                     */
;*---------------------------------------------------------------------*/
(define (hz-untar clen p base)
   (unless (=fx clen -1) (input-port-fill-barrier-set! p clen))
   (let ((pz (open-input-gzip-port p)))
      (unwind-protect
	 (let loop ((lst '()))
	    (let ((h (tar-read-header pz)))
	       (if (not h)
		   lst
		   (case (tar-header-type h)
		      ((dir)
		       (let ((path (make-file-name base (tar-header-name h))))
			  (rm-rf path)
			  (if (make-directory path)
			      (loop lst)
			      (error 'hz-install
				     "Cannot create directory"
				     path))))
		      ((normal)
		       (let* ((path (make-file-name base (tar-header-name h)))
			      (dir (dirname path)))
			  (when (and (file-exists? dir) (not (directory? dir)))
			     (delete-file dir))
			  (unless (file-exists? dir)
			     (make-directory dir))
			  (with-output-to-file path
			     (lambda ()
				(display (tar-read-block h pz))))
			  (loop (cons path lst))))
		      (else
		       (error 'hz-install
			      (format "Illegal file type `~a'"
				      (tar-header-type h))
			      (tar-header-name h)))))))
	 (close-input-port pz))))

;*---------------------------------------------------------------------*/
;*    rm-rf ...                                                        */
;*---------------------------------------------------------------------*/
(define (rm-rf path)
   (when (file-exists? path)
      (if (directory? path)
	  (let ((files (directory->list path)))
	     (for-each (lambda (f) (rm-rf (make-file-name path f))) files)
	     (delete-directory path))
	  (delete-file path))))

;*---------------------------------------------------------------------*/
;*    hz-install-ondemand ...                                          */
;*---------------------------------------------------------------------*/
(define (hz-install-ondemand db req name url)
   (with-url url
      (lambda (h)
	 (let ((p (open-input-string h))
	       (base (make-file-name (hop-rc-directory) "weblets")))
	    (unwind-protect
	       (hz-untar -1 p base)
	       (close-input-port p))
	    (let* ((hzdir (make-file-name base name))
		   (info (make-file-path hzdir
					 "etc"
					 (string-append name ".info"))))
	       (if (not (file-exists? info))
		   (begin
		      (rm-rf hzdir)
		      (error 'hz/install-ondemand
			     "Can't find info file"
			     info))
		   (let* ((i (with-input-from-file info read))
			  (v (cond
				((assq 'version i) => cadr)
				(else (error
				       'hz/install-ondemand
				       "Illegal info file, missing version"
				       i))))
			  (c (cond
				((assq 'category i) => cadr)
				(else (error
				       'hz/install-ondemand
				       "Illegal info file, missing category"
				       i))))
			  (n (hz-info->dbhz-args i
						 #f
						 (number->string
						  (date->seconds
						   (current-date)))
						 (hz-db-sync-stamp db)
						 v
						 url)))
		      (let ((o (hz-db-get-entry-by-name-driver db name url)))
			 (when (dbhz? o)
			    (hz-db-remove-weblet db o)))
		      (apply hz-db-add-entry db n)
		      (hz-db-close db)
		      #t)))))
      :header (if (http-request? req) (http-request-header req) '())
      :fail (lambda (h) h)))
