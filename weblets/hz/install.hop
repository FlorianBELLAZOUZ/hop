;*=====================================================================*/
;*    serrano/prgm/project/hop/2.3.x/weblets/hz/install.hop            */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Mar 24 09:21:45 2006                          */
;*    Last change :  Wed May 30 20:11:34 2012 (serrano)                */
;*    Copyright   :  2006-12 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Actual installation/uninstallation.                              */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hz_install
   
   (import hz_config
	   hz_package
	   hz_weblet
	   hz_db)
   
   (export (hz-install-url ::bstring #!key auth weblet)
           (hz-load ::bstring)
	   (hz-install-weblet ::weblet)
	   (hz-uninstall-weblet ::weblet)))

;*---------------------------------------------------------------------*/
;*    hz-install-weblet ...                                            */
;*---------------------------------------------------------------------*/
(define (hz-install-weblet e)
   (with-access::weblet e (name url authorization)
      (unless (hz-installable? e)
	 (error "hz" "Incompatible weblet" name))
      (hz-install-url url :auth authorization :weblet e)))

;*---------------------------------------------------------------------*/
;*    hz-installable? ...                                              */
;*---------------------------------------------------------------------*/
(define (hz-installable? e)
   
   (define (version-compatible? w v)
      (when (symbol? v)
	 (let ((s (symbol->string v)))
	    (cond
	       ((string-prefix? ">=" s)
		'todo1)
	       ((string-prefix? ">" s)
		'todo2)
	       ((string-prefix? "<=" s)
		'todo3)
	       ((string-prefix? "<" s)
		'todo4)
	       (else
		'todo5)))))
      
   (with-access::weblet e (depends minhop maxhop)
      (and (or (=fx (string-length minhop) 0)
	       (>fx (string-natural-compare3 (hop-version) minhop) 0))
	   (or (=fx (string-length maxhop) 0)
	       (<fx (string-natural-compare3 (hop-version) maxhop) 0))
	   (every? (lambda (d)
		      (let ((w (hz-db-find-by-name (car d))))
			 (when (isa? w weblet)
			    (every? (lambda (v)
				       (version-compatible? w v))
			       (cdr d)))))
	      depends))))
      
;*---------------------------------------------------------------------*/
;*    hz-install-url ...                                               */
;*---------------------------------------------------------------------*/
(define (hz-install-url url #!key auth weblet)
   (hz-db-init!)
   (multiple-value-bind (name version)
      (package-url-parse url)
      (let* ((hzfile (format "~a-~a.hz" name version))
	     (hzpath (make-file-name (hz-download-directory) hzfile))
	     (header (cond
			((string? auth)
			 (list (list authorization: auth)))
			((pair? auth)
			 (list (list authorization:
				     (http-basic-authorization
				      (car auth) (cdr auth)))))
			(else
			 '()))))
	 (when (file-exists? hzpath)
	    (delete-file hzpath))
	 (with-url url
	    (lambda (str)
	       ;; download the file
	       (with-output-to-file hzpath
		  (lambda ()
		     (display str)))
	       ;; install it
	       (let ((w (hz-install-file weblet hzpath name version url)))
		  (reset-autoload!)
		  w))
	    :fail (lambda (xhr)
		     (with-access::xml-http-request xhr (input-port status)
			;; raise an error to stop everything
			(let ((msg (read-string input-port)))
			   ;; WARNING, MS 19dec2010: this code is incorrect,
			   ;; READ-STRING is not correct. A true parsing
			   ;; (with content-length) should be needed here.
			   (list status url msg))))
	    :timeout (hz-connection-timeout)
	    :header header))))

;*---------------------------------------------------------------------*/
;*    hz->weblet ...                                                   */
;*---------------------------------------------------------------------*/
(define (hz->weblet name version url)
   (let* ((dir (make-file-name (hz-weblets-directory) name))
	  (p  (make-file-path dir "etc" "weblet.info"))
	  (i (if (file-exists? p)
		 (with-input-from-file p read)
		 `((name ,name) (version ,version)))))
      (info->weblet i :name name :version version :url url :dir dir)))

;*---------------------------------------------------------------------*/
;*    hz-install-file ...                                              */
;*---------------------------------------------------------------------*/
(define (hz-install-file e path name version url)
   ;; untar the .hz into the weblets directory
   (let* ((p (open-input-gzip-file path)))
      (unwind-protect
	 (untar p :directory (hz-weblets-directory))
	 (close-input-port p)))
   ;; add the weblet to the database
   (let ((e (or e (hz->weblet name version url))))
      ;; add the publisher for other possible weblets
      (with-access::weblet e (stamp publisher install version)
	 (set! stamp (hz-db-sync-stamp))
	 ;; mark the weblet as installed
	 (unless (or (not (string? publisher)) (string=? publisher ""))
	    (hz-publisher-add! publisher))
	 ;; update the database
	 (set! install version))
      (hz-db-add-or-update! e)
      ;; try to configure the weblet
      e))
   
;*---------------------------------------------------------------------*/
;*    hz-load ...                                                      */
;*---------------------------------------------------------------------*/
(define (hz-load path)
   (with-url path
      (lambda (s)
	 (let* ((p0 (open-input-string s))
		(p (open-input-gzip-port p0)))
	    (unwind-protect
	       (let* ((tmp (make-file-name (os-tmp) "hop"))
		      (files (untar p :directory tmp)))
		  (if (pair? files)
		      (let* ((file (car files))
			     (base (substring file
					      (+fx (string-length tmp) 1)
					      (string-length file)))
			     (dir (dirname base))
			     (name (if (string=? dir ".") base dir))
			     (src (make-file-path
				   tmp name (string-append name ".hop"))))
			 (if (file-exists? src)
			     (hop-load-weblet src)
			     (error 'hz-load "Cannot find HOP source" path)))
		      (error 'hz-load "Cannot find HOP source" path)))
	       (begin
		  (close-input-port p)
		  (close-input-port p0)))))
      :timeout (hz-connection-timeout)))

;*---------------------------------------------------------------------*/
;*    hz-uninstall-weblet ...                                          */
;*---------------------------------------------------------------------*/
(define (hz-uninstall-weblet w)
   (hz-db-init!)
   (when (isa? w weblet)
      (with-access::weblet w (name install)
	 (when (delete-path (make-file-path (hz-weblets-directory) name))
	    (set! install "")
	    (hz-db-add-or-update! w)))))
