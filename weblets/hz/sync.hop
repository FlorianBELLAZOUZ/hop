;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/hz/sync.hop                     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Mar 17 09:28:32 2006                          */
;*    Last change :  Mon Nov 19 18:13:42 2007 (serrano)                */
;*    Copyright   :  2006-07 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP hz sync                                                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hz_sync
   
   (import  hz_config
	    hz_weblet
	    hz_db)

   (export  (hz-sync!::pair-nil)
	    (hz-sync-standard-weblets!)))

;*---------------------------------------------------------------------*/
;*    hz-sync! ...                                                     */
;*    -------------------------------------------------------------    */
;*    This function modifies the database and returns a list of        */
;*    bad weblets.                                                     */
;*---------------------------------------------------------------------*/
(define (hz-sync!::pair-nil)
   (hz-db-sync-date-update! (current-date))
   (hz-sync-standard-weblets!)
   (append-map hz-sync-publisher! (hz-publishers)))

;*---------------------------------------------------------------------*/
;*    hz-sync-publisher! ...                                           */
;*---------------------------------------------------------------------*/
(define (hz-sync-publisher! pub)
   (when (or (string? pub) (cadr pub))
      (let ((url (if (pair? pub) (car pub) pub)))
	 (with-handler
	    (lambda (e)
	       (cond
		  ((&error? e)
		   (list (cons url (&error-msg e))))
		  ((http-response-authentication? e)
		   (list (cons url "access denied")))
		  (else
		   (list (cons url e)))))
	    (with-url url
	       (lambda (s)
		  (with-input-from-string s
		     (lambda ()
			(filter-map (lambda (i)
				       (let ((w (info->weblet e)))
					  (hz-db-add-or-update! e)
					  #f))
				    (read)))))
	       :timeout (hz-connection-timeout))))))

;*---------------------------------------------------------------------*/
;*    hz-sync-standard-weblets! ...                                    */
;*    -------------------------------------------------------------    */
;*    Sync all the standard weblets in the database.                   */
;*---------------------------------------------------------------------*/
(define (hz-sync-standard-weblets!)
   
   (define (sync-weblet! dir ifile)
      (when (file-exists? ifile)
	 (with-handler
	    (lambda (e)
	       #f)
	    (with-input-from-file ifile
	       (lambda ()
		  (let ((w (info->weblet (cons `(category "hop") (read))
					 :name (basename dir)
					 :url dir)))
		     (weblet-driver-set! w "standard")
		     (weblet-install-set! w (weblet-version w))
		     (weblet-installstamp-set! w 0)
		     (hz-db-add-or-update! w)))))))
   
   (define (sync-dir! dir)
      (when (directory? dir)
	 (sync-weblet! dir (make-file-path dir "etc" "weblet.info"))))
   
   (for-each sync-dir! (directory->path-list (hop-weblets-directory))))
