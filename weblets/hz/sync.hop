;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/hz/sync.hop                     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Mar 17 09:28:32 2006                          */
;*    Last change :  Wed Nov 21 08:00:30 2007 (serrano)                */
;*    Copyright   :  2006-07 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP hz sync                                                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hz_sync
   
   (import  hz_config
	    hz_weblet
	    hz_db)

   (export  (hz-sync-authenticate! ::bstring ::bstring ::bstring)
	    (hz-sync!::pair-nil)
	    (hz-sync-standard-weblets!)))

;*---------------------------------------------------------------------*/
;*    *hz-mutex*                                                       */
;*---------------------------------------------------------------------*/
(define *hz-mutex* (make-mutex 'hz))

;*---------------------------------------------------------------------*/
;*    *url-authenticate-table*                                         */
;*---------------------------------------------------------------------*/
(define *url-authenticate-table* (make-hashtable))

;*---------------------------------------------------------------------*/
;*    hz-sync-authenticate! ...                                        */
;*---------------------------------------------------------------------*/
(define (hz-sync-authenticate! url user passwd)
   (with-lock *hz-mutex*
      (lambda ()
	 (hashtable-put! *url-authenticate-table* url (cons user passwd))))
   #t)

;*---------------------------------------------------------------------*/
;*    hz-sync! ...                                                     */
;*    -------------------------------------------------------------    */
;*    This function modifies the database and returns a list of        */
;*    bad weblets.                                                     */
;*---------------------------------------------------------------------*/
(define (hz-sync!::pair-nil)
   (hz-db-sync-date-update! (current-date))
   (hz-sync-standard-weblets!)
   (bind-exit (escape)
      (append-map (lambda (p) (hz-sync-publisher! p escape)) (hz-publishers))))

;*---------------------------------------------------------------------*/
;*    hz-sync-publisher! ...                                           */
;*---------------------------------------------------------------------*/
(define (hz-sync-publisher! pub escape)
   (if (and pub (or (string? pub) (cadr pub)))
       (let* ((url (if (pair? pub) (car pub) pub))
	      (auth (with-lock *hz-mutex*
		       (lambda ()
			  (hashtable-get *url-authenticate-table* url))))
	      (pub `((publisher ,pub))))
	  (with-handler
	     (lambda (e)
		(cond
		   ((&error? e)
		    (list (cons url (&error-msg e))))
		   ((http-response-authentication? e)
		    (escape url))
		   (else
		    (list (cons url e)))))
	     (with-url url
		(lambda (s)
		   (with-input-from-string s
		      (lambda ()
			 (filter-map (lambda (e)
					(let ((w (info->weblet (append e pub))))
					   (hz-db-add-or-update! w)
					   #f))
				     (read)))))
		:timeout (hz-connection-timeout)
		:header (if (pair? auth)
			    (list (list authorization:
					(string-append "Basic "
						       (base64-encode
							(string-append
							 (car auth)
							 ":"
							 (cdr auth))))))
			    '()))))
       '()))

;*---------------------------------------------------------------------*/
;*    hz-sync-standard-weblets! ...                                    */
;*    -------------------------------------------------------------    */
;*    Sync all the standard weblets in the database.                   */
;*---------------------------------------------------------------------*/
(define (hz-sync-standard-weblets!)
   
   (define (sync-weblet! dir ifile)
      (when (file-exists? ifile)
	 (with-handler
	    (lambda (e)
	       (when (&error? e) (error-notify e))
	       #f)
	    (with-input-from-file ifile
	       (lambda ()
		  (let ((w (info->weblet (cons* `(category "hop")
						`(home "/hop")
						(read))
					 :name (basename dir)
					 :url dir)))
		     (weblet-driver-set! w "standard")
		     (weblet-install-set! w (weblet-version w))
		     (weblet-installstamp-set! w 0)
		     (hz-db-add-or-update! w)))))))
   
   (define (sync-dir! dir)
      (when (directory? dir)
	 (sync-weblet! dir (make-file-path dir "etc" "weblet.info"))))
   
   (for-each sync-dir! (directory->path-list (hop-weblets-directory))))
