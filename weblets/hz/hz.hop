;*=====================================================================*/
;*    serrano/prgm/project/hop/2.2.x/weblets/hz/hz.hop                 */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Mar 17 08:37:11 2006                          */
;*    Last change :  Tue Dec 21 11:41:38 2010 (serrano)                */
;*    Copyright   :  2006-10 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP weblets managers.                                            */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hz
   
   (import hz_config
	   hz_xml
	   hz_db
	   hz_weblet
	   hz_install
	   hz_package)
   
   (export hz
	   hz/weblet
	   hz/documentation
	   hz/preferences
	   hz/install
	   hz/run))

;*---------------------------------------------------------------------*/
;*    hz ...                                                           */
;*---------------------------------------------------------------------*/
(define-service (hz)
   (let ((req (current-request)))
      (if (authorized-service? req 'admin)
	  (begin
	     (when (file-exists? (hz-prefs)) (hz-preferences-load (hz-prefs)))
	     (hz-db-init!)
	     (<HZ> req))
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    hz/documentation ...                                             */
;*---------------------------------------------------------------------*/
(define-service (hz/documentation)
   (let* ((file (service-resource hz/documentation "etc/hz.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    hz/preferences ...                                               */
;*---------------------------------------------------------------------*/
(define-service (hz/preferences)
   (let ((req (current-request)))
      (if (not (authorized-service? req 'admin))
	  (user-access-denied req)
	  (<HTML>
	     (<HEAD>
		:title "Hop Hz Preferences"
		:base (service-base-url hz/preferences req)
		:favicon "etc/favicon.png"
		:include "hop-foot" "hop-prefs"
		:css "hz.hss")
	     (<HZ:BODY>
		(<DIV> :id "body"
		   (<HZ:PREFERENCES>)))))))

;*---------------------------------------------------------------------*/
;*    hz/install ...                                                   */
;*---------------------------------------------------------------------*/
(define-service (hz/install #!key url)
   (let ((req (current-request)))
      (if (not (authorized-service? req 'admin))
	  (user-access-denied req)
	  (begin
	     (when (file-exists? (hz-prefs)) (hz-preferences-load (hz-prefs)))
	     (<HZ> req :weblet (hz-install-url url))))))

;*---------------------------------------------------------------------*/
;*    hz/run ...                                                       */
;*---------------------------------------------------------------------*/
(define-service (hz/run #!key url install service #!rest args)
   
   (define (run name version)
      (<HTML>
	 (let ((svc (string-append "/hop/"
				   (if service
				       (string-append name "/" service)
				       name))))
	    ~(set! document.location $(hop-apply-nice-url svc args)))))
   
   (hz-db-init!)
   (multiple-value-bind (name version)
      (package-url-parse url)
      (with-handler
	 (lambda (e)
	    (http-error e))
	 (begin
	    (if install
		(let ((w (or (let ((w (hz-db-find-by-url url)))
				(tprint "HZ-DB-FIND-BY-URL, W=" w)
				(when (and (weblet? w)
					   (directory? (weblet-directory w)))
				   w))
			     (hz-install-url url))))
		   (cond
		      ((weblet? w)
		       (run name version))
		      ((not (pair? w))
		       (http-error w))
		      (else
		       (case (car w)
			  ((404)
			   (http-error (instantiate::&io-file-not-found-error
					  (proc "hz/run")
					  (msg "File not found")
					  (obj url))))
			  (else
			   (http-error (instantiate::&io-error
					  (proc "hz/run")
					  (msg (format "File not found (~a)"
						       (car w)))
					  (obj url))))))))
		(begin
		   (hz-load url)
		   (run name version)))))))

;*---------------------------------------------------------------------*/
;*    hz/check ...                                                     */
;*---------------------------------------------------------------------*/
(define-service (hz/check)
   (instantiate::http-response-file
      (start-line "HTTP/1.1 200 ok")
      (file (service-resource hz "etc/favicon.png"))))

;*---------------------------------------------------------------------*/
;*    The user configuration                                           */
;*---------------------------------------------------------------------*/
(hop-load-rc "hzrc.hop")

