;*=====================================================================*/
;*    serrano/prgm/project/hop/2.4.x/weblets/hz/weblet.hop             */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Nov 19 05:30:17 2007                          */
;*    Last change :  Sat Mar 30 10:59:22 2013 (serrano)                */
;*    Copyright   :  2007-13 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Functions for dealing with weblets.                              */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hz_weblet

   (cond-expand
      (hopc
       (library hop)))

   (import hz_config)
   
   (export (class weblet
	      (stamp::int (default -1) (info "INTEGER"))
	      (driver::bstring (default "hz"))
	      (name::bstring read-only)
	      (version::bstring read-only (info "VERSION"))
	      (install::bstring (default ""))
	      (url read-only)
	      (home read-only)
	      (publisher read-only)
	      (author read-only)
	      (category::bstring read-only)
	      (minhop::bstring read-only)
	      (maxhop::bstring read-only)
	      (depends::pair-nil read-only)
	      (installable::bool (default #t))
	      (title::bstring read-only)
	      (comment::bstring read-only (info "BLOB"))
	      (signature::bstring read-only (default ""))
	      (authorization read-only (default #f))
	      (directory::bstring read-only (default "")))

	   (version-padding ::bstring)
	   (version-unpadding ::bstring)
	   
	   (weblet->list::pair-nil ::weblet)
	   (info->weblet::weblet ::pair #!key name version url authorization (dir "") publisher (stamp -1))))

;*---------------------------------------------------------------------*/
;*    weblet->list ...                                                 */
;*---------------------------------------------------------------------*/
(define (weblet->list w)
   (map (lambda (f)
	   (let ((v ((class-field-accessor f) w)))
	      (if (not (string? v))
		  (if (equal? (class-field-info f) "INTEGER")
		      v
		      (obj->string v))
		  (if (equal? (class-field-info f) "VERSION")
		      (version-padding v)
		      v))))
      (vector->list (class-all-fields (object-class w)))))

;*---------------------------------------------------------------------*/
;*    version-padding ...                                              */
;*---------------------------------------------------------------------*/
(define (version-padding v)
   
   (define (pad4 s)
      (let ((l (string-length s)))
	 (if (<fx l 4)
	     (let ((ns (make-string 4 #\0)))
		(blit-string! s 0 ns (-fx 4 l) l)
		ns)
	     s)))
		
   (let ((m (pregexp-match "([0-9]+).([0-9]+).([0-9]+)(-(?:pre|rc)?[0-9]+)" v)))
      (if m
	  (string-append (pad4 (cadr m)) "." (pad4 (caddr m)) "." (pad4 (cadddr m))
	     (if (string? (car (cddddr m))) (car (cddddr m)) ""))
	  m)))

;*---------------------------------------------------------------------*/
;*    version-unpadding ...                                            */
;*---------------------------------------------------------------------*/
(define (version-unpadding v)
   (pregexp-replace* "[.]0+" (pregexp-replace "^0+" v "") "."))
      
;*---------------------------------------------------------------------*/
;*    info->weblet ...                                                 */
;*    -------------------------------------------------------------    */
;*    Supported weblet.info fields are:                                */
;*                                                                     */
;*      - charset: the charset of the info file                        */
;*      - name: the name of the weblet                                 */
;*      - author:                                                      */
;*      - url: download url                                            */
;*      - home: home page                                              */
;*      - category:                                                    */
;*      - minhop: the minimal Hop version that can run the weblet      */
;*      - maxhop: the maximal Hop version that can run the weblet      */
;*      - depends: dependences list                                    */
;*      - title:                                                       */
;*      - comment:                                                     */
;*      - signature:                                                   */
;*      - directory: the local directory where the weblet is installed */
;*                                                                     */
;*    Extra fields are simply ignored by HZ.                           */
;*---------------------------------------------------------------------*/
(define (info->weblet info::pair #!key name version url authorization (dir "") publisher (stamp -1))

   (define (find key default)
      (cond
	 ((assq key info) => cadr)
	 (else default)))

   (unless (and (list? info)
		(every (lambda (x) (and (list? x) (pair? (cdr x)))) info))
      (raise
       (instantiate::&io-parse-error
	  (proc 'info->weblets)
	  (msg "Illegal info list")
	  (obj info))))

   (let* ((charset (find 'charset (hop-locale)))
	  (cs-convert (charset-converter charset (hop-charset)))
	  (convert (lambda (x)
		      (if (string? x)
			  (cs-convert x)
			  x)))
	  (name (let ((v (find 'name name)))
		   (if (or (not (string? name)) (string=? v name))
		       (convert v)
		       (error "info->weblet"
			      (format "weblet ~a name mismatch" name)
			      (format "~a expected, ~a provided" name v)))))
	  (version (let ((v (find 'version (or version "0.0.0"))))
		      (if (or (not (string? version)) (string=? v version))
			  (convert v)
			  (error "info->weblet"
				 (format "weblet ~a, version mismatch" name)
				 (format "~a expected, ~a provided" version v)))))
	  (url (let ((u (convert (find 'url url))))
		  (cond
		     (u u)
		     (publisher (format "~a/~a-~a.hz"
					(dirname publisher)
					name
					version))
		     (else (error "info->weblet"
				  "Url or Publisher should be given"
				  name))))))
      (instantiate::weblet
	 (name name)
	 (version version)
	 (url url)
	 (publisher publisher)
	 (home (find 'home #unspecified))
	 (author (convert (find 'author #unspecified)))
	 (category (let ((c (convert (find 'category "misc"))))
		      (if (member c (hz-categories))
			  c
			  "other")))
	 (stamp stamp)
	 (minhop (find 'minhop "0"))
	 (maxhop (find 'maxhop "z"))
	 (title (convert (find 'title "")))
	 (comment (convert (find 'comment "")))
	 (authorization authorization)
	 (depends (map (lambda (x) (if (symbol? x) (list x) x))
		     (find 'depends '())))
	 (directory dir))))
