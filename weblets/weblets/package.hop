;*=====================================================================*/
;*    serrano/prgm/project/hop/2.4.x/weblets/weblets/package.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Nov 19 05:30:17 2007                          */
;*    Last change :  Sun Sep  2 11:30:12 2012 (serrano)                */
;*    Copyright   :  2007-12 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Functions for dealing with packages.                             */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module weblets_package

   (import weblets_config)
   
   (export (package-filename? ::bstring)
	   (package-name-parse ::bstring)
	   (package-url-parse ::bstring)
	   (package-info ::bstring)))

;*---------------------------------------------------------------------*/
;*    package-filename? ...                                            */
;*---------------------------------------------------------------------*/
(define (package-filename? name)
   (string-suffix-ci? ".hz" name))

;*---------------------------------------------------------------------*/
;*    package-sans-suffix ...                                          */
;*---------------------------------------------------------------------*/
(define (package-sans-suffix name)
   (substring name 0 (-fx (string-length name) 3)))

;*---------------------------------------------------------------------*/
;*    package-name-parse ...                                           */
;*    -------------------------------------------------------------    */
;*    Parses a package file name and returns the base name, the        */
;*    version number, and release number.                              */
;*    The syntax of a package name is:                                 */
;*       .*-[0-9]+.0-9]+.[0-9]+(-{pre,rc}?[0-9]+)?.hz                  */
;*---------------------------------------------------------------------*/
(define (package-name-parse name)
   (unless (package-filename? name)
      (error 'package-name-parse "Illegal package name, wrong suffix" name))
   (let* ((n (package-sans-suffix (basename name)))
          (index (string-index-right n #\-))
          (vdot (string-index-right n #\.)))
      (cond
         ((not index)
          (error 'package-name-parse "Illegal package name" name))
         ((and (fixnum? vdot) (>fx vdot index))
          ;; a package without release
          (let* ((version (substring n (+fx 1 index) (string-length n)))
                 (base (substring n 0 index)))
	     (values base version)))
         (else
          ;; a package with release
          (let ((vindex (string-index-right n #\- (-fx index 1))))
             (if (not vindex)
                 (error 'package-name-parse "Illegal package name" name)
                 (let* ((version (substring n (+fx 1 vindex) (string-length n)))
                        (base (substring n 0 vindex)))
		    (values base version))))))))

;*---------------------------------------------------------------------*/
;*    package-url-parse ...                                            */
;*---------------------------------------------------------------------*/
(define (package-url-parse url)
   (multiple-value-bind (scheme userinfo host port path)
      (url-parse url)
      (package-name-parse (basename path))))

;*---------------------------------------------------------------------*/
;*    package-info ...                                                 */
;*---------------------------------------------------------------------*/
(define (package-info url)
   
   (define (read-info ip info)
      (let ((len (string-length info)))
	 (let loop ()
	    (let ((h (tar-read-header ip)))
	       (when (isa? h tar-header)
		  (with-access::tar-header h (name type)
		     (case type
			((dir)
			 (loop))
			((normal)
			 (let ((b (tar-read-block h ip))
			       (n name))
			    (if (substring-at? n info (-fx (string-length n) len))
				(charset-convert b (hop-locale) (hop-charset))
				(loop))))
			(else
			 #f))))))))
   
   (multiple-value-bind (base version)
      (package-name-parse (basename url))
      (let* ((ip (open-input-gzip-file url))
	     (path (make-file-path base "etc" "weblet.info")))
	 (unwind-protect
	    (let ((info (read-info ip path)))
	       (or info
		   (format "((name \"~a\") (version \"~a\"))" base version)))
	    (close-input-port ip)))))





