;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/weblets/weblets.hop             */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sat Aug 12 13:33:00 2006                          */
;*    Last change :  Fri Nov 30 14:44:15 2007 (serrano)                */
;*    Copyright   :  2006-07 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP slide weblet                                                 */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module weblets
   
   (import  weblets_config
	    weblets_package)

   (export  weblets
	    weblets/list
	    weblets/synclist
	    weblets/rss))

;*---------------------------------------------------------------------*/
;*    category-filter ...                                              */
;*---------------------------------------------------------------------*/
(define category-filter "all")

;*---------------------------------------------------------------------*/
;*    weblets ...                                                      */
;*---------------------------------------------------------------------*/
(define-service (weblets)
   (<HTML>
      (<HEAD> :favicon (service-resource weblets "etc/favicon.png")
	 :title "Hop Weblets"
	 :jscript (make-file-path (hop-weblets-directory) "hz" "hz-install.js")
	 (<LINK> :rel "alternate" :type "application/rss+xml"
	    :title "Latest HOP weblets"
	    :href "weblets/rss")
	 :css (service-resource weblets "weblets.hss"))
      (<BODY> :id "weblets"
	 (<DIV> :align 'center
	    (<TABLE> :class "weblets"
	       (<COLGROUP> (<COL> :width "0*"))
	       (<TR>
		  (<TD> :class "logo"
		     (<IMG> :class "logo"
			:inline #t
			:src (service-resource weblets "etc/logo.png")))
		  (<TD> :class "content"
		     (<DIV> :id "title" "Hop Weblets")
		     (<WEBLETS-PUBLISHER>)
		     (<WEBLETS> (current-request)))))
	    (<FOOT>
	       (<FOOT-BUTTON>
		  :inline #t
		  :href "weblets/rss"
		  :title "HOP weblets"
		  :src (make-file-path (hop-share-directory)
				       "buttons" "rss.png")))))))

;*---------------------------------------------------------------------*/
;*    weblets/documentation ...                                        */
;*---------------------------------------------------------------------*/
(define-service (weblets/documentation)
   (let* ((file (service-resource weblets/documentation "etc/weblets.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    weblets/preferences ...                                          */
;*---------------------------------------------------------------------*/
(define-service (weblets/preferences)
   "No preferences for this weblet.")

;*---------------------------------------------------------------------*/
;*    weblets/list ...                                                 */
;*---------------------------------------------------------------------*/
(define-service (weblets/list)
   (<HTML>
      (<HEAD> :favicon (service-resource weblets "etc/favicon.png")
	 :title "Hop Weblets"
	 :jscript (make-file-path (hop-weblets-directory) "hz" "hz-install.js")
	 :css (service-resource weblets "weblets.hss"))
      (<BODY>
	 (<WEBLETS> (current-request)))))

;*---------------------------------------------------------------------*/
;*    weblets/synclist ...                                             */
;*---------------------------------------------------------------------*/
(define-service (weblets/synclist url)
   (let ((req (current-request))
	 (url (if (not (string? url)) (weblets-repository))))
      (if (authorized-path? req url)
	  (instantiate::http-response-procedure
	     (proc (lambda (op)
		      (display "(\n" op)
		      (for-each (lambda (p)
				   (let ((l (with-input-from-string
						  (package-info p)
					       read)))
				      (when (pair? l)
					 (write
					  (append! l `((md5 ,(md5sum p))))
					  op)
					 (newline op))))
				(get-weblets url))
		      (display ")\n" op))))
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    weblets/rss ...                                                  */
;*---------------------------------------------------------------------*/
(define-service (weblets/rss)
   (let ((link (format "http://~a:~a"
		       (hop-server-hostname)
		       (hop-port)
		       (hop-service-path weblets))))
      (<RSS>
	 (<RSS:CHANNEL>
	    (<RSS:TITLE> "HOP")
	    (<RSS:LINK> link)
	    (<RSS:DESCRIPTION> "The latest weblets in the HOP repository")
	    (<RSS:LAST-BUILD-DATE> (current-date))
	    (<RSS:GENERATOR> "Hop")
	    (<RSS:IMAGE>
	       (<RSS:URL> (format "http://~a:~a~a"
				  (hop-server-hostname)
				  (hop-port)
				  (service-resource weblets "etc/logo.png")))
	       (<RSS:TITLE> "HOP")
	       (<RSS:DESCRIPTION> "The latest weblets in the HOP repository"))
	    (map (lambda (path)
		    (let* ((info (with-input-from-string (package-info path)
				    read))
			   (title (find-info info 'name ""))
			   (version (find-info info 'version ""))
			   (link (find-info info 'publisher link))
			   (description (find-info info 'title ""))
			   (author (find-info info 'author ""))
			   (date (seconds->date (file-modification-time path))))
		       (<RSS:ITEM>
			  (<RSS:TITLE> (xml-string-encode title) " v" version)
			  (<RSS:LINK> link)
			  (<RSS:DESCRIPTION> description)
			  (<RSS:AUTHOR> author)
			  (<RSS:PUB-DATE> (date->rfc2822-date date)))))
		 (let ((l (sort (lambda (p1 p2)
				   (>=elong (file-modification-time p1)
					    (file-modification-time p2)))
				(get-weblets (weblets-repository)))))
		    (if (> (length l) (weblets-rss-number-of-entries))
			(let ((le (list-ref l (weblets-rss-number-of-entries))))
			   (set-cdr! le '())
			   l)
			l)))))))

;*---------------------------------------------------------------------*/
;*    weblets/filter ...                                               */
;*---------------------------------------------------------------------*/
(define-service (weblets/filter category)
   (set! category-filter category)
   (<WEBLETS-LIST>))
       
;*---------------------------------------------------------------------*/
;*    <WEBLETS> ...                                                    */
;*---------------------------------------------------------------------*/
(define (<WEBLETS> req)
   (list (<WEBLETS-CATEGORIES>)
	 (<DIV> :id "weblets-list" (<WEBLETS-LIST> req))))

;*---------------------------------------------------------------------*/
;*    <WEBLETS-LIST> ...                                               */
;*---------------------------------------------------------------------*/
(define (<WEBLETS-LIST> req)
   (let* ((autho (http-request-authorization req))
	  (authe (if autho (http-decode-authentication autho) #f)))
      (<DIV>
	 (filter-map (lambda (w) (<WEBLET> w authe))
		     (sort string<? (get-weblets (weblets-repository)))))))

;*---------------------------------------------------------------------*/
;*    <WEBLETS-PUBLISHER> ...                                          */
;*---------------------------------------------------------------------*/
(define (<WEBLETS-PUBLISHER>)
   (<DIV> :class "publisher"
      "Publisher URL: " (<SPAN> :id "publisher-url" (weblets-publisher))
      (<DIV> :class "comment"
	 [This URL will get automatically added to your
	     ,(<A> :href "/hop/hz" "hz") publishers list
	     when you install your first weblet.])))

;*---------------------------------------------------------------------*/
;*    <WEBLETS-CATEGORIES> ...                                         */
;*---------------------------------------------------------------------*/
(define (<WEBLETS-CATEGORIES>)
   (<DIV> :class "weblets-category"
      "Weblets category: "
      (<SELECT> :class "weblets-category"
	 :onchange ~(with-hop ($weblets/filter this.value)
		       (lambda (h)
			  (innerHTML-set! "weblets-list" h)))
	 :onkeyup ~(with-hop ($weblets/filter this.value)
		      (lambda (h)
			 (innerHTML-set! "weblets-list" h)))
	 (map (lambda (f)
		 (<OPTION> :selected (string=? f category-filter)
		    :value f
		    (string-capitalize f)))
	      (cons "all" (weblets-categories))))))

;*---------------------------------------------------------------------*/
;*    find-info ...                                                    */
;*---------------------------------------------------------------------*/
(define (find-info info key default)
   (cond
      ((assq key info) => cadr)
      (else default)))

;*---------------------------------------------------------------------*/
;*    <WEBLET> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<WEBLET> path auth)
   
   (let* ((info (with-input-from-string (package-info path) read))
	  (dir (make-file-path (hop-weblets-directory) "hz" "etc"))
	  (srci  (make-file-name dir "hz-install.png"))
	  (srcr (make-file-name dir "hz-run.png"))
	  (url (if (string? auth)
		   (format "http://~a@~a:~a~a" auth (hostname) (hop-port) path)
		   (format "http://~a:~a~a" (hostname) (hop-port) path))))

      (when (or (string=? category-filter "all")
		(string=? (find-info info 'category "other") category-filter))
	 (<DIV> :class "weblet"
	    (<DIV> :class "package"
	       (<SPAN> :class "name"
		  (find-info info 'name (basename path))
		  "-"
		  (find-info info 'version ""))
	       " - " (find-info info 'title ""))
	    (let ((id (symbol->string (gensym))))
	       (<DIV> :class "install" :id id
		  ~(hop_install_weblet $url $srci $srcr $id)))
	    (<DIV> :class "author" (find-info info 'author ""))
	    (let ((minhop (find-info info 'minhop ""))
		  (maxhop (find-info info 'maxhop "")))
	       (<DIV> :class "hop"
		  (when (> (string-length minhop) 0)
		     (<DIV> "Min hop: " (<SPAN> :class "min" minhop)))
		  (when (> (string-length maxhop) 0)
		     (<DIV> "Max hop: " (<SPAN> :class "max" maxhop)))
		  (<DIV> "md5: "
			 (<SPAN> :class "signature" (md5sum path)))))
	    (<DIV> :class "comment" (find-info info 'comment ""))))))

;*---------------------------------------------------------------------*/
;*    get-weblets ...                                                  */
;*---------------------------------------------------------------------*/
(define (get-weblets dir)
   ;; get the whole file list
   (let ((table (make-hashtable)))
      (for-each (lambda (file)
		   (multiple-value-bind (name version)
		      (package-name-parse file)
		      (hashtable-update! table name
					 (lambda (old)
					    (cons (cons version file) old))
					 (list (cons version file)))))
		(directory->list dir))
      ;; get the list
      (map (lambda (f)
	      (make-file-name dir f))
	   (hashtable-map
	    table
	    (lambda (key elements)
	       (cdar (sort (lambda (e1 e2)
			      (let ((v1 (car e1))
				    (v2 (car e2)))
				 (>=fx (string-natural-compare3 v1 v2) 0)))
			   elements)))))))
      
;*---------------------------------------------------------------------*/
;*    The user configuration                                           */
;*---------------------------------------------------------------------*/
(hop-load-rc "webletsrc.hop")
