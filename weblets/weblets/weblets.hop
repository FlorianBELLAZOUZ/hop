;*=====================================================================*/
;*    serrano/prgm/project/hop/2.1.x/weblets/weblets/weblets.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sat Aug 12 13:33:00 2006                          */
;*    Last change :  Fri Mar 26 09:58:01 2010 (serrano)                */
;*    Copyright   :  2006-10 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP weblets distribution weblet.                                 */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module weblets
   
   (import  weblets_config
	    weblets_package
	    weblets_homepage
	    weblets_markup)

   (export  weblets
	    weblets/list
	    weblets/synclist
	    weblets/rss
	    (get-weblets dir #!optional weblet)))

;*---------------------------------------------------------------------*/
;*    weblets ...                                                      */
;*---------------------------------------------------------------------*/
(define-service (weblets)
   (<HTML>
      (<HEAD> :favicon (service-resource weblets "etc/favicon.png")
	 :title "Hop Weblets"
	 :jscript (make-file-path (hop-weblets-directory) "hz" "hz-install.js")
	 (<LINK> :rel "alternate" :type "application/rss+xml"
	    :title "Latest HOP weblets"
	    :href "weblets/rss")
	 :css (service-resource weblets "weblets.hss"))
      (<BODY> :id "weblets"
	 (<DIV> :align 'center
	    (<TABLE> :class "weblets"
	       (<COLGROUP> (<COL> :width "0*"))
	       (<TR>
		  (<TD> :class "logo"
		     (<IMG> :class "logo"
			:inline #t
			:src (service-resource weblets "etc/logo.png")))
		  (<TD> :class "content"
		     (<DIV> :id "title" "Hop Weblets")
		     (<WEBLETS-PUBLISHER>)
		     (<WEBLETS> (current-request) "all"))))
	    (<FOOT>
	       (<FOOT-BUTTON>
		  :inline #t
		  :href "weblets/rss"
		  :title "HOP weblets"
		  :src (make-file-path (hop-share-directory)
				       "buttons" "rss.png")))))))

;*---------------------------------------------------------------------*/
;*    weblets/documentation ...                                        */
;*---------------------------------------------------------------------*/
(define-service (weblets/documentation)
   (let* ((file (service-resource weblets/documentation "etc/weblets.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    weblets/preferences ...                                          */
;*---------------------------------------------------------------------*/
(define-service (weblets/preferences)
   "No preferences for this weblet.")

;*---------------------------------------------------------------------*/
;*    weblets/list ...                                                 */
;*---------------------------------------------------------------------*/
(define-service (weblets/list)
   (<HTML>
      (<HEAD> :favicon (service-resource weblets "etc/favicon.png")
	 :title "Hop Weblets"
	 :jscript (make-file-path (hop-weblets-directory) "hz" "hz-install.js")
	 :css (service-resource weblets "weblets.hss"))
      (<BODY>
	 (<WEBLETS> (current-request) "all"))))

;*---------------------------------------------------------------------*/
;*    weblets/download ...                                             */
;*    -------------------------------------------------------------    */
;*    We use a keyworded argument for WEBLETS/DOWNLOAD in order        */
;*    to allow Hop to generate a nice url. This is required by         */
;*    HZ that would otherwise be confused by the package name.         */
;*---------------------------------------------------------------------*/
(define-service (weblets/download #!key weblet)
   (let ((path (make-file-name (weblets-repository) weblet))
	 (req (current-request)))
      (cond
	 ((not (authorized-path? req path))
	  (user-access-denied req))
	 ((not (file-exists? path))
	  (http-file-not-found weblet))
	 (else
	  (instantiate::http-response-file
	     (file path))))))

;*---------------------------------------------------------------------*/
;*    update-alist! ...                                                */
;*---------------------------------------------------------------------*/
(define (update-alist! key val l)
   (let ((c (assq key l)))
      (if (pair? c)
	  (begin
	     (set-car! (cdr c) val)
	     l)
	  (cons (list key val) l))))

;*---------------------------------------------------------------------*/
;*    add-alist ...                                                    */
;*---------------------------------------------------------------------*/
(define (add-alist key val l)
   (let ((c (assq key l)))
      (if (pair? c)
	  l
	  (cons (list key val) l))))

;*---------------------------------------------------------------------*/
;*    make-download-url ...                                            */
;*---------------------------------------------------------------------*/
(define (make-download-url req p)
   (with-access::http-request req (scheme host port)
      (format "~a://~a:~a~a"
	      (if (eq? scheme '*) "http" scheme)
	      host
	      port
	      (weblets/download :weblet (basename p)))))

;*---------------------------------------------------------------------*/
;*    weblets/synclist ...                                             */
;*---------------------------------------------------------------------*/
(define-service (weblets/synclist #!optional url)
   (let* ((req (current-request))
	  (repo (if (not (string? url)) (weblets-repository))))
      (if (authorized-path? req repo)
	  (instantiate::http-response-procedure
	     (proc (lambda (op)
		      (display "(\n" op)
		      (for-each (lambda (p)
				   (let ((l (with-input-from-string
						  (package-info p)
					       read))
					 (url (make-download-url req p)))
				      (when (pair? l)
					 (let ((l (add-alist 'url url l)))
					    (write
					     (append! l `((md5 ,(md5sum p))))
					     op))
					 (newline op))))
				(get-weblets repo))
		      (display ")\n" op))))
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    weblets/rss ...                                                  */
;*---------------------------------------------------------------------*/
(define-service (weblets/rss)
   (let ((link (format "http://~a:~a"
		       (hop-server-hostname)
		       (hop-port)
		       (hop-service-path weblets))))
      (<RSS>
	 (<RSS:CHANNEL>
	    (<RSS:TITLE> "HOP")
	    (<RSS:LINK> link)
	    (<RSS:DESCRIPTION> "The latest weblets in the HOP repository")
	    (<RSS:LAST-BUILD-DATE> (current-date))
	    (<RSS:GENERATOR> "Hop")
	    (<RSS:IMAGE>
	       (<RSS:URL> (format "http://~a:~a~a"
				  (hop-server-hostname)
				  (hop-port)
				  (service-resource weblets "etc/logo.png")))
	       (<RSS:TITLE> "HOP")
	       (<RSS:DESCRIPTION> "The latest weblets in the HOP repository"))
	    (map (lambda (path)
		    (let* ((info (with-input-from-string (package-info path)
				    read))
			   (title (find-info info 'name ""))
			   (version (find-info info 'version ""))
			   (link (find-info info 'publisher link))
			   (description (find-info info 'title ""))
			   (author (find-info info 'author ""))
			   (date (seconds->date (file-modification-time path))))
		       (<RSS:ITEM>
			  (<RSS:TITLE> (xml-string-encode title) " v" version)
			  (<RSS:LINK> link)
			  (<RSS:DESCRIPTION> description)
			  (<RSS:AUTHOR> author)
			  (<RSS:PUB-DATE> (date->rfc2822-date date)))))
		 (let ((l (sort (lambda (p1 p2)
				   (>=elong (file-modification-time p1)
					    (file-modification-time p2)))
				(get-weblets (weblets-repository)))))
		    (if (> (length l) (weblets-rss-number-of-entries))
			(let ((le (list-ref l (weblets-rss-number-of-entries))))
			   (set-cdr! le '())
			   l)
			l)))))))

;*---------------------------------------------------------------------*/
;*    get-weblets ...                                                  */
;*---------------------------------------------------------------------*/
(define (get-weblets dir #!optional weblet)
   ;; get the whole file list
   (let ((table (make-hashtable)))
      (for-each (lambda (file)
		   (with-handler
		      (lambda (e)
			 #f)
		      (multiple-value-bind (name version)
			 (package-name-parse file)
			 (when (or (not weblet) (string=? weblet name))
			    (hashtable-update! table name
					       (lambda (old)
						  (cons (cons version file) old))
					       (list (cons version file)))))))
		(directory->list dir))
      ;; get the list
      (map (lambda (f)
	      (make-file-name dir f))
	   (hashtable-map
	    table
	    (lambda (key elements)
	       (cdar (sort (lambda (e1 e2)
			      (let ((v1 (car e1))
				    (v2 (car e2)))
				 (>=fx (string-natural-compare3 v1 v2) 0)))
			   elements)))))))

;*---------------------------------------------------------------------*/
;*    The user configuration                                           */
;*---------------------------------------------------------------------*/
(hop-load-rc "webletsrc.hop")
