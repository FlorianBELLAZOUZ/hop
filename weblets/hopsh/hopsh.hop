;*=====================================================================*/
;*    serrano/prgm/project/hop/2.3.x/weblets/hopsh/hopsh.hop           */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Sat Dec  3 18:37:43 2011 (serrano)                */
;*    Copyright   :  2005-11 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP hopsh weblet                                                 */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module weblet_hopsh)

;*---------------------------------------------------------------------*/
;*    hopsh ...                                                        */
;*    -------------------------------------------------------------    */
;*    HOPSH implements its own access policy because, it is too        */
;*    dangerous to execute an expression if no authentication is       */
;*    provided.                                                        */
;*---------------------------------------------------------------------*/
(define-service (hopsh #!key exp)
   (let ((req (current-request)))
      (if (authorized-service? req 'hopsh)
	  (if (not exp)
	      (<HOPSH> req)
	      (with-handler
		 (lambda (e)
		    (with-error-to-string
		       (lambda ()
			  (display "*** ERROR:" (current-error-port))
			  (error-notify e))))
		 (eval exp)))
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    hopsh ...                                                        */
;*---------------------------------------------------------------------*/
(define-service (hopsh/string #!key exp)
   (let ((req (current-request)))
      (if (authorized-service? req 'hopsh)
	  (if (not exp)
	      (<HOPSH> req)
	      (with-handler
		 (lambda (e)
		    (with-error-to-string
		       (lambda ()
			  (display "*** ERROR:" (current-error-port))
			  (error-notify e))))
		 (eval (with-input-from-string exp read))))
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    hopsh/documentation ...                                          */
;*---------------------------------------------------------------------*/
(define-service (hopsh/documentation)
   (let* ((file (service-resource hopsh/documentation "etc/hopsh.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    <HOPSH> ...                                                      */
;*---------------------------------------------------------------------*/
(define (<HOPSH> req)
   (let* ((r (<PRE> :id "result" "&#160;"))
	  (i (<INPUT> :type 'text :name "expression" :size 90
		:onkeyup ~(when (memq event.which '(10 13))
			     (with-hop ($hopsh/string :exp this.value)
				(lambda (h)
				   (innerHTML-set! $r h)))))))
      (<HTML>
	 (<HEAD> :title "Hop Sh"
	    :base (service-base-url hopsh req)
	    :favicon "etc/favicon.png"
	    :include "hop-foot"
	    :css "hopsh.hss")
	 (<BODY>
	    (<DIV>
	       :align "center"
	       (<TABLE>
		  :class "hopsh"
		  (<TR>
		     (<TD>
			(<IMG> :src "etc/logo.png"))
		     (<TD>
			(<TABLE>
			   (<TR>
			      (<TD> :colspan 2
				 (<DIV> :id "title" "Hop Shell")))
			   (<TR>
			      (<TD> "$ ")
			      (<TD> i))
			   (<TR>
			      (<TD>
				 :colspan 2
				 :align 'left
				 (<BUTTON> :onclick
				    ~(let ((i $i))
					(with-hop ($hopsh/string :exp i.value)
					   (lambda (h)
					      (innerHTML-set! $r h))))
				    "Evaluate")))
			   (<TR>
			      (<TD> :colspan 2
				 :align 'left
				 r)))))))
	    (<FOOT>)))))
