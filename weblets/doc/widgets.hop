;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/doc/widgets.hop                 */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Apr 10 08:19:21 2006                          */
;*    Last change :  Thu Nov 29 07:27:58 2007 (serrano)                */
;*    Copyright   :  2006-07 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    The DOC widgets.                                                 */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hopdoc_widgets

   (import hopdoc_config
	   hopdoc_wiki
	   hopdoc_api
	   hopdoc_services)
   
   (export (<DOC> . obj)
	   (<POPUP> ::bstring)
	   (<SEARCH-BAR> . obj)
	   (char->offset c)
	   (<SEARCH-POPUP-MENU> table i)
	   (<SEE-ALSO-LIST> id lst)
	   (<EXAMPLE> . expr)))

;*---------------------------------------------------------------------*/
;*    <DOC> ...                                                        */
;*---------------------------------------------------------------------*/
(define-xml-compound <DOC> ((script #f)
			    body)
   (<HTML>
      (<HEAD>
	 :title "Hop documentation center (APIs &amp; libraries)"
	 :include "hop-notepad" "hop-tree" "hop-sorttable" "hop-foldlist" 
	 :include "hop-window" "hop-fx"
	 :favicon (string-append (doc-dir) "/etc/favicon.png")
	 :css (string-append (doc-dir) "/doc.hss")
	 :jscript (string-append (doc-dir) "/doc.scm")
	 script)
      (<BODY>
	 (<DIV> :align "center"
	    (<TABLE> :class "doc"
	       (<TR>
		  (<TD> :valign "top"
		     (<IMG> :class "logo"
			:alt "Hop Doc logo"
			:src (string-append (doc-dir) "/etc/logo.png")))
		  (<TD> :valign "top"
		     (<TABLE>
			(<TR>
			   (<TD>
			      (<DIV> :id "title" "Hop Documentation Center")))
			(<TR>
			   (<TD>
			      body)))))))
	 (<FOOT>
	    (<FOOT-BUTTON>
	       :href "http://www.gnu.org/licenses/gpl.html"
	       :title "Gnu GPL"
	       :src "gpl.png")
	    (<FOOT-BUTTON>
	       :href "http://www.inria.fr/mimosa"
	       :title "INRIA"
	       :src "inria.png")
	    (<FOOT-BUTTON>
	       :href "http://validator.w3.org/check/referer"
	       :title "Valid CSS"
	       :src "html401.png")
	    (<FOOT-BUTTON>
	       :href "http://jigsaw.w3.org/css-validator/check/referer"
	       :title "Valid CSS"
	       :src "css.png")))))

;*---------------------------------------------------------------------*/
;*    <POPUP> ...                                                      */
;*---------------------------------------------------------------------*/
(define (<POPUP> id)
   (<DIV> :class "popup-menu" :id id
      ""))

;*---------------------------------------------------------------------*/
;*    <SEARCH-MENU> ...                                                */
;*---------------------------------------------------------------------*/
(define (<SEARCH-MENU> lbl click keypress popup)
   
   (define popup-letter-menu
      ~(let ((el this)
	     (menu $popup))
	  (unless (eq? event.preventDefault #unspecified)
	     (event.preventDefault))
	  (unless (eq? event.stopPropagation #unspecified)
	     (event.stopPropagation))
	  (with-hop ($click this.innerHTML)
	     (lambda (h)
		(if (> h.length 0)
		    (begin
		       (set! menu.innerHTML h)
		       (node-style-set! menu
					:top
					(string-append
					 (number->string
					  (+ 12 (hop_element_y el)))
					 "px"))
		       (node-style-set! menu
					:left
					(string-append
					 (number->string
					  (- (hop_element_x el) 10))
					 "px"))
		       (node-style-set! menu :display "block"))
		    (node-style-set! menu :display "none"))))
	  #f))
   
   (let ((size (-fx 22 (string-length lbl))))
      (<TABLE> :class "search-menu"
	 (<TR>
	    (<TD> :width "100%"
	       (<TABLE> :class "search-menu-input" :width "100%"
		  (<TR>
		     (<TD> :class "search-menu-label"
			:valign "middle"
			lbl ": ")
		     (<TD> :valign "bottom"
			(<INPUT> :style "width: 100%"
			   :type "text"
			   :onkeyup ~(if (= event.keyCode 13)
					 (window-open :id "doc/search"
					    :parent document.body
					    :src ($keypress this.value)
					    :class "iwindow-menu"
					    :width 640 :height 480
					    :left 
					    (let ((w (if (number? window.innerWidth)
							 window.innerWidth
							 document.documentElement.clientWidth)))
					       (- w 700))
					    :top 10))
			   :title "Hit [return] to search"))))))
	 (<TR>
	    (<TD>
	       (<TABLE> :class "search-menu-menu"
		  (<COLGROUP> :span 27 :width "1em")
		  (<TR>
		     (map (lambda (i)
			     (<TD> :class "search-letter"
				:onmousedown popup-letter-menu
				(string (integer->char i))))
			  (cons (char->integer #\?)
				(iota 26 (char->integer #\A)))))))))))

;*---------------------------------------------------------------------*/
;*    <SEARCH-BAR> ...                                                 */
;*---------------------------------------------------------------------*/
(define (<SEARCH-BAR> . obj)
   (let ((popup (<POPUP> (xml-make-id)))
	 (width (round (* 100 (/ 1 (/ (length obj) 2))))))
      (<DIV>
	 :class "search-bar"
	 popup
	 (<TABLE>
	    :class "develop-menu"
	    (<COLGROUP> :span 3 :width (format "~a%" width))
	    (<TR>
	       (map (lambda (el)
		       (<TD>
			  (<SEARCH-MENU> (car el) (cadr el) (caddr el) popup)))
		    (list-split obj 3)))))))

;*---------------------------------------------------------------------*/
;*    char->offset ...                                                 */
;*---------------------------------------------------------------------*/
(define (char->offset c)
   (cond
      ((and (char>=? c #\A) (char<=? c #\Z))
       (+fx 1 (-fx (char->integer c) (char->integer #\A))))
      ((and (char>=? c #\a) (char<=? c #\z))
       (+fx 1 (-fx (char->integer c) (char->integer #\a))))
      (else
       0)))

;*---------------------------------------------------------------------*/
;*    <SEARCH-POPUP-MENU> ...                                          */
;*---------------------------------------------------------------------*/
(define (<SEARCH-POPUP-MENU> table pagearea i)
   (let ((es (vector-ref table (char->offset (string-ref i 0))))
	 (id (xml-make-id)))
      (when (pair? es)
	 (<TABLE>
	    :class "popup-menu"
	    :id id
	    :onmouseup ~(let* ((n (document.getElementById $id))
			       (p n.parentNode))
			   (set! p.style.display "none"))
	    (map (lambda (entry)
		    (let ((api (cdr entry))
			  (el (car entry)))
		       (<TR>
			  (<TD>
			     (<TT> :onmouseup
				~(select-api-doc $doc/api $api $pagearea $el)
				(html-string-encode el))))))
		 (sort es
		       (lambda (a b)
			  (string-ci<? (car a) (car b)))))))))

;*---------------------------------------------------------------------*/
;*    <SEE-ALSO-LIST> ...                                              */
;*---------------------------------------------------------------------*/
(define (<SEE-ALSO-LIST> id lst)
   (define (link f)
      (<SPAN> :class "href"
	 :title "View documentation"
	 :onclick ~(let ((el (dom-get-element-by-id document $id)))
		      (select-api-doc $doc/api $f el #unspecified))
	 (doc-page->name f)))
   (<DIV>
      :class "see-also" 
      (cond
	 ((null? lst)
	  "")
	 ((null? (cdr lst))
	  (link (car lst)))
	 (else
	  (let loop ((l (sort lst string<?)))
	     (if (null? (cdr l))
		 (list (link (car l)))
		 (cons* (link (car l)) ", " (loop (cdr l)))))))))

;*---------------------------------------------------------------------*/
;*    <RUN> ...                                                        */
;*---------------------------------------------------------------------*/
(define (<RUN> id)
   (<BUTTON>
      :onclick ~(let ((frame (document.createElement "iframe"))
		      (t (document.getElementById $id)))
		   (set! frame.src ($doc/example t.value))
		   (node-style-set! frame "width" "100%")
		   (node-style-set! frame "height" "100%")
		   (node-style-set! frame "border-width" "0")
		   (window-open :id "doc/example"
		      :src frame
		      :parent document.body
		      :width 640 :height 480
		      :left (+ (event-mouse-x event) 100)
		      :top (- (event-mouse-y event) 100)))
      "Run"))

;*---------------------------------------------------------------------*/
;*    <EDIT> ...                                                       */
;*---------------------------------------------------------------------*/
(define (<EDIT> id1 id2)
   (let ((id (xml-make-id 'edit)))
      (<BUTTON> :id id
	 :onclick ~(let ((e1 (document.getElementById $id1))
			 (e2 (document.getElementById $id2))
			 (b (document.getElementById $id)))
		      (stop-event-propagation event #t)
		      (if b.edit
			  (begin
			     (set! b.edit #f)
			     (set! b.innerHTML "cancel")
			     (set! e2.style.width
				   (string-append e1.offsetWidth "px"))
			     (set! e2.style.height
				   (string-append e1.offsetHeight "px"))
			     (set! e2.style.top
				   (string-append e1.offsetTop "px"))
			     (set! e2.style.left
				   (string-append e1.offsetLeft "px"))
			     (set! e2.style.display "block")
			     (set! e1.style.display "none"))
			  (begin
			     (set! b.edit #t)
			     (set! b.innerHTML "edit")
			     (set! e1.style.display "block")
			     (set! e2.style.display "none"))))
	 "Edit")))

;*---------------------------------------------------------------------*/
;*    <EXAMPLE> ...                                                    */
;*---------------------------------------------------------------------*/
(define (<EXAMPLE> . code)
   (let ((id1 (xml-make-id 'pre))
	 (id2 (xml-make-id 'textarea))
	 (api-code (decorate-api-wiki-code code)))
      (list
       (<RUN> id2)
       (<EDIT> id1 id2)
       (<DIV> :align "center"
	  (<TEXTAREA> :class "example" :id id2 code)
	  (<DIV> :class "example"
	     (<PRE> :class "example" :id id1 api-code "\n"))))))
