;*=====================================================================*/
;*    serrano/prgm/project/hop/2.1.x/weblets/doc/api.hop               */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Apr 10 08:28:08 2006                          */
;*    Last change :  Fri Mar  5 18:57:33 2010 (serrano)                */
;*    Copyright   :  2006-10 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    The developper documentation                                     */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hopdoc_api
   
   ~(import hopdoc_client)
   
   (import  hopdoc_widgets
	    hopdoc_config
	    hopdoc_wiki
	    hopdoc_search)
   
   (export  (setup-api-tables!)
	    (index-table)
	    (doc-api-syntax)
	    doc/api
	    doc/api-sans-title
	    (<API>)
	    (decorate-api-code code)
	    (decorate-api-wiki-code code)
	    (<APIREF> key api #!key (pad "api"))
	    (<OBJ->STRING> expr)
	    (markup-parser k)
	    (server-parser k)
	    (client-parser k)
	    (class-parser k)
	    (select-api-pad-on-load weblet)))

;*---------------------------------------------------------------------*/
;*    <API> ...                                                        */
;*---------------------------------------------------------------------*/
(define (<API>)
   (let ((pagearea (<DIV> :class "pagearea" :id "pad-api" (<TOC>))))
      (<DIV> :class "api"
         (<SEARCH-BAR>
            "markup"
            (service (i) (get-markups i pagearea)) doc/api-search-markup
            "server"
            (service (i) (get-servers i pagearea)) doc/api-search-server
            "client"
            (service (i) (get-clients i pagearea)) doc/api-search-client)
         pagearea)))

;*---------------------------------------------------------------------*/
;*    <TOC> ...                                                        */
;*---------------------------------------------------------------------*/
(define (<TOC>)
   (let ((l (search-docs (doc-api-dir))))
      (if (pair? l)
	  (let ((l2 (list-split! l
				 (inexact->exact (ceiling (/ (length l) 2)))
				 "&#160;")))
	     (<TABLE> :class "api-index"
		(<COLGROUP> :span 2 :width "50%")
		(map (lambda (a b) (<TR> (<TD> a) (<TD> b)))
		     (car l2) (cadr l2))))
	  "API description")))

;*---------------------------------------------------------------------*/
;*    *markup-menu-table* ...                                          */
;*---------------------------------------------------------------------*/
(define *server-mutex* (make-mutex "hopdoc-server"))
(define *server-time* #e0)

(define *markup-menu-table* #unspecified)
(define *markup-table* #unspecified)

(define *server-menu-table* #unspecified)
(define *server-table* #unspecified)

(define *client-menu-table* #unspecified)
(define *client-table* #unspecified)

(define *class-table* #unspecified)

(define *see-also-table* #unspecified)

(define *index-table* #unspecified)

;*---------------------------------------------------------------------*/
;*    index-table ...                                                  */
;*---------------------------------------------------------------------*/
(define (index-table)
   *index-table*)

;*---------------------------------------------------------------------*/
;*    doc-api-syntax ...                                               */
;*---------------------------------------------------------------------*/
(define (doc-api-syntax)
   (setup-api-tables!)
   *server-syntax*)

;*---------------------------------------------------------------------*/
;*    doc/api ...                                                      */
;*---------------------------------------------------------------------*/
(define-service (doc/api page)
   (setup-api-tables!)
   (let ((s (make-wiki-request-syntax *server-syntax* make-api-title)))
      (if (or (eq? page #unspecified) (equal? page ""))
	  (<TOC>)
	  (doc-page page s))))

;*---------------------------------------------------------------------*/
;*    doc/api-sans-title ...                                           */
;*---------------------------------------------------------------------*/
(define-service (doc/api-sans-title page)
   (setup-api-tables!)
   (let ((s (make-wiki-request-syntax *server-syntax* (lambda (t) t))))
      (if (or (eq? page #unspecified) (equal? page ""))
	  (<TOC>)
	  (doc-page page s))))

;*---------------------------------------------------------------------*/
;*    make-api-title ...                                               */
;*---------------------------------------------------------------------*/
(define (make-api-title t)
   (list (<SPAN> :class "api-toc"
	    :title "View APIs table of contents"
	    :onclick ~(let ((el (dom-get-element-by-id document "pad-api")))
			 (select-api-doc $doc/api "" el #f))
	    "APIs")
	 " - "
	 t))

;*---------------------------------------------------------------------*/
;*    doc/api-search-markup ...                                        */
;*---------------------------------------------------------------------*/
(define-service (doc/api-search-markup value)
   (setup-api-tables!)
   (search-table value "pad-api" *markup-table* 1 6))
   
;*---------------------------------------------------------------------*/
;*    doc/api-search-server ...                                        */
;*---------------------------------------------------------------------*/
(define-service (doc/api-search-server value)
   (setup-api-tables!)
   (search-table value "pad-api" *server-table* 0 3))
   
;*---------------------------------------------------------------------*/
;*    doc/api-search-client ...                                        */
;*---------------------------------------------------------------------*/
(define-service (doc/api-search-client value)
   (setup-api-tables!)
   (search-table value "pad-api" *client-table* 0 3))

;*---------------------------------------------------------------------*/
;*    select-api-pad ...                                               */
;*---------------------------------------------------------------------*/
(define (select-api-pad api k #!key (pad "api"))
   ~(select-api-pad $api $k $pad))

;*---------------------------------------------------------------------*/
;*    hash-parser ...                                                  */
;*---------------------------------------------------------------------*/
(define (hash-parser k table class)
   (let ((o (hashtable-get table k)))
      (when o
	 (<SPAN> :class (string-append "href " class)
	    :title "View online documentation"
	    :onclick (select-api-pad o k)
	    (html-string-encode k)))))

;*---------------------------------------------------------------------*/
;*    markup-parser ...                                                */
;*---------------------------------------------------------------------*/
(define (markup-parser k)
   (hash-parser k *markup-table* "href-markup"))

;*---------------------------------------------------------------------*/
;*    server-parser ...                                                */
;*---------------------------------------------------------------------*/
(define (server-parser k)
   (hash-parser k *server-table* "href-server"))

;*---------------------------------------------------------------------*/
;*    client-parser ...                                                */
;*---------------------------------------------------------------------*/
(define (client-parser k)
   (hash-parser k *client-table* "href-client"))

;*---------------------------------------------------------------------*/
;*    class-parser ...                                                 */
;*---------------------------------------------------------------------*/
(define (class-parser k)
   (let ((e (string-index k ":"))
	 (l (string-length k)))
      (when (and (fixnum? e)
		 (>fx e -1)
		 (<fx e (-fx l 1))
		 (char=? (string-ref k (+fx e 1)) #\:))
	 (let* ((ty (substring k (+fx e 2) l))
		(ol (hashtable-get *class-table* ty)))
	    (when ol
	       (<SPAN> :class "doc-type doc-link"
		       :title "View class definition"
		       :onclick (select-api-pad ol ty)
		       k))))))

;*---------------------------------------------------------------------*/
;*    *api-grammar* ...                                                */
;*---------------------------------------------------------------------*/
(define *api-grammar*
   (regular-grammar ((letter (in "_-<>!?%" ("azAZ09")))
		     (sep (out "_-<>!?%" ("azAZ09")))
		     res)
      ((: ";;" (* all))
       (let ((k (the-string)))
	  (<SPAN> :class "code-comment" k)))
      ((+ (or letter (: #\/ (out #\/))))
       (let ((k (the-string)))
	  (set! res (cons (or (markup-parser k)
			      (server-parser k)
			      (client-parser k)
			      (html-string-encode k))
			  res))
	  (ignore)))
      ((+ sep)
       (set! res (cons (the-string) res))
       (ignore))
      (else
       (reverse! res))))

;*---------------------------------------------------------------------*/
;*    decorate-api-string ...                                          */
;*---------------------------------------------------------------------*/
(define (decorate-api-string port-or-string)
   (with-input-from-string port-or-string
      (lambda ()
	 (read/rp *api-grammar* (current-input-port) '()))))

;*---------------------------------------------------------------------*/
;*    decorate-api-code ...                                            */
;*---------------------------------------------------------------------*/
(define (decorate-api-code expr)
   (cond
      ((string? expr)
       (decorate-api-string expr))
      ((pair? expr)
       (map decorate-api-code expr))
      (else
       expr)))

;*---------------------------------------------------------------------*/
;*    decorate-api-wiki-code ...                                       */
;*---------------------------------------------------------------------*/
(define (decorate-api-wiki-code expr)
   (cond
      ((string? expr)
       (decorate-api-string (html-string-decode expr)))
      ((pair? expr)
       (map decorate-api-wiki-code expr))
      (else
       expr)))

;*---------------------------------------------------------------------*/
;*    skip-spaces ...                                                  */
;*---------------------------------------------------------------------*/
(define (skip-spaces str)
   (let ((len (string-length str)))
      (let loop ((i 0))
	 (cond
	    ((=fx i len)
	     str)
	    ((char=? (string-ref str i) #\Space)
	     (loop (+fx i 1)))
	    ((=fx i 0)
	     str)
	    (else
	     (substring str i len))))))

;*---------------------------------------------------------------------*/
;*    *server-syntax* ...                                              */
;*---------------------------------------------------------------------*/
(define *server-syntax*
   (duplicate::wiki-syntax (doc-wiki-syntax)
      (plugins (lambda (id)
		  (case id
		     ((<see-also>)
		      <SEE-ALSO>)
		     ((<markup> <parameter> <preference> <function> <class>)
		      (let* ((s (symbol->string id))
			     (c (substring s 1 (-fx (string-length s) 1))))
			 (lambda (port title expr)
			    (list (<A> :id (skip-spaces title)
				       :name (string-append "server:" title)
				       (<DIV> :class c expr))))))
		     ((<procedure>)
		      (lambda (port title expr)
			 (list (<A> :id (skip-spaces title)
				    :name (string-append "client:" title)
				    (<DIV> :class "procedure" expr)))))
		     ((<server>)
		      (lambda (port title expr)
			 (<DIV> :class "server" expr)))
		     ((<client>)
		      (lambda (port title expr)
			 (<DIV> :class "client" expr)))
		     ((<style>)
		      (lambda (port title expr)
			 (<DIV> :class "style" expr)))
		     (else
		      ((wiki-syntax-plugins (doc-wiki-syntax)) id)))))
      (tt (wiki-tt-parser 
	   (lambda (k)
	      (or (markup-parser k)
		  (server-parser k)
		  (client-parser k)))))
      (keyword (lambda x
		  (<SPAN> :class "doc-keyword" x)))
      (pre (lambda x
	      (<DIV>
		 :align "center"
		 (<PRE> (decorate-api-wiki-code x)))))
      (type (lambda x
	       (if (and (null? (cdr x)) (string? (car x)))
		   (let* ((s (html-string-decode (car x)))
			  (c (string-ref s (-fx (string-length s) 1))))
		      (case c
			 ((#\, #\; #\: #\.)
			  (let* ((s2 (substring s 0 (-fx (string-length s) 1)))
				 (p (class-parser s2)))
			     (if p
				 (list p (string c))
				 (<SPAN> :class "doc-type" x))))
			 (else
			  (or (class-parser s) (<SPAN> :class "doc-type" x)))))
		   (<SPAN> :class "doc-type"  x))))))

;*---------------------------------------------------------------------*/
;*    setup-api-tables! ...                                            */
;*---------------------------------------------------------------------*/
(define (setup-api-tables!)
   (with-lock *server-mutex*
      (lambda ()
	 (unless (and (vector? *markup-menu-table*)
		      (=elong *server-time*
			      (file-modification-time (doc-api-dir))))
	    (multiple-value-bind (menu table)
	       (make-doc-tables 1 "<markup>")
	       (set! *markup-menu-table* menu)
	       (set! *markup-table* table))
	    (multiple-value-bind (menu table)
	       (make-doc-tables 0
				"<parameter>"
				"<preference>"
				"<function>"
				"<class>")
	       (set! *server-menu-table* menu)
	       (set! *server-table* table))
	    (multiple-value-bind (_ table)
	       (make-doc-tables 0 "<class>")
	       (set! *class-table* table))
	    (multiple-value-bind (menu table)
	       (make-doc-tables 0 "<procedure>")
	       (set! *client-menu-table* menu)
	       (set! *client-table* table))
	    (set! *index-table* (make-hashtable))
	    (hashtable-for-each *markup-table*
				(lambda (k o)
				   (unless (hashtable-get *index-table* k)
				      (hashtable-put! *index-table* k
						      (list 1 o)))))
	    (hashtable-for-each *server-table*
				(lambda (k o)
				   (unless (hashtable-get *index-table* k)
				      (hashtable-put! *index-table* k
						      (list 0 o)))))
	    (hashtable-for-each *class-table*
				(lambda (k o)
				   (unless (hashtable-get *index-table* k)
				      (hashtable-put! *index-table* k
						      (list 0 o)))))
	    (hashtable-for-each *client-table*
				(lambda (k o)
				   (unless (hashtable-get *index-table* k)
				      (hashtable-put! *index-table* k
						      (list 0 o)))))))))

;*---------------------------------------------------------------------*/
;*    get-markups ...                                                  */
;*---------------------------------------------------------------------*/
(define (get-markups i pagearea)
   (setup-api-tables!)
   (<SEARCH-POPUP-MENU> *markup-menu-table* pagearea i))

;*---------------------------------------------------------------------*/
;*    get-servers ...                                                  */
;*---------------------------------------------------------------------*/
(define (get-servers i pagearea)
   (setup-api-tables!)
   (<SEARCH-POPUP-MENU> *server-menu-table* pagearea i))

;*---------------------------------------------------------------------*/
;*    get-clients ...                                                  */
;*---------------------------------------------------------------------*/
(define (get-clients i pagearea)
   (setup-api-tables!)
   (<SEARCH-POPUP-MENU> *client-menu-table* pagearea i))

;*---------------------------------------------------------------------*/
;*    <SEE-ALSO> ...                                                   */
;*---------------------------------------------------------------------*/
(define (<SEE-ALSO> port keyword body)
   (let* ((name (input-port-name port))
	  (dir (dirname name)))
      (with-lock *server-mutex*
	 (lambda ()
	    (when (or (not (=elong *server-time* (file-modification-time dir)))
		      (not (hashtable? *see-also-table*)))
	       (set! *see-also-table* (make-hashtable)))
	    (let ((old (hashtable-get *see-also-table* keyword)))
	       (or old
		   (let ((so (see-also name dir keyword)))
		      (set! *see-also-table* (make-hashtable))
		      (hashtable-put! *see-also-table* keyword so)
		      so)))))))

;*---------------------------------------------------------------------*/
;*    see-also ...                                                     */
;*---------------------------------------------------------------------*/
(define (see-also name dir markup)
   (<SEE-ALSO-LIST> "pad-api" (search-see-also name dir markup)))

;*---------------------------------------------------------------------*/
;*    <APIREF> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<APIREF> key api #!key (pad "api"))
   (<SPAN> :class "href" 
      :onclick (select-api-pad (make-file-name (doc-api-dir) api) key :pad pad)
      key))

;*---------------------------------------------------------------------*/
;*    <OBJ->STRING> ...                                                */
;*---------------------------------------------------------------------*/
(define (<OBJ->STRING> expr)
   (with-output-to-string (lambda () (write expr))))

;*---------------------------------------------------------------------*/
;*    select-api-pad-on-load ...                                       */
;*---------------------------------------------------------------------*/
(define (select-api-pad-on-load weblet)
   ~(hop_window_onload_add 
     (lambda (e)
	(with-history
	 (lambda ()
	    (history-add! api-history "pad-weblet" $weblet)
	    (with-hop ($doc/api $weblet)
	       (lambda (r)
		  (notepad-select "doc-notepad" "doc-api")
		  (let ((el (dom-get-element-by-id document "pad-api")))
		     (innerHTML-set! el r))))))
	#f)))
