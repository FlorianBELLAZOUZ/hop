;*=====================================================================*/
;*    serrano/prgm/project/hop/2.2.x/weblets/doc/wiki.hop              */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Tue Apr 11 09:36:53 2006                          */
;*    Last change :  Wed Nov 16 16:21:32 2011 (serrano)                */
;*    Copyright   :  2006-11 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    DOC wiki parsing                                                 */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hopdoc_wiki
   
   (import hopdoc_services
	   hopdoc_config
	   hopdoc_search
	   hopdoc_api)
   
   (export (<WIKIREF> lbl)
	   (doc-wiki-syntax)
	   (make-wiki-request-syntax initial-syntax #!optional mktitle)
	   (wiki-tt-parser proc)
	   (doc-page page syntax)
	   (doc-page->name path)
	   (meta-wiki-example name)))

;*---------------------------------------------------------------------*/
;*    <WIKIREF> ...                                                    */
;*---------------------------------------------------------------------*/
(define (<WIKIREF> lbl)
   (<SPAN> :class "href wikiref" 
      :onclick ~(with-history
		 (lambda ()
		    (notepad-select "doc-notepad" "doc-wiki")
		    (window.scrollTo 0 0)))
      lbl))

;*---------------------------------------------------------------------*/
;*    doc-wiki-syntax ...                                              */
;*---------------------------------------------------------------------*/
(define (doc-wiki-syntax)
   *doc-syntax*)

;*---------------------------------------------------------------------*/
;*    wiki-plugins ...                                                 */
;*---------------------------------------------------------------------*/
(define (wiki-plugins id)
   (case id
      ((<doc>) <WIKI-DOC>)
      ((<logo>) <WIKI-LOGO>)
      ((<library>) <WIKI-LIBRARY>)
      ((<css>) <WIKI-CSS>)
      ((<arguments>) <WIKI-ARGUMENTS>)
      ((<fields>) <WIKI-FIELDS>)
      ((<example>) <WIKI-EXAMPLE>)
      ((<code>) <WIKI-CODE>)
      ((<share>) <WIKI-SHARE>)
      ((<share-public>) <WIKI-SHARE-PUBLIC>)
      ((<rc>) <WIKI-RC>)
      (else #f)))

;*---------------------------------------------------------------------*/
;*    *doc-syntax*                                                     */
;*---------------------------------------------------------------------*/
(define *doc-syntax*
   (instantiate::wiki-syntax
      (section2 (lambda expr (<DIV> :class "section2" expr)))
      (keyword (lambda (x) (<SPAN> :class "doc-keyword" x)))
      (type (lambda (x) (<SPAN> :class "doc-type" x)))
      (pre (lambda expr (<DIV> :align "center" (<PRE> expr))))
      (plugins wiki-plugins)))

;*---------------------------------------------------------------------*/
;*    *meta-wiki-syntax* ...                                           */
;*---------------------------------------------------------------------*/
(define *meta-wiki-syntax*
   (instantiate::wiki-syntax
      (plugins (lambda (id)
		  (if (eq? id '<center>)
		      (lambda (port title expr)
			 (<DIV> :align "center"
			    (<DIV> :style "width: 50%; color: #555"
			       expr))))))))

;*---------------------------------------------------------------------*/
;*    make-wiki-request-syntax ...                                     */
;*---------------------------------------------------------------------*/
(define (make-wiki-request-syntax initial-syntax #!optional mktitle)
   (let ((req (current-request)))
      (duplicate::wiki-syntax initial-syntax
	 (plugins (lambda (id)
		     (case id
			((<doc>)
			 (lambda (port t expr)
			    (let ((title (if mktitle (mktitle t) t)))
			       (if (authorized-service? req 'admin)
				   (with-access::http-request req (localclientp)
				      (if localclientp
					  (<DOC/emacs> port title expr)
					  (<DOC/edit> port title expr))
				      (<WIKI-DOC> port title expr))))))
			(else
			 (with-access::wiki-syntax initial-syntax (plugins)
			    (plugins id)))))))))

;*---------------------------------------------------------------------*/
;*    <WIKI-DOC> ...                                                   */
;*---------------------------------------------------------------------*/
(define (<WIKI-DOC> port title expr)
   (list
    (<DIV> :class "doc-title"
       (<TABLE> :width "100%"
	  (<TR>
	     (<TH> :align 'left title))))
    (<DIV> :class "doc"
       (<DIV> :class "toc"
	  (hop-wiki->toc expr :max-depth 3))
       expr)))

;*---------------------------------------------------------------------*/
;*    <WIKI-LOGO> ...                                                  */
;*---------------------------------------------------------------------*/
(define (<WIKI-LOGO> port src expr)
   (let* ((dname (dirname (input-port-name port)))
	  (file (if (and (string? src) (>fx (string-length src) 0))
		    src
		    "logo.png"))
	  (logo (make-file-name dname file)))
      (<DIV> :class "logo"
	 (<IMG> :src logo :class "doc-logo"))))

;*---------------------------------------------------------------------*/
;*    <WIKI-LIBRARY> ...                                               */
;*---------------------------------------------------------------------*/
(define (<WIKI-LIBRARY> port title expr)
   expr)

;*---------------------------------------------------------------------*/
;*    <DOC/edit> ...                                                   */
;*---------------------------------------------------------------------*/
(define (<DOC/edit> port title expr)
   (list
    (<DIV> :class "doc-title"
       (<TABLE> :width "100%"
	  (<TR>
	     (<TH> :align 'left title)
	     (<TD> :align 'right "[ "
		(<SPAN> :class "edit"
		   :onclick ~(window.open $(doc/edit (input-port-name port)))
		   "edit")
		" | "
		(<SPAN> :class "edit"
		   :onclick ~(window.open $(doc/edit (input-port-name port)))
		   "new")
		" ]"))))
    (<DIV> :class "doc"
       (<DIV> :class "toc"
	  (hop-wiki->toc expr :max-depth 3))
       expr)))

;*---------------------------------------------------------------------*/
;*    <DOC/emacs> ...                                                  */
;*---------------------------------------------------------------------*/
(define (<DOC/emacs> port title expr)
   (list
    (<DIV> :class "doc-title"
       (<TABLE> :width "100%"
	  (<TR>
	     (<TH> :align 'left title)
	     (<TD> :class "edit"
		"[ "
		(<SPAN> :class "edit"
		   :onclick ~(window.open $(doc/edit (input-port-name port)))
		   "edit")
		" | "
		(<SPAN> :class "edit"
		   :onclick ~(with-hop
				   ($(service (file)
					(run-process (doc-editor) file :wait #f)
					#f)
				     $(input-port-name port)))
		   (basename (doc-editor)))
		" | "
		(<SPAN> :class "edit"
		   :onclick ~(with-hop
				   ($(service (file)
					(let ((f (make-file-name
						  (dirname file)
						  (string-append
						   "new." (doc-suffix)))))
					   (with-output-to-file f
					      (lambda ()
						 (display (wiki-template))))
					   (run-process (doc-editor)
							f :wait #f)
					   #f))
				     $(input-port-name port)))
		   "new")
		" ]"))))
    (<DIV> :class "doc"
       (<DIV> :class "toc"
	  (hop-wiki->toc expr :max-depth 3))
       expr)))

;*---------------------------------------------------------------------*/
;*    <WIKI-CSS> ...                                                   */
;*---------------------------------------------------------------------*/
(define (<WIKI-CSS> port title expr)
   expr)

;*---------------------------------------------------------------------*/
;*    <WIKI-ARGUMENTS> ...                                             */
;*---------------------------------------------------------------------*/
(define (<WIKI-ARGUMENTS> port title expr)
   (list
    (<DIV> :class "doc-arguments" :align "center" expr)
    (<P>)))

;*---------------------------------------------------------------------*/
;*    <WIKI-FIELDS> ...                                                */
;*---------------------------------------------------------------------*/
(define (<WIKI-FIELDS> port title expr)
   (list
    (<DIV> :class "doc-fields" :align "center" expr)
    (<P>)))

;*---------------------------------------------------------------------*/
;*    <WIKI-CODE> ...                                                  */
;*---------------------------------------------------------------------*/
(define (<WIKI-CODE> port title expr)
   (<DIV> :class "code" :align "center"
      (decorate-api-wiki-code expr)))

;*---------------------------------------------------------------------*/
;*    <WIKI-EXAMPLE> ...                                               */
;*---------------------------------------------------------------------*/
(define (<WIKI-EXAMPLE> port title expr)
   (search-examples port title expr))
				  
;*---------------------------------------------------------------------*/
;*    <WIKI-SHARE> ...                                                 */
;*---------------------------------------------------------------------*/
(define (<WIKI-SHARE> port file body)
   (let ((path (make-file-name (hop-share-directory) file)))
      (<FL>
	 (<FLITEM>
	    (<FLHEAD> file)
	    (with-input-from-file path
	       (lambda ()
		  (<PRE> :class "source"
		     (html-string-encode
		      (read-string (current-input-port))))))))))

;*---------------------------------------------------------------------*/
;*    <WIKI-SHARE-PUBLIC> ...                                          */
;*---------------------------------------------------------------------*/
(define (<WIKI-SHARE-PUBLIC> port file body)
   (let ((path (make-file-name (hop-share-directory) file)))
      (<FL>
	 (<FLITEM>
	    (<FLHEAD> file)
	    (with-input-from-file path
	       (lambda ()
		  (let* ((r (read-string (current-input-port)))
			 (p "/* <public> */\n")
			 (i (string-contains r p)))
		     (if (not i)
			 (<PRE> :class "source" (html-string-encode r))
			 (let* ((p2 "/* </public> */")
				(j (string-contains r p2 i))
				(s (substring r
					      (+fx i (string-length p))
					      (if (not j)
						  (string-length r)
						  (-fx j 1)))))
			    (<PRE> :class "source"
			       (html-string-encode s)))))))))))

;*---------------------------------------------------------------------*/
;*    <WIKI-RC> ...                                                    */
;*---------------------------------------------------------------------*/
(define (<WIKI-RC> port file body)
   (let ((path (make-file-name (hop-rc-directory) file)))
      (when (file-exists? path)
	 (<FL>
	    (<FLITEM>
	       (<FLHEAD> file)
	       (with-input-from-file path
		  (lambda ()
		     (<PRE>
			:class "source"
			(html-string-encode
			 (read-string (current-input-port)))))))))))

;*---------------------------------------------------------------------*/
;*    doc-page ...                                                     */
;*---------------------------------------------------------------------*/
(define (doc-page page syntax)
   (define (err src)
      (<SPAN> :class "parse-error" (html-string-encode src)))
   (cond
      ((not page)
       (http-service-error (current-request) 'doc "Service not found"))
      ((not (file-exists? page))
       (http-file-not-found page))
      (else
       (let ((iport (open-input-file page)))
	  (if (not (input-port? iport))
	      (http-permission-denied page)
	      (with-handler
		 (lambda (e)
		    (exception-notify e)
		    (err "???"))
		 (let ((m1 (eval-find-module 'hopdoc))
		       (m2 (eval-module)))
		    (unwind-protect
		       (begin
			  (when m1 (eval-module-set! m1))
			  (wiki-input-port->hop iport :syntax syntax))
		       (begin
			  (eval-module-set! m2)
			  (close-input-port iport))))))))))

;*---------------------------------------------------------------------*/
;*    wiki-tt-parser ...                                               */
;*---------------------------------------------------------------------*/
(define (wiki-tt-parser parser)
   (lambda x
      (if (and (null? (cdr x)) (pair? (car x)) (every? string? (car x)))
	  (let ((s (html-string-decode (apply string-append (car x)))))
	     (or (parser s) (<TT> x)))
	  (<TT> x))))

;*---------------------------------------------------------------------*/
;*    doc-page->name ...                                               */
;*---------------------------------------------------------------------*/
(define (doc-page->name path)
   (if (file-exists? path)
       (let ((p (open-input-file path)))
	  (unwind-protect
	     (let ((l (read-line p)))
		(if (substring-at? l "<doc> " 0)
		    (let ((m (pregexp-match "((?:[^-]|-[^-])*[^ ])[ ]*--" l)))
		       (if (pair? m)
			   (cadr m)
			   (substring l 5 (string-length l))))
		    (basename path)))
	     (close-input-port p)))
       (basename path)))

;*---------------------------------------------------------------------*/
;*    meta-wiki-example ...                                            */
;*---------------------------------------------------------------------*/
(define (meta-wiki-example file)
   (let ((path (make-file-name (doc-wiki-dir) file)))
      (define (err src)
	 (<SPAN> :class "parse-error" (html-string-encode src)))
      (if (not (file-exists? path))
	  (err (format "file not found `~a'" path))
	  (let ((iport (open-input-file path)))
	     (if (not (input-port? iport))
		 (err (format "cannot open file for input `~a'" path))
		 (with-handler
		    (lambda (e)
		       (exception-notify e)
		       (err "???"))
		    (unwind-protect
		       (let ((doc (wiki-input-port->hop iport
							:syntax
							*meta-wiki-syntax*)))
			  (close-input-port iport)
			  (set! iport (open-input-file path))
			  (let ((code (<PRE> :class "example"
					     (html-string-encode
					      (read-string iport)))))
			     (list doc (<P>) code)))
		       (close-input-port iport))))))))
	 
;*---------------------------------------------------------------------*/
;*    wiki-template ...                                                */
;*---------------------------------------------------------------------*/
(define (wiki-template)
   "<doc>

== Description ==

== Synopsis ==

== Examples ==

== Definitions ==

=== <> ===
<markup> <>

<arguments>
^  arguments   ^   type    ^   default    ^  short description          ^
</arguments>
</markup>

== Style ==

===  ===
<css> 

</css>

== See also ==
<see-also></see-also>

</doc>")
