<doc> HOP core language

This document presents the core constructions of the HOP programming language.
It does not present the APIs which are already presented in the ++API++ tab.

== Server Side core language ==

This section presents the HOP constructions that are only applicable to
server-side programming.

=== Modules ===
On the server side the ,(<APIREF> "weblets" "service.wiki") are organized into
//modules//. Modules structure the program. A module //export// variables,
functions, and classes. A module might //import// another module. In
that case, it may access to the imported variables, functions, and classes.

~~ In this text we use the classical conventions. The sign ,(<TT> "+")
denotes a non empty repetition. The sign ++*++ denotes a possibly
empty repetition.  The sign ++|++ denotes the alternative. The
syntactic structure of a module is as follows:

  (module <ident> <clause>+ ...)

  <expression>*


A single file cannot contain more than one module. The syntax for the clauses
is:

  <clause> := <import>
     | <library>
     | <export>
     | <static>

  <import> := (import <ident>+)
  <library> := (library <ident>+)

  <export> := (export <class-or-binding>+)
  <class-or-binding> := <variable>
     | <function>
     | <class>

  <variable> := <ident>
  <function> := (<ident>+)

  <class> := (class <ident> <class-field>)
  <class-field> := <ident>
     | (<ident> <class-attribute>+)
  <class-attribute> := read-only
     | (default <expression>)


Here is an example of a module named ++foo++ that uses the library
++hopwiki++, that imports the module named ++bar++, and that exports the 
function ++fun-foo++, the variable ++var-foo++, and the class ++class-foo++.

  (module foo
     (library hopwiki)
     (import bar)
     (export (fun-foo x)
             var-foo
             (class class-foo
                (name read-only)
                (x (default 0))
                (y (default 0)))))


=== Classes and Objects === 

The server side HOP object model is inspired by the
[[http://en.wikipedia.org/wiki/Common_Lisp_Object_System|Common Lisp Object System]].  
Contrary to languages such as SmallTalk or Java, in
that model, //methods// are not attached to classes but to //generic
functions//. This enables code to add new functionalities to
pre-existing data structures (objects). The HOP declination uses
single inheritance and single dispatch. That is, a class may inherit
from exactly one class and only the first argument of method explored
to resolve the late binding.

~~ Server side classes are defined in the module declaration. A class may either
be //exported// in which case all the weblet might create objects of class,
declare subclasses, generic functions, and methods.


== Client Side core language ==

</doc>
