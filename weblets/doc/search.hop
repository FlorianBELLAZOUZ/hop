;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/doc/search.hop                  */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Apr 14 08:46:59 2006                          */
;*    Last change :  Fri Oct 26 17:53:09 2007 (serrano)                */
;*    Copyright   :  2006-07 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    The DOC source search engine.                                    */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hopdoc_search
   
   (import hopdoc_config
	   hopdoc_widgets
	   hopdoc_wiki
	   hopdoc_services
	   hopdoc_api
	   hopdoc_weblets)

   (export (<SEARCH>)
	   (make-doc-tables offset . markups)
	   (search-see-also name dir pattern)
	   (search-examples port title expr*)
	   (search-table value id table offset columns)
	   (search-docs dir)
	   (search-libraries dir)
	   (search-weblets)
	   (search-tutorials dir value)))

;*---------------------------------------------------------------------*/
;*    <SEARCH> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<SEARCH>)
   (<DIV> :class "search"
      (<DIV> :class "search-title"
	 (<TABLE> :width "100%" :border 0
	    (<TR>
	       (<TH> :align "left"
		  "HOP Global Search")
	       (<TD> :align "center"
		  (<DIV> :class "selector"
		     (<SPAN> :class "label" "search:")
		     (<INPUT> :type "text" :size 50
			:title "Hit [Return] to search"
			:onkeyup
			~(if (= event.keyCode 13)
			     (with-hop ($global-search value)
				(lambda (h)
				   (let ((el (dom-get-element-by-id "pad-search")))
				      (innerHTML-set! el h)))))))))))
      (<DIV> :class "pagearea" :id "pad-search" "")))

;*---------------------------------------------------------------------*/
;*    global-search ...                                                */
;*---------------------------------------------------------------------*/
(define-service (global-search value)
   (let ((table (kmp-table value)))
      (<TABLE> :class "global-search"
	 (apply append
		(grep table (doc-api-dir)
		      (lambda (file line)
			 (<TR>
			    (<TH> (basename file))
			    (<TD> (<APIREF> (wiki-string->hop line)
					    (basename file))))))
		(grep table (doc-weblets-dir)
		      (lambda (file line)
			 (<TR>
			    (<TH> (basename file))
			    (<TD> (<WEBLETREF> (wiki-string->hop line)
					       (basename file))))))
		(grep table (doc-wiki-dir)
		      (lambda (file line)
			 (<TR>
			    (<TH> (basename file))
			    (<TD> (<WIKIREF> (wiki-string->hop line))))))
		(grep table (doc-core-dir)
		      (lambda (file line)
			 (<TR>
			    (<TH> (basename file))
			    (<TD> :onclick
			       ~(notepad-select "doc-notepad" "doc-core")
			       (wiki-string->hop line)))))
		(grep table (doc-wiki-dir)
		      (lambda (file line)
			 (<TR>
			    (<TH> (basename file))
			    (<TD> (<TUTORIALREF> (wiki-string->hop line)
						 (basename file))))))))))

;*---------------------------------------------------------------------*/
;*    grep ...                                                         */
;*---------------------------------------------------------------------*/
(define (grep table dir proc)
   (filter-map (lambda (f)
		  (unless (directory? f)
		     (let* ((mm (open-mmap f read: #t))
			    (ls (mmap-length mm)))
			(let loop ((o #e0)
				   (r '()))
			   (if (>=elong o ls)
			       (begin
				  (close-mmap mm)
				  (reverse! r))
			       (let ((n (kmp-mmap table mm o)))
				  (if (>=elong n o)
				      (loop (+elong n #e1)
					    (cons (proc f (mmap-whole-line mm n))
						  r))
				      (loop ls r))))))))
	       (directory->path-list dir)))

;*---------------------------------------------------------------------*/
;*    make-doc-tables ...                                              */
;*---------------------------------------------------------------------*/
(define (make-doc-tables offset . markups)
   
   (let ((menu (make-vector 27 '()))
	 (table (make-hashtable))
	 (dir (doc-api-dir)))
      
      (define (mmap-search mm path kmpt markup)
	 (let ((mlen (fixnum->elong (string-length markup))))
	    (let loop ((o #e0))
	       (let ((n (kmp-mmap kmpt mm o)))
		  (when (>elong n #e0)
		     (let* ((s (+elong n mlen))
			    (mk (get-def mm s))
			    (i (char->offset (string-ref mk offset))))
			;; add to the menu table
			(vector-set!
			 menu i (cons (cons mk path) (vector-ref menu i)))
			;; add to the markup table
			(hashtable-put! table mk path)
			(loop (+ s (string-length mk)))))))))
      
      (if (null? (cdr markups))
	  (let ((t (kmp-table (car markups))))
	     (for-each (lambda (f)
			  (when (is-suffix? f (doc-suffix))
			     (let* ((path (make-file-name dir f))
				    (mm (and (file-exists? path)
					     (open-mmap path :write #f))))
				(when (mmap? mm)
				   (unwind-protect
				      (mmap-search mm path t (car markups))
				      (close-mmap mm))))))
		       (directory->list dir)))
	  (for-each (lambda (f)
		       (when (is-suffix? f (doc-suffix))
			  (let* ((path (make-file-name dir f))
				 (mm (and (file-exists? path)
					  (open-mmap path :write #f))))
			     (when (mmap? mm)
				(unwind-protect
				   (for-each (lambda (m)
						(let ((t (kmp-table m)))
						   (mmap-search mm path t m)))
					     markups)
				   (close-mmap mm))))))
		    (directory->list dir)))
      
      (values menu table)))

;*---------------------------------------------------------------------*/
;*    get-def ...                                                      */
;*---------------------------------------------------------------------*/
(define (get-def mm offset)
   (let ((len (mmap-length mm)))
      (let loop ((start offset))
	 (cond
	    ((=elong start len)
	     (error 'make-doc-tables "Can't find markup" start))
	    ((char=? (mmap-ref mm start) #\Space)
	     (loop (+elong start #e1)))
	    (else
	     (let loop ((end (+elong start #e1)))
		(if (=elong end len)
		    (mmap-substring mm start len)
		    (let ((c (mmap-ref mm end)))
		       (if (or (char=? c #\Newline) (char=? c #\Space))
			   (mmap-substring mm start end)
			   (loop (+elong end #e1)))))))))))

;*---------------------------------------------------------------------*/
;*    search-see-also ...                                              */
;*---------------------------------------------------------------------*/
(define (search-see-also name dir patterns)
   (unique
    (append-map (lambda (pat) (search-see-also-pattern name dir pat))
		(string-split patterns ", "))
    (lambda (x) x)))

;*---------------------------------------------------------------------*/
;*    search-see-also-pattern ...                                      */
;*---------------------------------------------------------------------*/
(define (search-see-also-pattern name dir pattern)
   (let* ((kmpt (kmp-table pattern))
	  (bname (basename name)))
      (filter-map  (lambda (f)
		      (when (and (is-suffix? f (doc-suffix))
				 (not (string=? f bname)))
			 (let* ((path (make-file-name dir f))
				(mm (and (file-exists? path)
					 (open-mmap path :write #f))))
			    (when (mmap? mm)
			       (unwind-protect
				  (when (>elong (kmp-mmap kmpt mm #e0) #e0)
				     path)
				  (close-mmap mm))))))
		   (directory->list dir))))

;*---------------------------------------------------------------------*/
;*    search-examples ...                                              */
;*---------------------------------------------------------------------*/
(define (search-examples port title* _)
   (let* ((table (make-hashtable 128))
	  (res (append-map (lambda (key)
			      (let ((len (string-length key)))
				 (let loop ((i 0))
				    (cond
				       ((=fx i len)
					(search-example table port key _))
				       ((char=? (string-ref key i) #\space)
					(loop (+fx i 1)))
				       (else
					(search-example table
							port
							(substring key i len)
							_))))))
			   (string-split title* ","))))
      (when (pair? res)
	 (apply <FL> res))))

;*---------------------------------------------------------------------*/
;*    search-example ...                                               */
;*---------------------------------------------------------------------*/
(define (search-example t port title _)
   (let ((kmpt (kmp-table title))
	 (dir (make-file-path (doc-dir) "examples")))
      (filter-map (lambda (f)
		     (when (and (is-suffix? f "hop")
				(not (hashtable-get t f)))
			(let ((r (example-file dir f kmpt)))
			   (when r
			      (hashtable-put! t f #t)
			      r))))
		  (sort (directory->list dir) string<?))))

;*---------------------------------------------------------------------*/
;*    example-file ...                                                 */
;*---------------------------------------------------------------------*/
(define (example-file dir file kmpt)
   (let* ((path (make-file-name dir file))
	  (mm (open-mmap path :write #f)))
      (when (mmap? mm)
	 (unwind-protect
	    (when (> (kmp-mmap kmpt mm #e0) 0)
	       (<EXAMPLE-FILE> path))
	    (close-mmap mm)))))

;*---------------------------------------------------------------------*/
;*    <EXAMPLE-FILE> ...                                               */
;*---------------------------------------------------------------------*/
(define (<EXAMPLE-FILE> path)
   (let ((p (open-input-file path)))
      (when (input-port? p)
	 (unwind-protect
	    (let ((h (read-line p))
		  (id1 (xml-make-id 'pre))
		  (id2 (xml-make-id 'textarea)))
	       (if (substring-at? h ";;" 0)
		   (<FLITEM>
		      (<FLHEAD>
			 (wiki-string->hop
			  (substring h 2 (string-length h))
			  :syntax (doc-wiki-syntax)))
		      (<EXAMPLE> (read-string p)))
		   (let ((code (string-append h "\n" (read-string p))))
		      (<FLITEM>
			 (<FLHEAD> (prefix (basename path)))
			 (<EXAMPLE> code)))))
	    (close-input-port p)))))

;*---------------------------------------------------------------------*/
;*    unique ...                                                       */
;*---------------------------------------------------------------------*/
(define (unique lst getkey)
   (let ((t (make-hashtable 128)))
      (for-each (lambda (l)
		   (hashtable-put! t (getkey l) l))
		lst)
      (hashtable->list t)))

;*---------------------------------------------------------------------*/
;*    search-table ...                                                 */
;*---------------------------------------------------------------------*/
(define (search-table value id table offset columns)

   (define (<ENTRY> k p)
      (<TD>
	 :class "entry"
	 :onclick ~(let ((el (dom-get-element-by-id document $id)))
		      (select-api-doc $doc/api $p el $k))
	 (<SPAN> :class "descr" (html-string-encode k))))
   
   (define (char0 str)
      (let ((c (char-upcase (string-ref str offset))))
	 (if (char-alphabetic? c)
	     c
	     #\?)))
   
   (define (<LABEL> c)
      (<TD> (<SPAN> :class "search-label" (string c))))
   
   (define (list->entries lst)
      (let* ((c0 (char0 (caar lst)))
	     (res (cons (<LABEL> c0) lst)))
	 (let loop ((c c0)
		    (prev res)
		    (lst lst)
		    (len 1))
	    (if (null? lst)
		(list-split! res
			     (inexact->exact (ceiling (/ len columns)))
			     (<TD> "&#160;"))
		(let ((c1 (char0 (caar lst))))
		   (if (char=? c c1)
		       (begin
			  (set-car! lst (apply <ENTRY> (car lst)))
			  (loop c lst (cdr lst) (+fx len 1)))
		       (begin
			  (set-cdr! prev (cons (<LABEL> c1) lst))
			  (loop c1 (cdr prev) lst (+fx len 1)))))))))
   
   (let ((l1 (if (=fx (string-length value) 0)
		 (hashtable-map table list)
		 (let ((kt (kmp-table value)))
		    (filter (lambda (x) x)
			    (hashtable-map table
					   (lambda (k p)
					      (and (>= (kmp-string kt k 0) 0)
						   (list k p)))))))))
      (cond
	 ((null? l1)
	  (<TABLE>
	     :class "search-result"
	     (<COLGROUP> :span columns :width (format "~a%" (/ 100 columns)))
	     (<TR> 
		(<TH>
		   :colspan columns
		   (format "\"~a\" does not match any entry" value)))))
	 ((and (pair? l1) (null? (cdr l1)))
	  ;; only one element matches, jump to it
	  (<SCRIPT> 
	     ~(let ((el (dom-get-element-by-id document $id)))
		 (window-close "doc/search")
		 (select-api-doc $doc/api $(cadr (car l1)) el #unspecified))))
	 (else
	  (let ((l2 (sort l1 (lambda (a b) (string-ci<? (car a) (car b))))))
	     (<TABLE>
		:class "search-result"
		(<COLGROUP> :span columns :width (format "~a%" (/ 100 columns)))
		(<TR> 
		   (<TH>
		      :colspan columns
		      (format "\"~a\" matches ~a entries" value (length l1))))
		(apply map <TR> (list->entries l2))))))))

;*---------------------------------------------------------------------*/
;*    search-docs-inner ...                                            */
;*---------------------------------------------------------------------*/
(define (search-docs-inner dir key #!key (pad "api"))
   (let ((t (kmp-table key))
	 (l (fixnum->elong (string-length key))))
      (filter-map (lambda (f)
		     (when (is-suffix? f "wiki")
			(let* ((path (make-file-name dir f))
			       (mm (and (file-exists? path)
					(open-mmap path :write #f))))
			   (when (mmap? mm)
			      (unwind-protect
				 (let ((r (kmp-mmap t mm #e0)))
				    (and (>=elong r #e0)
					 (let ((l (mmap-line mm (+elong r l))))
					    (cons l (<APIREF> l f :pad pad)))))
				 (close-mmap mm))))))
		  (directory->list dir))))

;*---------------------------------------------------------------------*/
;*    search-docs ...                                                  */
;*---------------------------------------------------------------------*/
(define (search-docs dir)
   (map cdr 
	(sort (search-docs-inner dir "<doc> ")
	      (lambda (a b) (string<? (car a) (car b))))))
      
;*---------------------------------------------------------------------*/
;*    search-libraries ...                                             */
;*---------------------------------------------------------------------*/
(define (search-libraries dir)
   (map cdr 
	(sort (search-docs-inner dir "<library> " :pad "libraries")
	      (lambda (a b) (string<? (car a) (car b))))))

;*---------------------------------------------------------------------*/
;*    search-weblets-documentation ...                                 */
;*---------------------------------------------------------------------*/
(define (search-weblets-documentation dir)
   (filter-map (lambda (f)
		  (let ((path (make-file-path dir
					      f
					      "etc"
					      (string-append f ".wiki"))))
		     (and (file-exists? path) path)))
	       (directory->list dir)))

;*---------------------------------------------------------------------*/
;*    search-weblets-inner ...                                         */
;*---------------------------------------------------------------------*/
(define (search-weblets-inner)
   (filter-map (let* ((key "<doc> ")
		      (t (kmp-table key))
		      (l (fixnum->elong (string-length key))))
		  (lambda (path)
		     (when (is-suffix? path "wiki")
			(let* ((mm (and (file-exists? path)
					(open-mmap path :write #f))))
			   (when (mmap? mm)
			      (unwind-protect
				 (let ((r (kmp-mmap t mm #e0)))
				    (and (>=elong r #e0)
					 (let ((l (mmap-line mm (+elong r l))))
					    (cons l (<WEBLETREF> l path)))))
				 (close-mmap mm)))))))
	       (delete-duplicates!
		(append-map search-weblets-documentation
			    (delete-duplicates!
			     (map dirname (get-autoload-weblet-directories)))))))

;*---------------------------------------------------------------------*/
;*    search-weblets ...                                               */
;*---------------------------------------------------------------------*/
(define (search-weblets)
   (map cdr
	(sort (search-weblets-inner)
	      (lambda (a b) (string<? (car a) (car b))))))
      
;*---------------------------------------------------------------------*/
;*    mmap-line ...                                                    */
;*---------------------------------------------------------------------*/
(define (mmap-line mm n)
   (let ((ls (mmap-length mm)))
      (let loop ((e n))
	 (when (<elong e ls)
	    (if (char=? (mmap-ref mm e) #\Newline)
		(mmap-substring mm n e)
		(loop (+elong e #e1)))))))

;*---------------------------------------------------------------------*/
;*    mmap-whole-line ...                                              */
;*---------------------------------------------------------------------*/
(define (mmap-whole-line mm n)
   (let ((ls (mmap-length mm)))
      (let loop ((e n))
	 (when (<elong e ls)
	    (if (char=? (mmap-ref mm e) #\Newline)
		(let loop ((b (-elong n #e1)))
		   (cond
		      ((=elong b #e-1)
		       (mmap-substring mm #e0 e))
		      ((char=? (mmap-ref mm b) #\Newline)
		       (mmap-substring mm (+elong b #e1) e))
		      (else
		       (loop (-elong b #e1)))))
		(loop (+elong e #e1)))))))

;*---------------------------------------------------------------------*/
;*    search-tutorials ...                                             */
;*---------------------------------------------------------------------*/
(define (search-tutorials dir value)
   (let ((t (kmp-table value)))
      (filter-map (lambda (f)
		     (when (is-suffix? f "wiki")
			(let* ((path (make-file-name dir f))
			       (mm (and (file-exists? path)
					(open-mmap path :write #f))))
			   (when (mmap? mm)
			      (unwind-protect
				 (let ((r (kmp-mmap t mm #e0)))
				    (and (>=elong r #e0) path))
				 (close-mmap mm))))))
		  (directory->list dir))))

