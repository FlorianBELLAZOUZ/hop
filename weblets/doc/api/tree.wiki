<doc> Tree widget

== Description ==

These markups implement //Trees// in HOP documents. A //tree// 
acts as a list that can be interactively //folded// and //unfolded//.

~~ Note: ,(<SPAN> :style { font-weight: bold; color: red } [
The markups presented in this page are not yet supported on
client side programming. They are only supported on server side.])

== Synopsis ==

=== Server ===

  (<TREE> arg ...)
  (<TRHEAD> arg ...)
  (<TRBODY> arg ...)
  (<TRLEAF> arg ...)


=== Client ===
  
  (tree-close tree)
  (tree-open tree)
  (tree-toggle tree)
  (tree-reset! tree)
  (tree-selection tree)
  (tree-select-all! tree)


=== Requirements ===

Client codes using //Trees// need to load the script ++hop-tree.js++.
They also need to load the ++hop-tree.css++ style sheet. Hence, documents
using //Trees// must include in their header, the following statement:


  (<HEAD> :include "hop-tree")


== Examples ==

<example><TREE></example>

== Server Definitions ==
<server>

=== ++<TREE>++ ===
<markup> <TREE>

<arguments>
^  attributes   ^   type     ^   default    ^  short description                         ^
| :id           |  string    |  //random//  | element identifier.                        |
| :open         |  boolean   |   ++#f++     | is the tree starts open?                   |
| :multiselect  |  boolean   |   ++#f++     | does the tree supports multi-selection?    |
| :onselect     |  function  |     _        | a function to invoke on selection.         |
| :onunselect   |  function  |     _        | a function to invoke on unselection.       |
| :onopen       |  function  |     _        | a function to invoke on opening.           |
| :onclose      |  function  |     _        | a function to invoke on closing.           |
| :value        |  string    |    ++""++    | a string denoting the value of the tree.   |
| :history      |  obj       |     _        | enables history recording.                 |
| :visible      |  boolean   |  //#t//      | is the tree node visible?                  |
| :inline       |  boolean   |   ++#t++     | enable/disable image icon inlining.        |
| :iconopen     |  obj       |     _        | the image representing the open folder.    |
| :iconclose    |  obj       |     _        | the image representing the close folder.   |
| :icondir      |  string    |     _        | an alternate directory for misc. icons.    |
| body          |  element   |  empty       | the body.                                  |
</arguments>

This function creates a //tree//. Its first child has to be a
++<TRHEAD>++ and its second child a ++<TRBODY>++.

The ++:iconopen++ and ++:iconclose++ arguments can either be:

  * ++#t++ (the boolean true value). In such a case the default icon is used.
  * a file name holding the image content.
  * a client side expression denoting the image content.


The ++:icondir++ argument, when provided, is the name of a directory
containing images for representing tree connection lines. Unless you know what you
are doing, you should not provide a value for this argument!

The argument ++:history++ controls whether an history event is associated
with selected a tab. When history is enabled, the //back button// of the
browser restores previously selected tabs. The history is disabled if 
++:history++ is ++#f++. It is enabled if ++:history++ is ++#t++ or 
if it is not ++#f++ and an ++:id++ value is provided.


The event handlers ++:onselect++ and ++:onunselect++ are expression that
are evaluated the a tree node is selected (respec. unselected). The ++this++
object points to the tree. The ++value++ field of that object denotes
the currently selected node value.

</markup>

=== ++<TRHEAD>++ ===
<markup> <TRHEAD>

<arguments>
^  attributes  ^   type    ^   default    ^  short description          ^
| :id          |  string   |  //random//  | element identifier.         |
| body         |  element  |  empty       | the body.                   |
</arguments>

This function creates an optional //tree// header.
</markup>

=== ++<TRBODY>++ ===
<markup> <TRBODY>

<arguments>
^  attributes  ^   type    ^   default    ^  short description          ^
| :id          |  string   |  //random//  | element identifier.         |
| body         |  element  |  empty       | the body.                   |
</arguments>

As for ++<NOTEPAD>++s, tree bodies may be delayed using ++<DELAY>++ markups.
Delayed tree bodies are evaluated each time the tree is open.

</markup>

=== ++<TRLEAF>++ ===
<markup> <TRLEAF>

<arguments>
^  attributes  ^   type    ^   default    ^  short description                        ^
| :id          |  string   |  //random//  | element identifier.                       |
| :value       |  string   |    ++""++    | a string denoting the value of the leaf.  |
| :inline      |  boolean  |   ++#t++     | enable/disable image icon inlining.       |
| :icon        |  obj      |     _        | the image representing the leaf.          |
| body         |  element  |  empty       | the body.                                 |
</arguments>

The ++:icon++ argument can either be:

  * ++#t++ (the boolean true value). In such a case the default icon is used.
  * a file name holding the image content.
  * a client side expression denoting the image content.


</markup>
</server>

== Client Definitions ==
<client>

=== ++(tree-close tree)++ ===
<procedure> tree-close

<arguments>
^  arguments  ^   type   ^  short description  ^
| tree        |   tree   | the tree.        |
</arguments>

Closes the ++tree++.
</procedure>

=== ++(tree-open tree)++ ===
<procedure> tree-open

<arguments>
^  arguments  ^   type   ^  short description  ^
| tree        |   tree   | the tree.        |
</arguments>

Opens the ++tree++.
</procedure>

=== ++(tree-toggle tree [history])++ ===
<procedure> tree-toggle

<arguments>
^  arguments  ^   type      ^  short description  ^
| tree        |   tree      | the tree.           |
</arguments>

Opens the ++tree++ if closed. Otherwise, closes it.
</procedure>

=== ++(tree-reset! tree)++ ===
<procedure> tree-reset!

<arguments>
^  arguments  ^   type   ^  short description  ^
| tree        |   tree   | the tree.        |
</arguments>

Resets the ++tree++ selection.
</procedure>

=== ++(tree-selection tree)++ ===
<procedure> tree-selection

<arguments>
^  arguments  ^   type   ^  short description  ^
| tree        |   tree   | the tree.        |
</arguments>

Returns representing the selection.
</procedure>

=== ++(tree-select-next! tree)++ ===
<procedure> tree-select-next!
<arguments>
^  arguments  ^   type   ^  short description  ^
| tree        |   tree   | the tree.        |
</arguments>

Select the next element of the tree.
</procedure>

=== ++(tree-select-previous! tree)++ ===
<procedure> tree-select-previous!
<arguments>
^  arguments  ^   type   ^  short description  ^
| tree        |   tree   | the tree.        |
</arguments>

Select the previous element of the tree.
</procedure>

=== ++(tree-select-all! tree)++ ===
<procedure> tree-select-all!
<arguments>
^  arguments  ^   type   ^  short description  ^
| tree        |   tree   | the tree.        |
</arguments>

Select all the rows of a tree.
</procedure>

</client>

== Style ==
<style>
This section describes the various CSS elements used to configure
//Trees//.

=== ++hop-tree.css++ ===

The file ++hop-tree.css++ contains the default graphical configuration.
It is defined as:

<share>hop-tree.css</share>
</style>

== See also ==
<see-also><TREE>, tree-</see-also>

</doc>
