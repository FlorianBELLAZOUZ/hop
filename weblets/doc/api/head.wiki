<doc> HEAD and FOOT markups

== Description ==

The ++<HEAD>++ markup defines the //head// of a document. The HOP
version of ++<HEAD>++ differs from the original HTML definition of
++HEAD++ markup. In particular the HOP version relies on a highly
non-standard way of evaluating its attributes which can occur several
times in an invocation. A typical ++<HEAD>++ looks like:

  (<HEAD>
     :title <a-title>
     :base <a-base>
     ...
     :include <foo> ...
     ...
     :jscript <foo1.js> :css <foo1.css>
     ...
     :jscript <fooN.js> :css <fooN.css>
     ...
     (<META> ...)
     ...
     (<SCRIPT> :type "text/javascript" ~(a piece of code))
     ...
     (<STYLE> :type "text/css" {cascading style sheet elements})
     ...)


== Synopsis ==

=== server ===

  (<HEAD> ...)
  (<FOOT> ...)
  (<FOOT-BUTTON> ...)

== Examples ==

<example><HEAD>, service-base-url, service-resource, <FOOT>, <FOOT-BUTTON></example>

== Server Definitions ==
<server>

=== <HEAD> ===
<markup> <HEAD>

<arguments>
^  arguments   ^   type     ^   default    ^  short description                    ^
| :title       |  string    |     _        | The title of the document.            |
| :base        |  URI       |     _        | The base URI for the document.        |
| :include     |  string    |     _        | A system resource.                    |
| :dir         |  string    |     _        | a directory name added to the path.   |
| :css         |  string    |     _        | a CSS/HSS file name.                  |
| :jscript     |  string    |     _        | a script file name.                   |
| :favicon     |  string    |     _        | a favicon file name.                  |
| :rts         |  bool      |     #t       | adds/removes the Hop runtime system.  |
| :inline      |  bool      |     #f       | enables inline CSS/HSS and scripts.   |
| objs         |  element   |  empty       | the content of the head.              |
</arguments>

The ++<HEAD>++ markup uses special evaluation rules for its
attributes.  Attributes are evaluated from left to right. In
particular, contrary to all other markups, attributes may appear more
than once in the arguments list. In such a case the values are
accumulated (while with other markups, the last provided value
overrides the previous ones).

  * The attribute :title specifies the name of the document.
  * The attribute :base specifies the base URI for the document. Relative
 URI are complete with the base URI. If the base is not specified, the actual
 URL of the current document is used to automatically compute a base URI.
  * The attribute :include adds a Hop resource. A Hop resource might optionally
 be composed of a script file and a CSS/HSS file. The :include attributes force
 Hop to scan its installation directory in order to find the file associated with
 a resource. The :include attribute is a shorthand for a list of :css and :jscript
 attributes. For instance ++:include "hop-notepad"++ is actually equivalent to
 ++:css (make-file-name (hop-share-directory) "hop-notepad.css")++
 ++:jscript (make-file-name (hop-share-directory) "hop-notepad.js")++. See also
 ++service-base-url++ and ++service-resource++.
  * The attribute :dir is a //meta-attribute//. It sets a base name used to
 complete relative file names. This name is used to complete ++css++, 
 ++jscript++, and ++favicon++ relative file names. By default no completion
 of relative file names is performed.
 The :dir attribute is a simple shorthand. It prevents from using absolute
 file names for each local :css of :jscript attributes. That is:
  * The attribute :inline enables inlining of local scripts and CSS/HSS files.
 Note that only local (i.e., files whose name is a relative URL) can be inlined.
 This option is useful for building stand alone documents. That is documents, 
 whose complete implementation is contained in one source file.

  (<HEAD> 
     :css (service-resource svc "foo.css")
     :jscript (service-resource svc "foo.js")
     :jscript "/usr/share/hop/bar.js")


Can be re-written:

  (<HEAD> 
     :dir (service-resource svc)
     :css "foo.css"
     :jscript "foo.js"
     :jscript "/usr/share/hop/bar.js")


Note that only relative path are complete with the :dir value. In the example
above, the path ++"/usr/share/hop/bar.js"++ is not modified by the :dir
attribute.
  * The attribute :css adds a new element to the list of CSS/HSS used in the 
 document. This list is initially empty. Files using relative names are searched
 in the //search path// as described above.
  * The attribute :css adds a new element to the list of CSS/HSS used in the 
 document. This list is initially empty. Files using relative names are searched
 in the //search path// as described above.
  * The attribute :jscript adds a new element to the list of CSS/HSS used in the 
 document. This list is initially empty. Files using relative names are searched
 in the //search path// as described above.
  * The attribute :favicon specifies an small image to be used in the URL
 area of the web browser. Image files using relative names are searched
 in the //search path// as specified with the :dir attribute.


</markup>

=== <FOOT> ===
<markup> <FOOT>
<arguments>
| :id          |  string   |  //random//  | element identifier.         |
| :class       |  string   |  ++foot+     | element class.              |
| body         |  element  |  empty       | the body.                   |
</arguments>

This introduces a standard HOP foot in the produced HTML page. This contains
at least the HOP button. The ++body++ may contain elements build with
++<FOOT-BUTTON>++.

</markup>

=== <FOOT-BUTTON> ===
<markup> <FOOT-BUTTON>
<arguments>
| :id          |  string   |  //random//  | element identifier.         |
| :class       |  string   |  ++foot+     | element class.              |
| href         |  string   |              | a URL to go when clicked.   |
| title        |  string   |              | the button title.           |
| path         |  string   |              | the image absolute path.    |
| src          |  string   |              | the image relative path.    |
</arguments>

This markup introduce a small button. It should use alternatively an
absolute ++path++ or a //relative// ++src++ path. The absolute path
must refer to a user image. The relative path must refer to an image
name as provided by the standard HOP distribution (in the
,(make-file-name (hop-share-directory) "buttons") directory).
</markup>
</server>

== Style ==
<style>
This section describes the CSS elements used to configure
//foot// and //foot-button//.

=== ++div.foot++ ===
<css> div.foot

The ++<DIV>++ element holding the foot buttons.
</css>

=== ++div.foot a.foot-button++ ===
<css> div.foot a.foot-button

The ++<A>++ element of the foot button.
</css>

=== ++div.foot a.foot-button img++ ===
<css> div.foot a.foot-button img

The ++<IMG>++ element of the foot button.
</css>


== See also ==
<see-also><HEAD>, <FOOT>, <FOOT-BUTTON></see-also>

</doc>
