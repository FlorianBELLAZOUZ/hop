<doc> Document Object Model (DOM)

== Description ==

HOP exposes a //Document Object Models// (DOM). It tries to comply as
much as possible the W3C DOM Level 2 [[http://www.w3.org/DOM/|specification]].
The DOM can be used either on the server and the client. However, because
the both sides do not represent the trees in the exact same way, there
is a slight syntactic difference between the server DOM and the client DOM.

~~ On the server side, DOM accessors are represented by functions. On
the client side they are represented by methods. This page only present
the server syntax. The client syntax can be deduced by applying the following
syntactic transformations:

  - get rid of the dash (++-++) character in the name.
  - get rid of the prefix ++dom-++.
  - if applicable, get rid of any punctuation mark (++!++ or ++?++) in the 
 name.
  - capitalize each letter following an eliminated dash character (++-++).
  - move the name of the function after the first argument.
  - insert a dot (++.++) in between the first argument and the name of the
 function.

Example:

  (dom-parent-node node)


should be written:

  (doc.parentNode node)


== Synopsis ==

=== server & client ===

  (dom-has-attributes? node)
  (dom-get-attributes node)
  (dom-has-attribute? node string)
  (dom-get-attribute node string)
  (dom-remove-attribute! node string)
  (dom-set-attribute! node name value)
  (dom-owner-document node)
  (dom-has-child-nodes? node)
  (dom-child-nodes node)
  (dom-first-child node)
  (dom-last-child node)
  (dom-next-sibling node)
  (dom-previous-sibling node)
  (dom-node-name node)
  (dom-node-type node)
  (dom-parent-node node)
  (dom-append-child! node new)
  (dom-remove-child! node old)
  (dom-clone-node node bool)
  (dom-insert-before! node new ref)
  (dom-replace-child! node new old)
  (dom-document-get-element-by-id node string)
  (dom-document-get-elements-by-tag-name node string)

=== server only ===

  (dom-get-element-by-id node string)
  (dom-get-elements-by-tag-name node string)
  (dom-normalize! node)


== Examples ==
<example>get-element-by-id, append-child, remove-child, parent-node</example>

== Server & Client Definitions ==
<server>

=== ++(dom-has-attributes? node)++ ===
<function> dom-has-attributes?

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns ++#t++ if ++node++ has //attributes//. Otherwise, returns ++#f++.
</function>

=== ++(dom-get-attributes node)++ ===
<function> dom-get-attributes

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the list of ++node++ //attributes//.
</function>

=== ++(dom-has-attribute? node name)++ ===
<function> dom-has-attribute?

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| name             |  string      | the attribute name.              |
</arguments>

Returns ++#t++ if ++node++ has attribute ++name++. Otherwise, 
returns ++#f++.
</function>

=== ++(dom-get-attribute node name)++ ===
<function> dom-get-attribute

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| name             |  string      | the attribute name.              |
</arguments>

Returns the value of attribute ++name++ of ++node++. If ++node++ does not
have that attribute, the behavior is unspecified.
</function>

=== ++(dom-remove-attribute! node name)++ ===
<function> dom-remove-attribute!

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| name             |  string      | the attribute name.              |
</arguments>

Removes the attribute ++name++ from ++node++. If ++node++ does not
have that attribute, the behavior is unspecified.
</function>

=== ++(dom-set-attribute! node name value)++ ===
<function> dom-set-attribute!

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| name             |  string      | the attribute name.              |
| value            |  obj         | any value.                       |
</arguments>

Sets a new ++value++ for the attribute ++name++ from ++node++. If ++node++ 
does not have that attribute, the behavior is unspecified.
</function>

=== ++(dom-owner-document node)++ ===
<function> dom-owner-document

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the document that //owns// ++node++.
</function>

=== ++(dom-has-child-nodes? node)++ ===
<function> dom-has-child-nodes?

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns ++#t++ if ++node++ has child nodes. Otherwise, returns ++#f++.
</function>

=== ++(dom-child-nodes node)++ ===
<function> dom-child-nodes

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the list of children of ++node++.
</function>

=== ++(dom-first-child node)++ ===
=== ++(dom-last-child node)++ ===
<function> dom-first-child
<function> dom-last-child

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the first (respectively the last) child of ++node++.
</function>
</function>

=== ++(dom-next-sibling node)++ ===
=== ++(dom-previous-sibling node)++ ===
<function> dom-next-sibling
<function> dom-previous-sibling

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the next (respectively the previous) sibling of ++node++.
</function>
</function>

=== ++(dom-node-name node)++ ===
=== ++(dom-node-type node)++ ===
<function> dom-node-name
<function> dom-node-type

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the name (respectively the type) of ++node++.
</function>
</function>

=== ++(dom-parent-node node)++ ===
<function> dom-parent-node

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the parent of ++node++.
</function>

=== ++(dom-append-child! node child)++ ===
=== ++(dom-remove-child! node child)++ ===
<function> dom-append-child!
<function> dom-remove-child!

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| child            |  element     | an element built by any markup.  |
</arguments>

Appends (respec. removes) a new ++child++ to ++node++.
</function>
</function>

=== ++(dom-clone-node node deep)++ ===
<function> dom-clone-node

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| deep             |  boolean     | deep or shallow cloning.         |
</arguments>

Clones ++node++. If the argument ++deep++ is ++#t++ the cloning is deep
(i.e., children are recursively cloned too). Otherwise, it is shallow
(i.e., children are not cloned).
</function>

=== ++(dom-insert-before! node new ref)++ ===
<function> dom-insert-before!

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| new              |  element     | an element built by any markup.  |
| ref              |  element     | an element built by any markup.  |
</arguments>

Inserts a ++new++ node in the children list of ++node++, just after the
element ++ref++. If the element ++ref++ is not the children list, the
behavior is unspecified.
</function>

=== ++(dom-replace-child! node new old)++ ===
<function> dom-replace-child!

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| new              |  element     | an element built by any markup.  |
| ref              |  element     | an element built by any markup.  |
</arguments>

Replaces the ++old++ with a ++new++ node in the children list of ++node++.
If the element ++old++ is not the children list, nothing happens.
</function>

=== ++(dom-document-get-element-by-id document id)++ ===
<function> dom-document-get-element-by-id

<arguments>
^  arguments       ^   type       ^  short description                      ^
| document         |  element     | an element built by the <HTML> markup.  |
| id               |  string      | the seeked element's identifier.        |
</arguments>

Search an element in ++document++ whose identifier is ++id++. The function
++string=?++ that compare characters by characters is used to compare 
identifiers. 

~~ Note: normally identifier are unique so a document should not contain 
two or more elements with the same identifier.
</function>

=== ++(dom-document-get-elements-by-tag-name document name)++ ===
<function> dom-document-get-elements-by-tag-name

<arguments>
^  arguments       ^   type       ^  short description                      ^
| document         |  element     | an element built by the <HTML> markup.  |
| name             |  string      | the seeked elements tag name.           |
</arguments>

Search all the elements in ++document++ whose tag name is ++id++. The
tag name is the name of the markup that has been used to build the
elements. The function ++string=?++ that compare characters by
characters is used to compare identifiers.  
</function>

</server>

== Server only Definitions ==
<server>

=== ++(dom-get-element-by-id node id)++ ===
<function> dom-get-element-by-id

<arguments>
^  arguments       ^   type       ^  short description                      ^
| node             |  element     | an element built by any markup.         |
| id               |  string      | the seeked element's identifier.        |
</arguments>

Search an element in ++node++ children list whose identifier is
++id++. The function ++string=?++ that compare characters by
characters is used to compare identifiers.

~~ This extents the function ++dom-document-get-element-by-id++. Contrary to
the former, it can be applied to any node.
</function>

=== ++(dom-get-elements-by-tag-name document name)++ ===
<function> dom-get-elements-by-tag-name

<arguments>
^  arguments       ^   type       ^  short description                      ^
| node             |  element     | an element built by any markup.         |
| name             |  string      | the seeked elements tag name.           |
</arguments>

Search all the elements in ++node++ children list whose tag name is ++id++. The
tag name is the name of the markup that has been used to build the
elements. The function ++string=?++ that compare characters by
characters is used to compare identifiers.  

~~ This extents the function ++dom-document-get-elements-by-tag-name++. 
Contrary to the former, it can be applied to any node.
</function>

=== ++(dom-normalize! node)++ ===
<function> dom-normalize!

<arguments>
^  arguments       ^   type       ^  short description                      ^
| node             |  element     | an element built by any markup.         |
</arguments>

Walk through a node children in order to cleanup the parent/child
relationship. This function is only useful after internal surgery on
the tree. In general, it should not be directly called by user source code.
</function>

</server>

== See also ==
<see-also>dom-, get-element-by-id</see-also>

</doc>
