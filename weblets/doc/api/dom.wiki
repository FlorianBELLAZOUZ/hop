<doc> Document Object Model (DOM)

== Description ==

HOP exposes a //Document Object Models// (DOM). It tries to comply as
much as possible the W3C DOM Level 2 [[http://www.w3.org/DOM/|specification]].
The DOM can be used either on the server and the client.

~~ On the client side, functions handling DOM have aliases.
On the client they could also be used as methods. This
page only present the functional syntax. The method syntax can be deduced
by applying the following syntactic transformations:

  - Get rid of the prefix ++dom-++.
  - If applicable, get rid of any punctuation mark (++!++ or ++?++) in the 
 name.
  - Get rid of the remaining dash (++-++) characters in the name and 
 capitalize each letter following the eliminated dashes.
  - Move the name of the function after the first argument.
  - Insert a dot (++.++) in between the first argument and the name of the
 function.

Example:

  (dom-parent-node node)


should be written:

  (doc.parentNode node)


~~ On the client side, the functions that return several elements (such as
++dom-child-nodes++) return //lists//. Their methods counterpart return
vectors. 


== Synopsis ==

=== server & client ===

  (typeof obj)
  (dom-node-element? node)
  (dom-node-text? node)
  (dom-node-document? node)
  (dom-node-comment? node)
  (dom-node-document-fragment? node)
  (dom-node-attr? node)
  (dom-has-attributes? node)
  (dom-get-attributes node)
  (dom-has-attribute? node string)
  (dom-get-attribute node string)
  (dom-remove-attribute! node string)
  (dom-set-attribute! node name value)
  (dom-owner-document node)
  (dom-has-child-nodes? node)
  (dom-child-nodes node)
  (dom-set-child-node! node child)
  (dom-first-child node)
  (dom-last-child node)
  (dom-next-sibling node)
  (dom-previous-sibling node)
  (dom-node-name node)
  (dom-node-type node)
  (dom-parent-node node)
  (dom-append-child! node new)
  (dom-remove-child! node old)
  (dom-clone-node node bool)
  (dom-insert-before! node new ref)
  (dom-replace-child! node new old)
  (dom-get-element-by-id [node] string)
  (dom-get-elements-by-tag-name [node] string)
  (dom-get-elements-by-class [node] string)


=== server only ===

  (dom-normalize! node)


=== client only ===

  (main-window-height)
  (main-window-width)
  (dom-node-eval node)
  (node-style-get node prop)
  (node-style-set! node prop value)
  (node-bounding-box node [margin])
  (node-bounding-box-x node)
  (node-bounding-box-y node)
  (bounding-box->list bbox])
  (bounding-box-x bbox [loc])
  (bounding-box-y bbox [loc])
  (css-add-style! document texta)
  (iframe-scroll-height iframe)
  (innerHTML-set! node-or-id html)
  (get-selection)


== Examples ==
<example>get-element-by-id, append-child, remove-child, parent-node, node-</example>

== Server & Client Definitions ==
<server>
<client>

=== ++(typeof obj)++ ===
<function> typeof
<procedure> typeof
<arguments>
^  arguments       ^   type       ^  short description               ^
| obj             |  any type     | any value.                       |
</arguments>

Returns a string of character denoting the type of ++obj++.
</procedure>
</function>

=== ++(dom-has-attributes? node)++ ===
<function> dom-has-attributes?
<procedure> dom-has-attributes?
<procedure> hasAttributes

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns ++#t++ if ++node++ has //attributes//. Otherwise, returns ++#f++.
</procedure>
</procedure>
</function>

=== ++(dom-node-element? node)++ ===
<function> dom-node-element?
<procedure> dom-node-element?

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns ++#t++ if ++node++ is an XML //element//. Otherwise, returns ++#f++.
</procedure>
</function>

=== ++(dom-node-text? node)++ ===
<function> dom-node-text?
<procedure> dom-node-text?

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element of a document.        |
</arguments>

Returns ++#t++ if ++node++ is an XML //text//. Otherwise, returns ++#f++.
</procedure>
</function>

=== ++(dom-node-document? node)++ ===
<function> dom-node-document?
<procedure> dom-node-document?

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element of a document.        |
</arguments>

Returns ++#t++ if ++node++ is an XML //document//. Otherwise, returns ++#f++.
</procedure>
</function>

=== ++(dom-node-comment? node)++ ===
<function> dom-node-comment?
<procedure> dom-node-comment?

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element of a document.        |
</arguments>

Returns ++#t++ if ++node++ is an XML //comment//. Otherwise, returns ++#f++.
</procedure>
</function>

=== ++(dom-node-document-fragment? node)++ ===
<function> dom-node-document-fragment?
<procedure> dom-node-document-fragment?

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element of a document-fragment.        |
</arguments>

Returns ++#t++ if ++node++ is an XML //document-fragment//. Otherwise, returns ++#f++.
</procedure>
</function>

=== ++(dom-node-attr? node)++ ===
<function> dom-node-attr?
<procedure> dom-node-attr?

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element of a attr.        |
</arguments>

Returns ++#t++ if ++node++ is an XML //attr//. Otherwise, returns ++#f++.
</procedure>
</function>

=== ++(dom-get-attributes node)++ ===
<function> dom-get-attributes
<procedure> dom-get-attributes
<procedure> getAttributes

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the list of ++node++ //attributes//.
</procedure>
</procedure>
</function>

=== ++(dom-has-attribute? node name)++ ===
<function> dom-has-attribute?
<procedure> dom-has-attribute?
<procedure> hasAttribute

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| name             |  string      | the attribute name.              |
</arguments>

Returns ++#t++ if ++node++ has attribute ++name++. Otherwise, 
returns ++#f++.
</procedure>
</procedure>
</function>

=== ++(dom-get-attribute node name)++ ===
<function> dom-get-attribute
<procedure> dom-get-attribute
<procedure> getAttribute

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| name             |  string      | the attribute name.              |
</arguments>

Returns the value of attribute ++name++ of ++node++. If ++node++ does not
have that attribute, the behavior is unspecified.
</procedure>
</procedure>
</function>

=== ++(dom-remove-attribute! node name)++ ===
<function> dom-remove-attribute!
<procedure> dom-remove-attribute!
<procedure> removeAttribute

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| name             |  string      | the attribute name.              |
</arguments>

Removes the attribute ++name++ from ++node++. If ++node++ does not
have that attribute, the behavior is unspecified.
</procedure>
</procedure>
</function>

=== ++(dom-set-attribute! node name value)++ ===
<function> dom-set-attribute!
<procedure> dom-set-attribute!
<procedure> setAttribute

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| name             |  string      | the attribute name.              |
| value            |  obj         | any value.                       |
</arguments>

Sets a new ++value++ for the attribute ++name++ from ++node++. If ++node++ 
does not have that attribute, the behavior is unspecified.
</procedure>
</procedure>
</function>

=== ++(dom-owner-document node)++ ===
<function> dom-owner-document
<procedure> dom-owner-document
<procedure> ownerDocument

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the document that //owns// ++node++.
</procedure>
</procedure>
</function>

=== ++(dom-has-child-nodes? node)++ ===
<function> dom-has-child-nodes?
<procedure> dom-has-child-nodes?
<procedure> hasChildNodes

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns ++#t++ if ++node++ has child nodes. Otherwise, returns ++#f++.
</procedure>
</procedure>
</function>

=== ++(dom-child-nodes node)++ ===
<function> dom-child-nodes
<procedure> dom-child-nodes
<procedure> childNodes

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the list of children of ++node++.
</procedure>
</procedure>
</function>

=== ++(dom-set-child-node! node new)++ ===
<function> dom-set-child-node!
<procedure> dom-set-child-node!

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| new              |  element     | an element built by any markup.  |
</arguments>

Set the new child of ++node++ be ++new++. This function first removes
all the current children of ++node++ and then add ++new++. This is
a shorthand for

  (set! node.innerHTML "")
  (dom-append-child! node new)

</procedure>
</function>

=== ++(dom-first-child node)++ ===
=== ++(dom-last-child node)++ ===
<function> dom-first-child
<function> dom-last-child
<procedure> dom-first-child
<procedure> dom-last-child
<procedure> firstChild
<procedure> lastChild

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the first (respectively the last) child of ++node++.
</procedure>
</procedure>
</procedure>
</procedure>
</function>
</function>

=== ++(dom-next-sibling node)++ ===
=== ++(dom-previous-sibling node)++ ===
<function> dom-next-sibling
<function> dom-previous-sibling
<procedure> dom-next-sibling
<procedure> dom-previous-sibling
<procedure> nextSibling
<procedure> previousSibling

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the next (respectively the previous) sibling of ++node++.
</procedure>
</procedure>
</procedure>
</procedure>
</function>
</function>

=== ++(dom-node-name node)++ ===
=== ++(dom-node-type node)++ ===
<function> dom-node-name
<function> dom-node-type
<procedure> dom-node-name
<procedure> dom-node-type
<procedure> nodeName
<procedure> nodeType

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the name (respectively the type) of ++node++.
</procedure>
</procedure>
</procedure>
</procedure>
</function>
</function>

=== ++(dom-parent-node node)++ ===
<function> dom-parent-node
<procedure> dom-parent-node
<procedure> parentNode

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Returns the parent of ++node++.
</procedure>
</procedure>
</function>

=== ++(dom-append-child! node child)++ ===
=== ++(dom-remove-child! node child)++ ===
<function> dom-append-child!
<function> dom-remove-child!
<procedure> dom-append-child!
<procedure> dom-remove-child!
<procedure> appendChild
<procedure> removeChild

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| child            |  element     | an element built by any markup.  |
</arguments>

Adds (respec. removes) a new ++child++ to (respec. from) ++node++.
</procedure>
</procedure>
</procedure>
</procedure>
</function>
</function>

=== ++(dom-clone-node node deep)++ ===
<function> dom-clone-node
<procedure> dom-clone-node
<procedure> cloneNode

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| deep             |  boolean     | deep or shallow cloning.         |
</arguments>

Clones ++node++. If the argument ++deep++ is ++#t++ the cloning is deep
(i.e., children are recursively cloned too). Otherwise, it is shallow
(i.e., children are not cloned).
</procedure>
</procedure>
</function>

=== ++(dom-insert-before! node new ref)++ ===
<function> dom-insert-before!
<procedure> dom-insert-before!
<procedure> insertBefore

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| new              |  element     | an element built by any markup.  |
| ref              |  element     | an element built by any markup.  |
</arguments>

Inserts a ++new++ node in the children list of ++node++, just after the
element ++ref++. If the element ++ref++ is not the children list, the
behavior is unspecified.
</procedure>
</procedure>
</function>

=== ++(dom-replace-child! node new old)++ ===
<function> dom-replace-child!
<procedure> dom-replace-child!
<procedure> replaceChild

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
| new              |  element     | an element built by any markup.  |
| ref              |  element     | an element built by any markup.  |
</arguments>

Replaces the ++old++ with a ++new++ node in the children list of ++node++.
If the element ++old++ is not the children list, nothing happens.
</procedure>
</procedure>
</function>

=== ++(dom-get-element-by-id [node] id)++ ===
<function> dom-get-element-by-id
<procedure> dom-get-element-by-id
<procedure> getElementById

<arguments>
^  arguments       ^   type       ^  short description                      ^
| node             |  element     | an optional element for the search.     |
| id               |  string      | the seeked element's identifier.        |
</arguments>

Search an element in ++node++ children whose identifier is ++id++. The function
++string=?++ that compare characters by characters is used to compare 
identifiers. 

~~ Note 1: On client code, ++node++ must a document, i.e., an element built
by the ++<HTML>++ markup. This restriction does not apply to server code.

~~ Note 2: normally identifier are unique so a document should not contain 
two or more elements with the same identifier.
</procedure>
</procedure>
</function>

=== ++(dom-get-elements-by-tag-name node name)++ ===
<function> dom-get-elements-by-tag-name
<procedure> dom-get-elements-by-tag-name
<procedure> getElementsByTagName

<arguments>
^  arguments       ^   type       ^  short description                      ^
| node             |  element     | an optional element for the search.     |
| name             |  string      | the seeked elements tag name.           |
</arguments>

Search all the elements in ++node++ whose tag name is ++id++. The
tag name is the name of the markup that has been used to build the
elements. The function ++string=?++ that compare characters by
characters is used to compare identifiers.  

~~ Note: On client code, ++node++ must a document, i.e., an element built
by the ++<HTML>++ markup. This restriction does not apply to server code.
</procedure>
</procedure>
</function>

=== ++(dom-get-elements-by-class document name)++ ===
<function> dom-get-elements-by-class
<procedure> dom-get-elements-by-class
<procedure> getElementsByClass

<arguments>
^  arguments       ^   type       ^  short description                      ^
| document         |  element     | an element.                             |
| name             |  string      | the seeked elements class.              |
</arguments>

Search all the elements in ++document++ whose class ++name++. The
function ++string=?++ that compare characters by
characters is used to compare identifiers.  

~~ Note: On client code, ++node++ must a document, i.e., an element built
by the ++<HTML>++ markup. This restriction does not apply to server code.
</procedure>
</procedure>
</function>

</server>

== Server only Definitions ==
<server>

=== ++(dom-normalize! node)++ ===
<function> dom-normalize!

<arguments>
^  arguments       ^   type       ^  short description                      ^
| node             |  element     | an element built by any markup.         |
</arguments>

Walk through a node children in order to cleanup the parent/child
relationship. This function is only useful after internal surgery on
the tree. In general, it should not be directly called by user source code.
</function>

</server>

== Client only Definitions ==
<client>

=== ++(main-window-height)++ ===
<procedure> main-window-height
<arguments>
^  arguments       ^   type       ^  short description               ^
</arguments>

Returns the height of the current window. We **strongly** recommend to
use this function instead of fetching information from the global
++window++ data structure since only this function ensures portability
between Web browsers. 
</procedure>

=== ++(main-window-width)++ ===
<procedure> main-window-width
<arguments>
^  arguments       ^   type       ^  short description               ^
</arguments>

Returns the width of the current window. We **strongly** recommend to use this
function instead of fetching information from the global ++window++ 
data structure since only this function ensures portability between 
Web browsers.
</procedure>


=== ++(dom-node-eval node)++ ===
<procedure> dom-node-eval

<arguments>
^  arguments       ^   type       ^  short description               ^
| node             |  element     | an element built by any markup.  |
</arguments>

Evaluates all the scripts children of ++node++. It returns the last
evaluated value.
</procedure>

=== ++(node-style-get node prop)++ ===
<procedure> node-style-get

<arguments>
^  arguments       ^   type           ^  short description                      ^
| node             |  element         | an element.                             |
| prop             |  keyword/string  | the style field identifier.             |
</arguments>

Return the value associate with ++prop++ in the ++node++ style.
</procedure>

=== ++(node-style-set! node prop value)++ ===
<procedure> node-style-set!

<arguments>
^  arguments       ^   type           ^  short description                      ^
| node             |  element         | an element.                             |
| prop             |  keyword/string  | the style field identifier.             |
| value            |  value           | the style field value.                  |
</arguments>

This client function sets a new value of a style field. The value
can be any Hop value and the field can be denoted by its name (a string)
or its identifier (a keyword). Example:

  (let ((n (dom-get-element-by-id document 'a-box)))
     (node-style-set! n :background "#eee")
     (node-style-set! n :opacity 0.4))


</procedure>

=== ++(node-bounding-box-x node)++ ===
<procedure> node-bounding-box-x

<arguments>
^  arguments       ^   type           ^  short description                      ^
| node             |  element         | an element.                             |
</arguments>

Returns the bounding-box horizontal position of an HTML element.
</procedure>

=== ++(node-bounding-box-y node)++ ===
<procedure> node-bounding-box-y

<arguments>
^  arguments       ^   type           ^  short description                      ^
| node             |  element         | an element.                             |
</arguments>

Returns the bounding-box vertical position of an HTML element.
</procedure>

=== ++(node-bounding-box node [margin])++ ===
<procedure> node-bounding-box
<arguments>
^  arguments  ^   type              ^  short description                    ^
| node        |  element or string  | an element or an element identifier.  |
| margin      |  integer            | an optional margin size.              |
</arguments>

Returns the bounding box of an element. The bounding box is represented by
four elements: the top-left coordinates, the width and the height
of the box.

~~ The optional integer ++margin++ argument, when specified, adds a margin 
(expressed in pixels) around the plain elements' bounding box.
</procedure>

=== ++(bounding-box->list bbox)++ ===
<procedure> bounding-box->list
<arguments>
^  arguments       ^   type           ^  short description                    ^
| bbox             |  bounding box    | a bounding box.                       |
</arguments>

Converts a bounding box into a list.
</procedure>

=== ++(bounding-box-x bbox [loc])++ ===
<procedure> bounding-box-x
<arguments>
^  arguments       ^   type           ^  short description                    ^
| bbox             |  bounding box    | a bounding box.                       |
| loc              |  string          | ++"n"++, ++"ne"++, ++"e"++, ++"se"++, ++"s"++, ++"sw"++, ++"w"++, ++"nw"++. |
</arguments>

Returns the horizontal coordinate of a point specified by the optional
argument ++loc++, of the bounding box. The optional ++loc++ argument
defaults to ++"nw"++.
</procedure>

=== ++(bounding-box-y bbox [loc])++ ===
<procedure> bounding-box-y
<arguments>
^  arguments       ^   type           ^  short description                    ^
| bbox             |  bounding box    | a bounding box.                       |
| loc              |  string          | ++"n"++, ++"ne"++, ++"e"++, ++"se"++, ++"s"++, ++"sw"++, ++"w"++, ++"nw"++. |
</arguments>

Returns the vertical coordinate of a point specified by the optional
argument ++loc++, of the bounding box. The optional ++loc++ argument
defaults to ++"nw"++.
</procedure>

=== ++(css-add-style! document text)++ ===
<procedure> css-add-style!

<arguments>
^  arguments       ^   type           ^  short description                    ^
| document         |  document        | an entire document.                   |
| text             |  string          | the definition of the CCS rules.      |
</arguments>

Adds the rules described in ++text++ in the document style sheet. 

~~ This function is not supported by all browsers (i.e., it has no effect
on IE7).

</procedure>

=== ++(iframe-scroll-height iframe)++ ==
<procedure> iframe-scroll-height
<arguments>
^  arguments       ^   type           ^  short description                      ^
| iframe           |  element         | an element.                             |
</arguments>

Returns the actual height (the //scroll height//) of an ++<IFRAME>++.
This can be used to automatically adjust the size of an ++<IFRAME>++ to 
fit its content height. Example:

  (<IFRAME> 
     :src (format "data:text/html;base64,~a" (base64-encode body))
     :onload ~(let ((e this)) (set! e.height (iframe-scroll-height e)))
     :width "100%" :height "400px"
     :style "border: 0")


</procedure>

=== ++(innerHTML-set! nid html)++ ===
<procedure> innerHTML-set!
<arguments>
^  arguments   ^   type              ^  short description  ^
| nid          |  element or string  | an element or an element identifier.  |
| html         |  string or tree     | a HTML tree.  |
</arguments>

Replaces the body of the element ++nid++ with the new HTML ++tree++.
The function ++innerHTML-set!++ **evaluates all the scripts** of the
argument ++html++.

~~ The element ++nid++ is either an DOM node or a identifier referring to
a node. 

~~ The ++html++ tree is either:

  * a string denoting an HTML tree. In case that, it is parsed for
 constructing an actual DOM tree that is set to ++nid++.

  * a DOM tree.
</procedure>

=== ++(get-selection)++ ===
<procedure> get-selection

Returns the current text selection as a string. Returns an empty string
is no text is currently selected.
</procedure>

</client>


== See also ==
<see-also>dom-, get-element-by-id</see-also>

</doc>
