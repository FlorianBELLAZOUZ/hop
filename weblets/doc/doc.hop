;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/doc/doc.hop                     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Apr  9 14:42:21 2006                          */
;*    Last change :  Tue Oct 24 14:55:00 2006 (serrano)                */
;*    Copyright   :  2006 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    HOP meta-documentation.                                          */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hopdoc
   (import  hopdoc_config
	    hopdoc_api
	    hopdoc_wiki
	    hopdoc_widgets
	    hopdoc_services
	    hopdoc_tutorials
	    hopdoc_libraries
	    hopdoc_weblets
	    hopdoc_index
	    hopdoc_search))

;*---------------------------------------------------------------------*/
;*    doc ...                                                          */
;*---------------------------------------------------------------------*/
(define-service (doc)
   (let ((req (the-current-request)))
      (if (authorized-service? req 'doc)
	  (doc-main req #f)
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    doc/documentation ...                                            */
;*---------------------------------------------------------------------*/
(define-service (doc/documentation)
   (let* ((file (string-append (doc-dir) "/etc/doc.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    doc/weblet ...                                                   */
;*---------------------------------------------------------------------*/
(define-service (doc/weblet weblet)
   (let ((req (the-current-request)))
      (if (authorized-service? req 'doc)
	  (begin
	     (setup-api-tables!)
	     (doc-main req (<SCRIPT>
			      :type "text/javascript"
			      (select-weblet-pad-on-load weblet))))
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    doc-main ...                                                     */
;*---------------------------------------------------------------------*/
(define (doc-main req script)
   (let ((prefs (make-file-name (doc-rc-directory) "doc.prefs")))
      (thread-start! (make-thread (lambda () (setup-api-tables!))))
      (when (file-exists? prefs) (doc-preferences-load prefs))
      (<DOC>
	 script
	 (<NOTEPAD>
	    :id "doc-notepad"
	    (<NPHEAD> "")
	    (<NPTAB> :id "doc-api"
		     (<NPTABHEAD> "API")
		     (<API>))
	    (<NPTAB> :id "doc-core"
		     (<NPTABHEAD> "Core language")
		     (<DIV>
			:class "core"
			(doc-page
			 (make-file-name (doc-core-dir) "core.wiki")
			 (make-wiki-request-syntax (doc-wiki-syntax)
						   req))))
	    (<NPTAB> :id "doc-libraries"
		     (<NPTABHEAD> "Libraries")
		     (<LIBRARIES>))
	    (<NPTAB> :id "doc-wiki"
		     (<NPTABHEAD> "Wiki syntax")
		     (<DIV>
			:class "wiki"
			(doc-page
			 (make-file-name (doc-wiki-dir) "syntax.wiki")
			 (make-wiki-request-syntax (doc-wiki-syntax)
						   req))))
	    (<NPTAB> :id "doc-weblets"
		     (<NPTABHEAD> "Weblets")
		     (<WEBLETS> req))
	    (<NPTAB> :id "doc-tutorials"
		     (<NPTABHEAD> "Tutorials")
		     (<TUTORIALS> req))
	    (<NPTAB> :id "doc-index"
		     (<NPTABHEAD> "Index")
		     (<INDEX>))))))


