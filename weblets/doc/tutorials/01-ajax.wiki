<doc> Ajax

== Description ==

Asynchronous server function calls is a means for clients to invoke
services on servers. The result of such invocation is a data structure
containing a status code and a characters string denoting the answer.

~~ Asynchronous server calls are ubiquitous in HOP. They are implicitly
present in on-demand ++<NOTEPAD>++s and ++<TREE>++s. They are explicit
with the ++with-hop++ client function calls. In this tutorial
we show to use the latter.

~~ In this tutorial, we are going to use asynchronous function calls for
searching a database located on the server each time a character is
typed-in in an input text of the client. The matches will be instantly
displayed in the client.

== Version 1 ==

In this version, the server builds a HTML tree that is transmitted
as a sequence of characters to the client. The client parses these
characters for elaborating locally a new tree that is inserted in
the graphical user interface.

=== The server code ===
The server code implements a small database containing programming
language description.

<example>
  (module tutorial-ajax
     (library sqlite)
     (export tutorial-ajax))

  ;; create an in-memory database
  (define *db* (instantiate::sqlite))

  ;; create a table
  (sqlite-exec *db* "CREATE TABLE languages (name STRING, kind STRING)")

  ;; populate the table
  (for-each (lambda (kind)
	       (for-each (lambda (lang)
			    (sqlite-exec *db* "INSERT INTO languages VALUES (~q, ~q)" lang (car kind)))
			 (cadr kind)))
	    '(("functional" ("Haskell" "Hop" "ML"))
	      ("imperative" ("Ada" "C" "Pascal"))
	      ("object" ("Smalltalk" "Java"))))

  ;; define the weblet searching the database
  (define-service (tutorial-ajax v)
      (<TABLE>
         :border 1
         (map (lambda (x)
                 (<TR> (<TD> x)))
              (sqlite-map *db* (lambda (x) x) "SELECT name FROM languages WHERE (name LIKE '%~a%')" v))))
</example>

=== The client code ===
The client code consists in a simple text input selection. Each time a
character is typed-in, the client invokes the
,(<APIREF> "service" "service.wiki") ++tutorial-ajax++ on the server.
This returns a vector that is displayed in the ++show++ ++<DIV>++ element.

<example>
  (module tutorial-ajax-html
     (import tutorial-ajax))

  (<HTML>
     (<HEAD>)
     (let ((show (<DIV> "")))
        (<BODY>
           (<DIV> "Type a programming language name")
           (<INPUT> :type "text"
                    :onkeyup ~(with-hop ($tutorial-ajax this.value)
                                  (lambda (h) (innerHTML-set! $show h))))
           (<DIV> "Results...")
           show)))

== Version 2 ==

In this second version instead of writting an HTML tree that is parsed
by the client, the server directly send to the client a list.

=== The server code ===
The only variation with respect to the first version are located in the
++tutorial-ajax++ service.

<example>
  (module tutorial-ajax-v2
     (library sqlite)
     (export tutorial-ajax))

  ;; create an in-memory database
  (define *db* (instantiate::sqlite))

  ;; create a table
  (sqlite-exec *db* "CREATE TABLE languages (name STRING, kind STRING)")

  ;; populate the table
  (for-each (lambda (kind)
	       (for-each (lambda (lang)
			    (sqlite-exec *db* "INSERT INTO languages VALUES (~q, ~q)" lang (car kind)))
			 (cadr kind)))
	    '(("functional" ("Haskell" "Hop" "ML"))
	      ("imperative" ("Ada" "C" "Pascal"))
	      ("object" ("Smalltalk" "Java"))))

  ;; define the weblet searching the database
  (define-service (tutorial-ajax v)
     (sqlite-map *db* (lambda (x) x) "SELECT name FROM languages WHERE (name LIKE '%~a%')" v))
</example>

=== The client code ===
As for the previous version, the client code implements a simple text
input selection. Each time a character is typed-in, the client invokes
the ,(<APIREF> "service" "service.wiki") ++tutorial-ajax++ on the
server. This returns a list of strings from which the client builds a new 
table that replaces the body of the ++<DIV>++ element ++show++ . In this
second version, the code for building the table has been //shifted// from 
the server to the client.

<example>
  (module tutorial-ajax-html-v2
     (import tutorial-ajax-v2))

  (<HTML>
     (<HEAD>)
     (let ((show (<DIV> "")))
        (<BODY>
           (<DIV> "Type a programming language name")
           (<INPUT> :type "text"
                    :onkeyup ~(with-hop ($tutorial-ajax this.value)
                                 (lambda (h)
                                    (let ((table (<TABLE>
                                                     :border 1
					             (<TBODY>
                                                       (map (lambda (x) (<TR> (<TD> x))) h)))))
                                       (if (dom-has-child-nodes? $show)
                                           (dom-remove-child! $show (car (dom-child-nodes $show))))
                                       (dom-append-child! $show table)))))
           (<DIV> "Results...")
           show)))
</doc>
