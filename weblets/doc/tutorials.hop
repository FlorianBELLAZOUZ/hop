;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/doc/tutorials.hop               */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed Apr 26 10:15:54 2006                          */
;*    Last change :  Fri May  5 21:02:36 2006 (serrano)                */
;*    Copyright   :  2006 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    The HOP tutorials                                                */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hopdoc_tutorials

   (import hopdoc_config
	   hopdoc_wiki
	   hopdoc_api
	   hopdoc_widgets
	   hopdoc_search)
   
   (export (<TUTORIALS> req)))

;*---------------------------------------------------------------------*/
;*    <TUTORIALS> ...                                                  */
;*---------------------------------------------------------------------*/
(define (<TUTORIALS> req)
   (let ((pagearea (<DIV> :class "pagearea"
			  :id "pad-tutorials"
			  "Please, select a tutorial."))
	 (syntax (make-wiki-request-syntax *tutorial-syntax* req)))
      (<DIV>
	 :class "tutorials"
	 (<TUTORIALS-MAIN> "pad-tutorials" syntax)
	 pagearea)))

;*---------------------------------------------------------------------*/
;*    *tutorial-syntax* ...                                            */
;*---------------------------------------------------------------------*/
(define *tutorial-syntax*
   (duplicate::wiki-syntax (doc-wiki-syntax)
      (plugins (lambda (id)
		  (case id
		     ((<doc>)
		      (lambda (port title expr)
			 (<DIV> :class "doc" expr)))
		     ((<example>)
		      (lambda (port title expr)
			 (<DIV>
			    :class "example"
			    (<EXAMPLE> expr))))
		     ((<code>)
		      (lambda (port title expr)
			 (<DIV>
			    :class "code"
			    :align "center"
			    (<PRE>
			       :class "example"
			       (decorate-api-wiki-code expr)))))
		     (else
		      ((wiki-syntax-plugins (doc-wiki-syntax)) id)))))
      (keyword list)
      (pre list)
      (tt (wiki-tt-parser
	   (lambda (k)
	      (or (markup-parser k)
		  (server-parser k)
		  (client-parser k)))))
      (type (lambda x
	       (if (and (null? (cdr x)) (string? (car x)))
		   (let ((s (html-string-decode (car x))))
		      (or (class-parser s) (<SPAN> :class "doc-type" x)))
		   (<SPAN> :class "doc-type" x))))))

;*---------------------------------------------------------------------*/
;*    tutorial->name ...                                               */
;*---------------------------------------------------------------------*/
(define (tutorial->name path)
   (with-input-from-file path
      (lambda ()
	 (let ((l (read-line (current-input-port))))
	    (if (substring-at? l "<doc> " 0)
		(substring l 6 (string-length l))
		(let ((i (string-index l "-")))
		   (if (>fx i 0)
		       (substring x (+fx i 1) (-fx (string-length l) 5))
		       (substring x 0 (-fx (string-length l) 5)))))))))

;*---------------------------------------------------------------------*/
;*    <TUTORIALS-MAIN> ...                                             */
;*---------------------------------------------------------------------*/
(define (<TUTORIALS-MAIN> id syntax)
   (let* ((table '())
	  (files (filter-map (lambda (x)
				(when (is-suffix? x "wiki")
				   (let ((s (tutorial->name
					     (make-file-name
					      (doc-tutorials-dir) x))))
				      (set! table (cons (cons s x) table))
				      s)))
			     (sort (directory->list (doc-tutorials-dir))
				   string<?)))
	  (tutorial (service (key)
		       (let* ((cell (assoc key table))
			      (path (and cell
					 (make-file-name
					  (doc-tutorials-dir) (cdr cell)))))
			  (if (and path (file-exists? path))
			      (doc-page path syntax)
			      ""))))
	  (dummy "--select tutorial--"))
      (<DIV>
	 :class "tutorial-title"
	 (<TABLE>
	    :width "100%"
	    :border 0
	    (<TR>
	       (<TH>
		  :align "left"
		  "HOP Tutorials")
	       (<TD>
		  :align "right"
		  (<DIV>
		     :class "selector"
		     (<SELECT>
			:class "tutorial-selector"
			:onmouseup
			~(with-hop ($tutorial this.value)
			    (lambda (h)
			       (let ((el (document.getElementById $id)))
				  (set! el.innerHTML h))))
			:onkeyup
			~(if (= event.keyCode 13)
			     (with-hop ($tutorial this.value)
				(lambda (h)
				   (let ((el (document.getElementById $id)))
				      (set! el.innerHTML h)))))
			(cons (<OPTION> :disabled #f :selected #t dummy)
			      (map (lambda (f) (<OPTION> f :selected #f))
				   files)))
		     (<SPAN> :class "label" "search:")
		     (<INPUT>
			:type "text"
			:size 20
			:title "Hit [Return] to search"
			:onkeyup ~(if (= event.keyCode 13)
				      (hop-iwindow-open
				       "tutorial/search"
				       ($(service (value)
					    (tutorial-search id syntax value))
					 this.value)
				       false false
				       400 200
				       (- window.innerWidth 500) 10))))))))))

;*---------------------------------------------------------------------*/
;*    tutorial-search ...                                              */
;*---------------------------------------------------------------------*/
(define (tutorial-search id syntax value)
   (let* ((l (search-tutorials (doc-tutorials-dir) value))
	  (l2 (sort (map (lambda (v) (cons (tutorial->name v) v)) l)
		    (lambda (a b) (string<? (car a) (car b))))))
      (if (null? l)
	  (<TABLE>
	     :class "search-result"
	     (<TR> 
		(<TH>
		   (format "\"~a\" does not match any entry" value))))
	  (<TABLE>
	     :class "search-result"
	     (<TR> 
		(<TH>
		   (format "\"~a\" matches ~a entries" value (length l))))
	     (map (lambda (v)
		     (<TR>
			(<TD>
			   :class "entry"
			   (<SPAN>
			      :class "href"
			      :onclick
			      ~(with-hop ($(service () (doc-page (cdr v) syntax)))
				  (lambda (h)
				     (hop-iwindow-close "tutorial/search")
				     (let ((e (document.getElementById $id)))
					(set! e.innerHTML h))))
			      (car v)))))
		  l2)))))
	 
      
		       
