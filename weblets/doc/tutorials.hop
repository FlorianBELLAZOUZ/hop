;*=====================================================================*/
;*    serrano/prgm/project/hop/3.0.x/weblets/doc/tutorials.hop         */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed Apr 26 10:15:54 2006                          */
;*    Last change :  Fri Jan 16 13:26:57 2015 (serrano)                */
;*    Copyright   :  2006-15 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    The HOP tutorials                                                */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hopdoc_tutorials

   ~(import hopdoc_client)
   
   (import  hopdoc_config
	    hopdoc_wiki
	    hopdoc_api
	    hopdoc_widgets
	    hopdoc_search)
   
   (export  (<TUTORIALS> req)
	    (<TUTORIALREF> lbl file)
	    doc/tutorial))

;*---------------------------------------------------------------------*/
;*    <TUTORIALS> ...                                                  */
;*---------------------------------------------------------------------*/
(define (<TUTORIALS> req)
   (initialize-tutorials! req)
   (<DIV> :class "tutorials"
      (<TUTORIALS-MAIN> "pad-tutorials")
      (<DIV> :class "pagearea" :id "pad-tutorials"
	 "Please, select a tutorial.")))

;*---------------------------------------------------------------------*/
;*    Tutorial global variables                                        */
;*---------------------------------------------------------------------*/
(define *tutorial-syntax* #unspecified)
(define *tutorial-table* #unspecified)
(define *tutorial-files* '())

;*---------------------------------------------------------------------*/
;*    initialize-tutorials! ...                                        */
;*---------------------------------------------------------------------*/
(define (initialize-tutorials! req)
   (when (eq? *tutorial-table* #unspecified)
      (let* ((table '())
	     (files (filter-map (lambda (x)
				   (when (is-suffix? x "wiki")
				      (let ((s (tutorial->name
						(make-file-name
						 (doc-tutorials-dir) x))))
					 (set! table (cons (cons s x) table))
					 s)))
				(sort (directory->list (doc-tutorials-dir))
				      string<?))))
	 (set! *tutorial-files* files)
	 (set! *tutorial-table* table)))
   ;; wiki syntax
   (set! *tutorial-syntax*
	 (make-wiki-request-syntax
	  (duplicate::wiki-syntax (doc-wiki-syntax)
	     (plugins (lambda (id)
			 (case id
			    ((<doc>)
			     (lambda (port title expr)
				(<DIV> :class "doc" expr)))
			    ((<example>)
			     (lambda (port title expr)
				(<DIV> :class "example"
				   (<EXAMPLE> expr))))
			    ((<code>)
			     (lambda (port title expr)
				(<DIV> :class "code"
				   :align "center"
				   (<PRE>
				      :class "example"
				      (decorate-api-wiki-code expr)))))
			    ((<console>)
			     (lambda (port title expr)
				(<DIV> :class "console"
				   :align "center"
				   (<PRE> :class "console"
				      (decorate-api-wiki-code expr)))))
			    (else
			     (with-access::wiki-syntax (doc-wiki-syntax) (plugins)
				(plugins id))))))
	     (keyword list)
	     (pre list)
	     (tt (wiki-tt-parser
		  (lambda (k)
		     (or (markup-parser k)
			 (server-parser k)
			 (client-parser k)))))
	     (type (lambda x
		      (if (and (null? (cdr x)) (string? (car x)))
			  (let ((s (html-string-decode (car x))))
			     (or (class-parser s)
				 (<SPAN> :class "doc-type" x)))
			  (<SPAN> :class "doc-type" x)))))
	  req)))

;*---------------------------------------------------------------------*/
;*    doc/tutorial ...                                                 */
;*---------------------------------------------------------------------*/
(define-service (doc/tutorial file-or-key)
   (initialize-tutorials! (current-request))
   (cond
      ((or (eq? file-or-key #unspecified) (=fx (string-length file-or-key) 0))
       "Please, select a tutorial.")
      ((file-exists? file-or-key)
       (doc-page file-or-key *tutorial-syntax* (current-request)))
      (else
       (let ((cell (assoc file-or-key *tutorial-table*)))
	  (if cell
	      (let ((path (make-file-name (doc-tutorials-dir) (cdr cell))))
		 (doc-page path *tutorial-syntax* (current-request)))
	      "")))))
   
;*---------------------------------------------------------------------*/
;*    <TUTORIALREF> ...                                                */
;*---------------------------------------------------------------------*/
(define (<TUTORIALREF> lbl file)
   (let ((path (make-file-name (doc-tutorials-dir) file))
	 (id "pad-tutorials"))
      (<SPAN> :class "href tutorialref" 
	 :onclick ~(tutorialref $id $path)
	 lbl)))

;*---------------------------------------------------------------------*/
;*    tutorial->name ...                                               */
;*---------------------------------------------------------------------*/
(define (tutorial->name path)
   (with-input-from-file path
      (lambda ()
	 (let ((l (read-line (current-input-port))))
	    (if (substring-at? l "<doc> " 0)
		(substring l 6 (string-length l))
		(let ((i (string-index l "-")))
		   (if (and (fixnum? i) (>fx i 0))
		       (substring l (+fx i 1) (-fx (string-length l) 5))
		       (substring l 0 (-fx (string-length l) 5)))))))))

;*---------------------------------------------------------------------*/
;*    <TUTORIALS-MAIN> ...                                             */
;*---------------------------------------------------------------------*/
(define (<TUTORIALS-MAIN> id)
   (<DIV> :class "tutorial-title"
      ~(define (tutorial val)
	  (history-add! tutorial-history $id val)
	  (with-hop ($doc/tutorial val)
	     (lambda (h)
		(let ((el (dom-get-element-by-id document $id)))
		   (innerHTML-set! el h)))))
      (<TABLE> :width "100%" :border 0
	 (<TR>
	    (<TH> :align "left"
	       "HOP Tutorials")
	    (<TD> :align "right"
	       (<DIV> :class "selector"
		  (<SELECT> :class "tutorial-selector"
		     :onchange ~(tutorial this.value)
		     :onkeyup ~(if (= event.keyCode 13)
				   (tutorial this.value))
		     (cons (<OPTION> :disabled #f :selected #t :value ""
			      "--select tutorial--")
			   (map (lambda (f) (<OPTION> :selected #f
					       :value f
					       f))
				*tutorial-files*)))
		  (<SPAN> :class "label" "search:")
		  (<INPUT> :type "text" :size 20
		     :title "Hit [Return] to search"
		     :onkeyup
		     ~(if (= event.keyCode 13)
			  (window-open :id "tutorial/search"
			     :src ($(service (value) (tutorial-search id value))
				    this.value)
			     :width 400 :height 200
			     :left (- window.innerWidth 500) :top 10
			     :parent document.body)))))))))

;*---------------------------------------------------------------------*/
;*    tutorial-search ...                                              */
;*---------------------------------------------------------------------*/
(define (tutorial-search id value)
   (let* ((l (search-tutorials (doc-tutorials-dir) value))
	  (l2 (sort (map (lambda (v) (cons (tutorial->name v) v)) l)
		    (lambda (a b) (string<? (car a) (car b))))))
      (if (null? l)
	  (<TABLE> :class "search-result"
	     (<TR> 
		(<TH>
		   (format "\"~a\" does not match any entry" value))))
	  (<TABLE> :class "search-result"
	     (<TR> 
		(<TH>
		   (format "\"~a\" matches ~a entries" value (length l))))
	     (map (lambda (v)
		     (<TR>
			(<TD> :class "entry"
			   (<SPAN> :class "href"
			      :onclick
			      ~(begin
				  (history-add! tutorial-history $id $(cdr v))
				  (with-hop ($doc/tutorial $(cdr v))
				     (lambda (h)
					(window-close "tutorial/search")
					(let ((el (dom-get-element-by-id
						   document $id)))
					   (innerHTML-set! el h)))))
			      (car v)))))
		  l2)))))
