;*=====================================================================*/
;*    serrano/prgm/project/hop/1.9.x/weblets/doc/libraries.hop         */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon May  8 06:21:47 2006                          */
;*    Last change :  Fri Sep 19 14:54:40 2008 (serrano)                */
;*    Copyright   :  2006-08 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    The HOP libraries doc.                                           */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hopdoc_libraries

   (import hopdoc_config
	   hopdoc_wiki
	   hopdoc_api
	   hopdoc_widgets
	   hopdoc_search)
   
   (export (<LIBRARIES>)))

;*---------------------------------------------------------------------*/
;*    <LIBRARIES> ...                                                  */
;*---------------------------------------------------------------------*/
(define (<LIBRARIES>)
   (<DIV> :class "libraries"
      (<DIV> :class "libraries-title"
	 :onclick ~(with-hop ($(service () (<LIBRARIES-TOC>)))
		      (lambda (h)
			 (innerHTML-set! "pad-libraries" h)))
	 "HOP Server Libraries")
      (<DIV> :id "pad-libraries" (<LIBRARIES-TOC>))))

;*---------------------------------------------------------------------*/
;*    <LIBRARIES-TOC> ...                                              */
;*---------------------------------------------------------------------*/
(define (<LIBRARIES-TOC>)
   (let ((l (search-libraries (doc-api-dir))))
      (cond
	 ((null? l)
	  "Libraries description")
	 ((null? (cdr l))
	  (<TABLE> :class "api-index"
	     (<COLGROUP> :span 2 :width "50%")
	     (<TR> (<TD> (car l)))))
	 (else
	  (let ((l2 (list-split! l
				 (inexact->exact (ceiling (/ (length l) 2)))
				 "&#160;")))
	     (<TABLE> :class "api-index"
		(<COLGROUP> :span 2 :width "50%")
		(map (lambda (a b) (<TR> (<TD> a) (<TD> b)))
		     (car l2) (cadr l2))))))))

