;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/info/info.hop                   */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Sun Nov 19 07:34:47 2006 (serrano)                */
;*    Copyright   :  2005-06 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP info weblet                                                  */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module weblet_info)

;*---------------------------------------------------------------------*/
;*    info-event ...                                                   */
;*---------------------------------------------------------------------*/
(define info-event
   (instantiate::hop-event (name "connect")))

;*---------------------------------------------------------------------*/
;*    traffic-hookingp ...                                             */
;*---------------------------------------------------------------------*/
(define traffic-hookingp #f)

;*---------------------------------------------------------------------*/
;*    traffic-hook ...                                                 */
;*---------------------------------------------------------------------*/
(define traffic-hook
   (lambda (req rep)
      (when traffic-hookingp
	 (with-access::http-request req (http host port path user date)
	    (signal-hop-event! info-event
			       (<TR> :class "remote"
				  (<TD> :nowrap #t
				     host ":" port)
				  (<TD> :nowrap #t
				     path)
				  (<TD> :nowrap #t
				     (if (user? user) (user-name user) ""))
				  (<TD> :nowrap #t
				     date)))))
      rep))

;*---------------------------------------------------------------------*/
;*    remote-hook ...                                                  */
;*---------------------------------------------------------------------*/
(hop-http-response-remote-hook-add! traffic-hook)

;*---------------------------------------------------------------------*/
;*    info weblet ...                                                  */
;*    -------------------------------------------------------------    */
;*    INFO falls into the admin tools, hence, in addition to be        */
;*    granted the right to execute INFO, the ADMIN right must be       */
;*    granted for executing it.                                        */
;*---------------------------------------------------------------------*/
(define-service (info)
   (let ((req (current-request)))
      (if (authorized-service? req 'admin)
	  (<HTML>
	     (<HEAD>
		:title "Hop Info weblet"
		:base (service-base-url info req)
		:include "hop-notepad" "hop-sorttable"
		:css "info.hss")
	     (<BODY>
		:onunload ~(with-hop ($(service ()
					  (set! traffic-hookingp #f))))
		(<DIV>
		   :align "center"
		   (<TABLE>
		      :class "info"
		      (<TR>
			 (<TD>
			    (<IMG> :src "etc/logo.png"))
			 (<TD>
			    (<TABLE>
			       (<TR>
				  (<TD>
				     (<DIV> :id "title"
					    "Hop Information Center")))
			       (<TR>
				  (<TD>
				     (<DIV> :id "glop"
					    (<NOTEPAD>
					       (<NPHEAD> "")
					       (<NPTAB>
						  (<NPTABHEAD> "Misc")
						  (<DELAY>
						     (lambda ()
							(<MISC>))))
					       (<NPTAB>
						  (<NPTABHEAD> "Caches")
						  (<DELAY>
						     (lambda ()
							(<CACHES>))))
					       (<NPTAB>
						  (<NPTABHEAD> "Traffic")
						  (<DELAY>
						     (lambda ()
							(<TRAFFIC>)))))))))))))
		(<FOOT>)))
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    info/documentation ...                                           */
;*---------------------------------------------------------------------*/
(define-service (info/documentation)
   (let* ((file (hop-resource info/documentation "etc/info.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    <MISC> ...                                                       */
;*---------------------------------------------------------------------*/
(define (<MISC>)
   (set! traffic-hookingp #f)
   (<TABLE>
      :class "hop-info"
      (<TR>
	 (<TH> :align 'right "Version")
	 (<TD> :align 'left (hop-version)))
      (<TR>
	 (<TH> :align 'right "Hop")
	 (<TD> :align 'left (hop-name)))
      (<TR>
	 (<TH> :align 'right "Uptime")
	 (<TD> :align 'left (hop-uptime)))
      (<TR>
	 (<TH> :align 'right "System")
	 (<TD> :align 'left (os-name)))
      (<TR>
	 (<TH> :align 'right "Arch")
	 (<TD> :align 'left (os-arch)))))

;*---------------------------------------------------------------------*/
;*    <CACHES> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<CACHES>)
   (set! traffic-hookingp #f)
   (define (info-cache c)
      (let* ((l (cache->list c))
	     (d (<DIV>
		   :class "cache-files"
		   (<TABLE>
		      :class "cache-files"
		      (map (lambda (ce)
			      (<TR>
				 (<TD>
				    (<A>
				       :href (format "http://hop/~a"
						     (cache-entry-path ce))
				       (cache-entry-upath ce))
				    " " (round
					 (/ (file-size (cache-entry-path ce))
					    1024))
				    "KB ("
				    (seconds->date (cache-entry-mtime ce))
				    ")")))
			   l)))))
	 (<TABLE>
	    :class "info-cache"
	    (<TR>
	       (<TH> (cache-path c)))
	    (<TR>
	       (<TD> (format "~a files, ~a KB on cache."
			     (length l)
			     (round
			      (/ (apply + (map (lambda (ce)
						  (file-size
						   (cache-entry-path ce)))
					       l))
				 1024)))))
	    (<TR> (<TD> "&nbsp;"))
	    (<TR>
	       (<TD> (<BUTTON>
			:onclick ~(with-hop ($(service ()
						 (cache-clear c)
						 ""))
				     (lambda (h)
					(set! $d.innerHTML h)))
			"clear cache")))
	    (<TR> (<TD> "&nbsp;"))
	    (<TR>
	       (<TD> d)))))
   (let ((d (<DIV>
	       :class "cache-info"
	       "")))
      (<TABLE>
	 :class "hop-caches"
	 (<TR>
	    (<TD>
	       :width "20%"
	       :valign 'top
	       (<DIV>
		  :class "caches"
		  (map (lambda (c)
			  (<DIV>
			     :class "cache-link"
			     :width "100%"
			     :onclick ~(with-hop ($(service () (info-cache c)))
					  (lambda (h)
					     (set! $d.innerHTML h)))
			     (make-file-name
			      (basename (dirname (cache-path c)))
			      (basename (cache-path c)))))
		       (registered-caches))))
	    (<TD>
	       :width "80%"
	       :valign 'top
	       d)))))

;*---------------------------------------------------------------------*/
;*    <TRAFFIC> ...                                                    */
;*---------------------------------------------------------------------*/
(define (<TRAFFIC>)
   (set! traffic-hookingp #t)
   (let* ((row (<TR>
		  :class "title"
		  (<TH> "host")
		  (<TH> "path")
		  (<TH> "user")
		  (<TH> "date")))
	  (traffic (<TBODY> row)))
      (<DIV>
       (<DIV> :class "clear"
	      (<BUTTON>
		 :onclick {
		    var e = $traffic
		    var ch = e.childNodes
		    var i

		    for( i = ch.length - 1; i >  0; i-- ) {
		       e.removeChild( ch[ i ] );
	            }
		  } "clear"))
       (<DIV>
	  :class "traffic"
	  (<HOP-EVENT>
	     :handler { hop_append( $traffic )( event ) }
	     :event info-event)
	  (<SORTTABLE> traffic)))))
