;*=====================================================================*/
;*    serrano/prgm/project/hop/2.0.x/weblets/info/info.hop             */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon Feb 14 06:14:00 2005                          */
;*    Last change :  Sat Nov 14 07:19:46 2009 (serrano)                */
;*    Copyright   :  2005-09 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP info weblet                                                  */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module weblet_info)

;*---------------------------------------------------------------------*/
;*    info-event ...                                                   */
;*---------------------------------------------------------------------*/
(define info-event
   (symbol->string (gensym "info")))

;*---------------------------------------------------------------------*/
;*    traffic-hookingp ...                                             */
;*---------------------------------------------------------------------*/
(define traffic-hookingp #f)

;*---------------------------------------------------------------------*/
;*    traffic-hook ...                                                 */
;*---------------------------------------------------------------------*/
(define traffic-hook
   (lambda (req rep)
      (when traffic-hookingp
	 (with-access::http-request req (http host port path user seconds)
	    (hop-event-broadcast! info-event
				  (<TR> :class "remote"
				     (<TD> :nowrap #t
					host ":" port)
				     (<TD> :nowrap #t
					path)
				     (<TD> :nowrap #t
					(if (user? user) (user-name user) ""))
				     (<TD> :nowrap #t
					(seconds->date date))))))
      rep))

;*---------------------------------------------------------------------*/
;*    remote-hook ...                                                  */
;*---------------------------------------------------------------------*/
(hop-http-response-remote-hook-add! traffic-hook)

;*---------------------------------------------------------------------*/
;*    info-fonts ...                                                   */
;*---------------------------------------------------------------------*/
(define info-fonts
   '("cmr10"
     "cursive"
     "monospace"
     "serif"
     "fantasy"
     "default"
     "Andale Mono"
     "Arial"
     "Arial Black"
     "Arial Narrow"
     "Arial Rounded MT Bold"
     "Balker"
     "Bitstream Charter"
     "Bitstream Vera Sans"
     "Bitstream Vera Sans Mono"
     "Bitstream Vera Sans Serif"
     "Bookman Old Style"
     "Bradley Hand ITC"
     "Century"
     "Century Gothic"
     "Charter"
     "Clean"
     "Comic Sans MS"
     "Courier"
     "Courier New"
     "DejaVu Sans"
     "DejaVu Sans Mono"
     "DejaVu Serif"
     "Dingbats"
     "Georgia"
     "Gentium"
     "Engadget"
     "Euclid"
     "Fixed"
     "FreeMono"
     "FreeSans"
     "FreeSerif"
     "Garamond"
     "Impact"
     "jGaramond"
     "King"
     "Liberation Mono"
     "Liberation Sans"
     "Liberation Serif"
     "Lucida"
     "LucidaBright"
     "Lucida Console"
     "Lucida Typewriter"
     "Luxi Mono"
     "Luxi Sans"
     "Luxi Serif"
     "Mathematica1"
     "Modena"
     "Monotype Corsiva"
     "Monospace"
     "New Century Schoolbook"
     "Papyrus"
     "Penguin Attack"
     "sans"
     "sans serif"
     "sans-serif"
     "STIXGeneral"
     "Tahoma"
     "TeX"
     "Times"
     "Times New Roman"
     "Trebuchet MS"
     "Utopia"
     "Verdana"
     "Verona"
     ))

;*---------------------------------------------------------------------*/
;*    info weblet ...                                                  */
;*    -------------------------------------------------------------    */
;*    INFO falls into the admin tools, hence, in addition to be        */
;*    granted the right to execute INFO, the ADMIN right must be       */
;*    granted for executing it.                                        */
;*---------------------------------------------------------------------*/
(define-service (info)
   (let ((req (current-request)))
      (if (authorized-service? req 'admin)
	  (<HTML>
	     (<HEAD> :favicon (service-resource info "etc/favicon.png")
		:title "Hop Info weblet"
		:base (service-base-url info req)
		:include "hop-notepad" "hop-sorttable" "hop-font"
		:css "info.hss")
	     (<BODY>
		:onunload ~(with-hop ($(service ()
					  (set! traffic-hookingp #f))))
		(<DIV> :align "center"
		   (<TABLE> :class "info"
		      (<TR>
			 (<TD>
			    (<IMG> :src "etc/logo.png"))
			 (<TD>
			    (<TABLE>
			       (<TR>
				  (<TD>
				     (<DIV> :id "title"
					"Hop Information Center")))
			       (<TR>
				  (<TD>
				     (<DIV> :id "glop"
					(<NOTEPAD>
					   (<NPHEAD> "")
					   (<NPTAB>
					      (<NPTABHEAD> "Uptime")
					      (<DELAY>
						 (lambda ()
						    (<MISC>))))
					   (<NPTAB>
					      (<NPTABHEAD> "Config")
					      (<DELAY>
						 (lambda ()
						    (<CONFIG>))))
					   (<NPTAB>
					      (<NPTABHEAD> "Server")
					      (<DELAY>
						 (lambda ()
						    (<CONFIG:SERVER>))))
					   (<NPTAB>
					      (<NPTABHEAD> "client")
					      (<DELAY>
						 (lambda ()
						    (<CONFIG:CLIENT>))))
					   (<NPTAB>
					      (<NPTABHEAD> "fonts")
					      (<DELAY>
						 (lambda ()
						    (<CONFIG:FONT>))))
					   (<NPTAB>
					      (<NPTABHEAD> "Weblets")
					      (<DELAY>
						 (lambda ()
						    (<WEBLETS>))))
					   (<NPTAB>
					      (<NPTABHEAD> "Caches")
					      (<DELAY>
						 (lambda ()
						    (<CACHES> req))))
					   (<NPTAB>
					      (<NPTABHEAD> "Events")
					      (<DELAY>
						 (lambda ()
						    (<EVENTS>))))
					   (<NPTAB>
					      (<NPTABHEAD> "Traffic")
					      (<DELAY>
						 (lambda ()
						    (<TRAFFIC>)))))))))))))
		(<FOOT>)))
	  (user-access-denied req))))

;*---------------------------------------------------------------------*/
;*    info/documentation ...                                           */
;*---------------------------------------------------------------------*/
(define-service (info/documentation)
   (let* ((file (service-resource info/documentation "etc/info.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))

;*---------------------------------------------------------------------*/
;*    info/preferences ...                                             */
;*---------------------------------------------------------------------*/
(define-service (info/preferences)
   "No preference for this weblet")

;*---------------------------------------------------------------------*/
;*    <MISC> ...                                                       */
;*---------------------------------------------------------------------*/
(define (<MISC>)
   (set! traffic-hookingp #f)
   (<TABLE>
      :class "hop-info"
      (<TR>
	 (<TH> :align 'right "Version")
	 (<TD> :align 'left (hop-version)))
      (<TR>
	 (<TH> :align 'right "Hop")
	 (<TD> :align 'left (hop-name)))
      (<TR>
	 (<TH> :align 'right "Uptime")
	 (<TD> :align 'left (hop-uptime)))
      (<TR>
	 (<TH> :align 'right "System")
	 (<TD> :align 'left (os-name)))
      (<TR>
	 (<TH> :align 'right "Arch")
	 (<TD> :align 'left (os-arch)))))

;*---------------------------------------------------------------------*/
;*    <CONFIG> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<CONFIG>)
   (<TABLE> :class "hop-info"
      (<TR>
	 (<TH> :align 'right "Var directory")
	 (<TD> :align 'left (hop-var-directory)))
      (<TR>
	 (<TH> :align 'right "Cache directory")
	 (<TD> :align 'left (hop-cache-directory)))
      (<TR>
	 (<TH> :align 'right "RC directory")
	 (<TD> :align 'left (hop-rc-directory)))
      (<TR>
	 (<TH> :align 'right "RC file")
	 (<TD> :align 'left (hop-rc-file)))
      (<TR>
	 (<TH> :align 'right "Default charset")
	 (<TD> :align 'left (hop-charset)))
      (<TR>
	 (<TH> :align 'right "Default locale")
	 (<TD> :align 'left (hop-locale)))
      (<TR>
	 (<TH> :align 'right "Connection ttl")
	 (<TD> :align 'left (hop-connection-ttl)))
      (<TR>
	 (<TH> :align 'right "Connection timeout")
	 (<TD> :align 'left (hop-connection-timeout)))
      (<TR>
	 (<TH> :align 'right "Keep alive timeout")
	 (<TD> :align 'left (hop-keep-alive-timeout)))
      (<TR>
	 (<TH> :align 'right "Remote keep alive timeout")
	 (<TD> :align 'left (hop-remote-keep-alive-timeout)))))

;*---------------------------------------------------------------------*/
;*    <CONFIG:SERVER> ...                                              */
;*---------------------------------------------------------------------*/
(define (<CONFIG:SERVER>)
   (<TABLE> :class "hop-info"
      (map (lambda (e)
	      (<TR> (<TH> :align 'right (symbol->string (car e)))
		    (<TD> :align 'left (with-output-to-string
					  (lambda ()
					     (display (cdr e)))))))
	   (bigloo-configuration))))
   
;*---------------------------------------------------------------------*/
;*    <CONFIG:CLIENT> ...                                              */
;*---------------------------------------------------------------------*/
(define (<CONFIG:CLIENT>)
   ~(<TABLE> :class "hop-info"
       (map (lambda (e)
	       (<TR> (<TH> :align 'right (symbol->string (car e)))
		     (<TD> :align 'left (with-output-to-string
					   (lambda ()
					      (display (cdr e)))))))
	    (hop-config))))

;*---------------------------------------------------------------------*/
;*    <CONFIG:FONT> ...                                                */
;*---------------------------------------------------------------------*/
(define (<CONFIG:FONT>)
   ~(let ((odd #t))
       
       (define (sample-font-set!)
	  (let* ((el (dom-get-element-by-id "info-font-entry"))
		 (el2 (dom-get-element-by-id "info-font-size"))
		 (size (if (string=? el2.value "") #f (string->number el2.value))))
	     (node-style-set! "info-font-sample" :font-family
			      (string-append el.value ", serif"))
	     (innerHTML-set! "info-font-result"
			     (format "\"~a~a\" ~a"
				     el.value
				     (if size (format ",~apt " size) " ")
				     (if (font-exists? el.value size)
					 "exists"
					 "does not exists")))))
       
       (<DIV> :class "info-font"
	  (<TABLE> :class "info-font-user"
	     (<TR> (<TD> :style "width: 8em" "Font Family: ")
		   (<TD> (<INPUT> :class "info-font" :id "info-font-entry"
			    :onkeyup (when (memq event.which '(10 13))
					(sample-font-set!))))
		   (<TD> :style "width: 3em" "Size: ")
		   (<TD> (<INPUT> :class "info-font" :id "info-font-size"
			    :onkeyup (when (memq event.which '(10 13))
					(sample-font-set!))
			    ""))
		   (<TD> :style "width: 3em"
		      (<BUTTON> :onclick (sample-font-set!) "check")))
	     (<TR> (<TD> :colspan 5 :id "info-font-result"
		      ""))
	     (<TR> (<TD> :colspan 5
		      (<TEXTAREA> :id "info-font-sample"
			 :style "font-family: serif"
			 "ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz
0123456789 ~!@#$%^&*()_+=-,./<>?;':
mmmmmmmmmmlil"))))
	  (<TABLE> :class "info-font"
	     (<TR> :class "info-font-header" (<TH> "Font Name") (<TH> "available"))
	     (map (lambda (f)
		     (set! odd (not odd))
		     (let ((exist (font-exists? f)))
			(<TR> :class (if odd "odd" "even")
			   :style (if exist "color: black" "color: #bbb")
			   (<TD> :class "font-name"
			      :style (format "font-family: ~a, serif" f)
			      f)
			   (if exist
			       (<TD> :class "font-result" "yes")
			       (<TD> :class "font-result" "no")))))
		  $info-fonts)))))
   
;*---------------------------------------------------------------------*/
;*    <WEBLETS> ...                                                    */
;*---------------------------------------------------------------------*/
(define (<WEBLETS>)
   (<DIV> :class "autoload"
      (<BUTTON> :onclick ~(with-hop ($(service () (reset-autoload!))))
	 "Reset autoload table")
      (<TABLE> :class "info-autoload"
	 (<TR> (<TH> "Autoload directories currently used"))
	 (map (lambda (dir)
		 (<TR> (<TD> dir)))
	      (get-autoload-directories)))))
   
;*---------------------------------------------------------------------*/
;*    <CACHES> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<CACHES> req)
   (set! traffic-hookingp #f)
   (define (info-cache c)
      (let* ((l (cache->list c))
	     (d (<DIV> :class "cache-files"
		   (<TABLE> :class "cache-files"
		      (map (lambda (ce)
			      (<TR>
				 (<TD>
				    (<A> :href (format "http://~a:~a~a"
						       (http-request-host req)
						       (http-request-port req)
						       (cache-entry-upath ce))
				       (cache-entry-upath ce))
				    " " (round
					 (/ (file-size (cache-entry-upath ce))
					    1024))
				    "KB")))
			   l)))))
	 (<TABLE> :class "info-cache"
	    (<TR>
	       (<TH> (cache-disk-path c)))
	    (<TR>
	       (<TD> (format "~a files, ~a KB on cache."
			     (length l)
			     (round
			      (/ (apply + (map (lambda (ce)
						  (file-size
						   (cache-entry-upath ce)))
					       l))
				 1024)))))
	    (<TR> (<TD> "&#160;"))
	    (<TR>
	       (<TD> (<BUTTON> :onclick ~(with-hop ($(service ()
							(cache-clear c)
							""))
					    (lambda (h)
					       (innerHTML-set! $d h)))
			"clear cache")))
	    (<TR> (<TD> "&#160;"))
	    (<TR>
	       (<TD> d)))))
   (let ((d (<DIV> :class "cache-info"
	       "")))
      (<TABLE> :class "hop-caches"
	 (<TR>
	    (<TD> :width "20%" :valign 'top
	       (<DIV> :class "caches"
		  (map (lambda (c)
			  (<DIV> :class "cache-link"
			     :width "100%"
			     :onclick ~(with-hop ($(service () (info-cache c)))
					  (lambda (h)
					     (innerHTML-set! $d h)))
			     (make-file-name
			      (basename (dirname (cache-disk-path c)))
			      (basename (cache-disk-path c)))))
		       (filter cache-disk? (registered-caches)))))
	    (<TD> :width "80%" :valign 'top
	       d)))))

;*---------------------------------------------------------------------*/
;*    <TRAFFIC> ...                                                    */
;*---------------------------------------------------------------------*/
(define (<TRAFFIC>)
   (set! traffic-hookingp #t)
   (let* ((row (<TR>
		  :class "title"
		  (<TH> "host")
		  (<TH> "path")
		  (<TH> "user")
		  (<TH> "date")))
	  (traffic (<TBODY> row)))
      (<DIV>
       (<DIV> :class "clear"
	      (<BUTTON>
		 :onclick {
		    var e = $traffic
		    var ch = e.childNodes
		    var i

		    for( i = ch.length - 1; i >  0; i-- ) {
		       e.removeChild( ch[ i ] );
	            }
		  } "clear"))
       (<DIV> :class "traffic"
	  ~(add-event-listener! $info-event "server"
				(lambda (e)
				   (let ((t (event-response-text e)))
				      (innerHTML-set! $traffic
						      (string-append
						       $traffic.innerHTML t)))))
	  (<SORTTABLE> traffic)))))

;*---------------------------------------------------------------------*/
;*    <EVENTS> ...                                                     */
;*---------------------------------------------------------------------*/
(define (<EVENTS>)
   (<TABLE> :class "events"
      (<COLGROUP> (<COL> :span 3 :width "33%"))
      (<TR> (<TD> :colspan 3 (<EVENT-CLIENTS>) " connected clients."))
      (<TR> (<TH> :class "events" "Multipart")
	    (<TH> :class "events" "Flash")
	    (<TH> :class "events" "Ajax"))
      (<TR> (<TD> (<EVENT-FLASH/MULTIPART>
		     '*multipart-socket-table* '*multipart-request-list*))
	    (<TD> (<EVENT-FLASH/MULTIPART>
		     '*flash-socket-table* '*flash-request-list*))
	    (<TD> (<EVENT-AJAX>)))))

;*---------------------------------------------------------------------*/
;*    <EVENT-CLIENTS> ...                                              */
;*---------------------------------------------------------------------*/
(define (<EVENT-CLIENTS>)
   (let ((tables (hop-event-tables)))
      (<SPAN> :class "events-clients" (cadr (assq '*clients-number* tables)))))
   
;*---------------------------------------------------------------------*/
;*    <EVENT-FLASH/MULTIPART> ...                                      */
;*---------------------------------------------------------------------*/
(define (<EVENT-FLASH/MULTIPART> key1 key2)
   (let ((tables (hop-event-tables)))
      (<DIV> :class "dump-events"
	 (<H1> "Request list")
	 (<TABLE> :class "dump-events"
	    (map (lambda (e)
		    (<TR>
		       (<TH>
			  (symbol->string (car e)))
		       (<TD>
			  (let ((sock (http-request-socket (cadr e))))
			     (<SPAN> (socket-hostname sock)
				     ":"
				     (socket-port-number sock))))))
		 (cadr (assq key2 tables))))
	 (<H1> "Socket table")
	 (<TABLE> :class "dump-events"
	    (hashtable-map
	     (cadr (assq key1 tables))
	     (lambda (k v)
		(list
		 (<TR> (<TH> k))
		 (<TR> (<TD> (map (lambda (r)
				     (let ((sock (http-request-socket r)))
					(list (<SPAN>
						 (socket-hostname sock)
						 ":"
						 (socket-port-number sock))
					      " ")))
				  v))))))))))

;*---------------------------------------------------------------------*/
;*    <EVENT-AJAX> ...                                                 */
;*---------------------------------------------------------------------*/
(define (<EVENT-AJAX>)
   (let ((tables (hop-event-tables)))
      (<DIV> :class "dump-events"
	 (<H1> "Connections table")
	 (<TABLE> :class "dump-events"
	    (map (lambda (conn)
		    (list
		     (<TR>
			(<TH> :class "ajax-connection" :colspan 2
			   (format "~a" (car (car conn)))))
		     (<TR>
			(<TD> :class "ajax-buffer" :valign 'top
			   (<TABLE>
			      (map (lambda (buf)
				      (<TR>
					 (<TD> :class "ajax-event" (car buf))
					 (<TD> (<TT> (cdr buf)))))
				   (cdr conn)))))))
		 (cadr (assq '*ajax-connection-key-table* tables)))))))
   
