;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/home/home.hop                   */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed May 10 16:18:48 2006                          */
;*    Last change :  Tue Jun 20 10:51:43 2006 (serrano)                */
;*    Copyright   :  2006 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    HOP home page weblet.                                            */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hophome
   (import  hophome_config
	    hophome_widgets
	    hophome_demo
	    hophome_wiki))

;*---------------------------------------------------------------------*/
;*    logs ...                                                         */
;*---------------------------------------------------------------------*/
(define *log*
   (make-file-name (home-rc-directory) "LOG"))

(define *statistics*
   (if (file-exists? *log*)
       (let ((m (open-mmap *log* :write #f)))
	  (let loop ((i (-elong (mmap-length m) #e1))
		     (c 0))
	     (cond
		((=elong i #e-1)
		 (close-mmap m)
		 c)
		((char=? (mmap-ref m i) #\Newline)
		 (loop (-elong i #e1) (+fx c 1)))
		(else
		 (loop (-elong i #e1) c)))))
       0))

(define *log-port*
   (begin
      (unless (directory? (home-rc-directory))
	 (make-directory (home-rc-directory)))
      (or (append-output-file *log*) (open-output-file *log*))))

;*---------------------------------------------------------------------*/
;*    home-statistics ...                                              */
;*---------------------------------------------------------------------*/
(define (home-statistics)
   *statistics*)

;*---------------------------------------------------------------------*/
;*    *statistics-mutex* ...                                           */
;*---------------------------------------------------------------------*/
(define *statistics-mutex* (make-mutex "home"))

;*---------------------------------------------------------------------*/
;*    home-add-log! ...                                                */
;*---------------------------------------------------------------------*/
(define (home-add-log! req)
   (mutex-lock! *statistics-mutex*)
   (set! *statistics* (+fx 1 *statistics*))
   (display (current-date) *log-port*)
   (display " " *log-port*)
   (display " " *log-port*)
   (display (http-request-socket req) *log-port*)
   (newline *log-port*)
   (flush-output-port *log-port*)
   (mutex-unlock! *statistics-mutex*))

;*---------------------------------------------------------------------*/
;*    home ...                                                         */
;*---------------------------------------------------------------------*/
(define-service (home)
   (let ((req (the-current-request)))
      (home-add-log! req)
      (home-main req)))

;*---------------------------------------------------------------------*/
;*    home-main ...                                                    */
;*---------------------------------------------------------------------*/
(define (home-main req)
   (<HOME>
      (<NOTEPAD>
	 :id "home-notepad"
	 (<NPHEAD> "")
	 (<NPTAB> :id "Presentation"
		  (<NPTABHEAD> "Main")
		  (<DELAY>
		     (lambda ()
			(download-versions-set!)
			(<DIV>
			   :class "hop-tab"
			   (wiki->hop "presentation.wiki")))))
	 (<NPTAB> :id "demo"
		  (<NPTABHEAD> "Demos")
		  (<DELAY>
		     (lambda ()
			(<DIV>
			   :align "hop-tab"
			   (<DEMO> req)))))
	 (<NPTAB> :id "download"
		  (<NPTABHEAD> "Download")
		  (<DELAY>
		     (lambda ()
			(download-versions-set!)
			(<DIV>
			   :class "hop-tab"
			   (wiki->hop-no-cache "download.wiki")))))
	 (<NPTAB> :id "weblets"
		  (<NPTABHEAD> "Weblets")
		  (<DELAY>
		     (lambda ()
			(<DIV>
			   :class "hop-tab"
			   (wiki->hop "weblets.wiki")))))
	 (<NPTAB> :id "documentation"
		  (<NPTABHEAD> "Docs")
		  (<DELAY>
		     (lambda ()
			(<DIV>
			   :class "hop-tab"
			   (wiki->hop "docs.wiki")))))
	 (<NPTAB> :id "faq"
		  (<NPTABHEAD> "Faq")
		  (<DELAY>
		     (lambda ()
			(<DIV>
			   :class "hop-tab"
			   (wiki->hop "faq.wiki")))))
	 (<NPTAB> :id "Forum"
		  (<NPTABHEAD> "Forum")
		  (<DELAY>
		     (lambda ()
			(<DIV>
			   :class "hop-tab"
			   "This is not implemented yet. Until it is
implemented you can send comments and remarks to "
			   (<SPAN>
			      :style "text-decoration: underline"
			      :onmouseover
			      { title =
			   (this.innerHTML.replace( " ", "." )
						  + String.fromCharCode( 0x41 - 1 )
						  + "Inria.fr") }
			      "Manuel Serrano")
			   "."))))
	 (<NPTAB> :id "stats"
		  (<NPTABHEAD> "Statistics")
		  (<DELAY>
		     (lambda ()
			(<DIV>
			   :class "hop-tab"
			   [The HOP (v,(hop-version)) server running this home page is up since
				,(<SPAN> :class "uptime" (hop-uptime)).
				,(<P>)
				The HOP home page has been served
				,(<SPAN> :class "uptime" (home-statistics))
				times.
				,(let ((f (make-file-path (home-dir) "motd")))
				    (if (file-exists? f)
					(<DIV>
					   :class "motd"
					   (with-input-from-file f read-string))
					""))])))))))

;*---------------------------------------------------------------------*/
;*    home/install ...                                                 */
;*---------------------------------------------------------------------*/
(define-service (home/install)
   (<HTML>
      (<HEAD> :css (make-file-name (home-dir) "home.hss"))
      (<BODY> :style "background: white; font-size: small"
	      (wiki->hop "install.wiki"))))

;*---------------------------------------------------------------------*/
;*    home/install-jvm ...                                             */
;*---------------------------------------------------------------------*/
(define-service (home/install-jvm)
   (<HTML>
      (<HEAD> :css (make-file-name (home-dir) "home.hss"))
      (<BODY> :style "background: white; font-size: small"
	      (wiki->hop "install-jvm.wiki"))))

;*---------------------------------------------------------------------*/
;*    home/submit-hz ...                                               */
;*---------------------------------------------------------------------*/
(define-service (home/submit-hz file)
   (let ((path (cgi-post-arg-field :file file)))
      (home-main (the-current-request))))

;*---------------------------------------------------------------------*/
;*    downloads ...                                                    */
;*---------------------------------------------------------------------*/
(define *devel-tar-gz* #unspecified)
(define *devel-jar* #unspecified)
(define *devel-tar-url* #unspecified)
(define *devel-jar-url* #unspecified)
(define *stable-tar-gz* #unspecified)
(define *stable-jar* #unspecified)
(define *stable-tar-url* #unspecified)
(define *stable-jar-url* #unspecified)

;*---------------------------------------------------------------------*/
;*    download-versions-set! ...                                       */
;*---------------------------------------------------------------------*/
(define (download-versions-set!)
   (let ((devel-version (home-hop-devel-version)))

      (set! *devel-tar-gz*
	    (if (string? devel-version)
		(string-append "hop-" devel-version ".tar.gz")
		"not available"))
      
      (set! *devel-jar*
	    (if (string? devel-version)
		(string-append "hop-" devel-version ".jar")
		"not available"))
      
      (set! *devel-tar-url*
	    (if (string? *devel-tar-gz*)
		(make-file-name (home-ftp-hop-url) *devel-tar-gz*)
		"not available"))
      
      (set! *devel-jar-url*
	    (if (string? *devel-jar*)
		(make-file-name (home-ftp-hop-url) *devel-jar*)
		"not available"))
      
      (set! *stable-tar-gz*
	    (if (string? (home-hop-stable-version))
		(string-append "hop-" (home-hop-stable-version) ".tar.gz")
		"not available"))
      
      (set! *stable-jar*
	    (if (string? (home-hop-stable-version))
		(string-append "hop-" (home-hop-stable-version) ".jar")
		"not available"))
      
      (set! *stable-tar-url*
	    (if (string? *stable-tar-gz*)
		(make-file-name(home-ftp-hop-url) *stable-tar-gz*)
		"not available"))
      
      (set! *stable-jar-url*
	    (if (string? *stable-jar*)
		(make-file-name(home-ftp-hop-url) *stable-jar*)
		"not available"))))
      

