;*=====================================================================*/
;*    serrano/prgm/project/hop/2.2.x/weblets/home/demo.hop             */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed May 10 16:29:57 2006                          */
;*    Last change :  Wed Nov 10 16:21:40 2010 (serrano)                */
;*    Copyright   :  2006-10 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOME page demonstration                                          */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hophome_demo
   (import hophome_config
	   hophome_widgets
	   hophome
	   hophome_demos-minesweeper
	   hophome_demos-sudoku
	   hophome_demos-rss
	   hophome_demos-source
	   hophome_demos-wiki
	   hophome_demos-rewrite
	   hophome_demos-set
	   hophome_demos-popart
	   hophome_demos-map
	   hophome_demos-music
	   hophome_demos-video)
   (export (<DEMO> request)))

;*---------------------------------------------------------------------*/
;*    <DEMO> ...                                                       */
;*---------------------------------------------------------------------*/
(define (<DEMO> req)
   (let ((inl (not
	       (string-contains
		(http-header-field (http-request-header req) :user-agent)
		"MSIE"))))
      (<DIV> :class "demo"
	 :id "demo-playground"
	 :align "left"
	 (<TIPS> 550 500)
	 (<DIV> :class "toolbar"
	    :align "center"
	    :id "toolbar-demo"
	    (<TABLE> :class "toolbar"
	       (<TR>
		  (<TD> :align "left"
		     (<ZIMG> (home/demos/sudoku)
			"games1-32x32.png" "games1-48x48.png" inl
			500 450)))
	       (<TR>
		  (<TD> :align "left"
		     (<ZIMG> (home/demos/minesweeper)
			"mines-32x32.png" "mines-48x48.png" inl
			320 320)))
	       (<TR>
		  (<TD> :align "left"
		     (<ZIMG> (home/demos/map)
			"map-32x32.png" "map-48x48.png" inl
			600 500)))
	       (<TR>
		  (<TD> :align "left"
		     (<ZIMG> (home/demos/popart)
			"popart-32x32.png" "popart-48x48.png" inl
			700 600)))
	       (<TR>
		  (<TD> :align "left"
		     (<ZIMG> (home/demos/music)
			"music-32x32.png" "music-48x48.png" inl
			450 430)))
	       (<TR>
		  (<TD> :align "left"
		     (<ZIMG> (home/demos/video)
			"video-32x32.png" "video-48x48.png" inl
			400 350)))
	       (<TR>
		  (<TD> :align "left"
		     (<ZIMG> (home/demos/rss)
			"news-32x32.png" "news-48x48.png" inl
			570 370)))
	       (<TR>
		  (<TD> :align "left"
		     (<ZIMG> (home/demos/wiki)
			"wiki-32x32.png" "wiki-48x48.png" inl
			390 450)))
	       (<TR>
		  (<TD> :align "left"
		     (<ZIMG> (home/demos/rewrite)
			"utilities-32x32.png" "utilities-48x48.png" inl
			500 220)))
	       (<TR>
		  (<TD> :align "left"
		     (<ZIMG> (home/demos/source)
			"computer-32x32.png" "computer-48x48.png" inl
			700 500))))))))

;*---------------------------------------------------------------------*/
;*    home/demos/tips ...                                              */
;*---------------------------------------------------------------------*/
(define-service (home/demos/tips)
   (<HTML>
      (<HEAD> :title "Home Tips"
	 :base (service-base-url home/demos/tips (current-request))
	 :css "tips.hss")
      (<BODY>
       (<H1> "This is the HOP demonstration playground!")
       (<P> [It illustrates various features provided by HOP. It shows
some of the HTML extensions provided by HOP (for instance for implementing
his simple window manager). It shows how to programs application where
,(<EM> "client") computations and ,(<EM> "server") computations are
simultaneously involved. It also illustrates some of the HOP libraries
such as libraries for accessing and parsing ressources over the network. This
playground contains the following demonstrations:])
       (<IMG> :src "etc/icons/games1-32x32.png")
       (<H2> "Sudoku")
       (<P> :class "descr" [This implements a ,(<EM> "Sudoku") game.
 The programs show how client side and server side computations coexist])
       (<IMG> :src "etc/icons/mines-32x32.png")
       (<H2> "Minesweeper")
       (<P> :class "descr" [This demonstration implements a simple
 ,(<EM> "Minesweeper") game. It shows how to program client side applications
 in HOP.])
       (<IMG> :src "etc/icons/map-32x32.png")
       (<H2> "Map")
       (<P> :class "descr"
	  [This demonstration shows how to use JavaScript library with Hop.
		This demonstration uses the browser geolocation and the
		OpenStreetMap JavaScript client side api.])
       (<IMG> :src "etc/icons/popart-32x32.png")
       (<H2> "Popart")
       (<P> :class "descr"
	  [This demonstration shows how to use the canvas for implementing
dynamic effects on pictures. It uses the Hop proxy to gain full access
to the data composing the image.])
       (<IMG> :src "etc/icons/music-32x32.png")
       (<H2> "Audio")
       (<P> :class "descr" [This demonstration implements a simple
 ,(<EM> "audio") player. It shows how to program multimedia applications
 in HOP.])
       (<IMG> :src "etc/icons/video-32x32.png")
       (<H2> "Video")
       (<P> :class "descr" [This demonstration shows how use HTML 5 videos
in HOP to implement live special effects.])
       (<IMG> :src "etc/icons/news-32x32.png")
       (<H2> "Rss")
       (<P> :class "descr" [This implements a ,(<EM> "RSS") reader. It
 illustrates the HOP widget for ,(<EM> "fold lists"). It shows how to use
 this widget can be used for implementing ,(<EM> "lazy") unfolding. In this
 demonstration, RSS feeds are fetched from the network and parsed only
 when items are unfolded. This demonstration also shows how to
 program applications that uses third party servers.])
       (<IMG> :src "etc/icons/wiki-32x32.png")
       (<H2> "Wiki")
       (<P> :class "descr" [This demonstration uses the HOP Wiki library. It
also shows how HOP can ,(<EM> "push") signals towards clients.])
       (<IMG> :src "etc/icons/utilities-32x32.png")
       (<H2> "Rewrite")
       (<P> :class "descr" [This demonstration shows how the client and the
server can cooperate to operate on distant documents. In this simple
demonstration remote pages are changed on-the-fly by the server that acts
as a proxy.])
       (<IMG> :src "etc/icons/computer-32x32.png")
       (<H2> "Source")
       (<P> :class "descr" [This demonstration uses HOP ,(<EM> "trees") and
,(<EM> "pan"). It implements a simple file browser. This browsers may
be used to access the whole source code of this playground.]))))

;*---------------------------------------------------------------------*/
;*    <TIPS> ...                                                       */
;*---------------------------------------------------------------------*/
(define (<TIPS> . r)
   (let ((id (xml-make-id))
	 (w (if (pair? r) (car r) "200"))
	 (h (if (and (pair? r) (pair? (cdr r))) (cadr r) "200"))
	 (t (string-capitalize "Tips")))
      ~(let ((frame (document.createElement "iframe"))
	     (t (document.getElementById $id))
	     (p (document.getElementById "demo-playground")))
	  (set! frame.className "demos")
	  (set! frame.src $(home/demos/tips))
	  (node-style-set! frame "border-width" "0")
	  (node-style-set! frame "width" "100%")
	  (node-style-set! frame "height" "100%")
	  (let* ((w (window-open :id $t
		       :src frame
		       :width $w :height $h
		       :left (/ (- (main-window-width) $w) 2) :top 200
		       :parent p))
		 (i (<SPAN> :class "icon" $t)))
	     (set! i.onmousedown
		   (lambda (e)
		      (set! i.style.visibility "hidden")
		      (set! w.style.display "block")))
	     (set! w.iconify
		   (lambda ()
		      (set! i.style.top w.style.top)
		      (set! i.style.left w.style.left)
		      (set! i.style.visibility "visible")
		      (set! w.style.display "none")))
	     (dom-append-child! p i)
	     w))))

;*---------------------------------------------------------------------*/
;*    img->data ...                                                    */
;*---------------------------------------------------------------------*/
(define (img->data src inline)
   (if inline
       (let ((file (make-file-name (home-dir) src)))
	  (if (file-exists? file)
	      (let ((p (open-input-file file)))
		 (if (input-port? p)
		     (unwind-protect
			(format "data:~a;base64,~a"
				(mime-type src (format "image/~a"
						       (suffix src)))
				(base64-encode (read-string p)))
			(close-input-port p))
		     src))
	      src))
       src))

;*---------------------------------------------------------------------*/
;*    <ZIMG> ...                                                       */
;*---------------------------------------------------------------------*/
(define (<ZIMG> svc s1 s2 inl . r)
   (let* ((id (xml-make-id))
	  (i1 (format "etc/icons/~a" s1))
	  (i2 (format "etc/icons/~a" s2))
	  (p1 (img->data i1 inl))
	  (p2 (img->data i2 inl))
	  (w (if (pair? r) (car r) "200"))
	  (h (if (and (pair? r) (pair? (cdr r))) (cadr r) "200"))
	  (j (string-index svc #\?))
	  (t (string-capitalize (basename (if j (substring svc 0 j) svc)))))
      (<IMG> :id id
	 :src p1
	 :inline #t
	 :title t
	 :alt t
	 :onerror ~(let ((i (document.getElementById $id)))
		      (set! i.onerror
			    (lambda (x)
			       (set! i.src $(service-resource home i1))))
		      (set! i.src $p1))
	 :onmouseover ~(let ((i (document.getElementById $id)))
			  (set! i.onerror
				(lambda (x)
				   (set! i.src $(service-resource home i2))))
			  (set! i.src $p2))
	 :onmouseout ~(let ((i (document.getElementById $id)))
			 (set! i.onerror
			       (lambda (x)
				  (set! i.src $(service-resource home i1))))
			 (set! i.src $p1))
	 :onclick ~(let ((frame (document.createElement "iframe"))
			 (t (document.getElementById $id))
			 (p (document.getElementById "demo-playground")))
		      (set! frame.className "demos")
		      (set! frame.src $svc)
		      (node-style-set! frame "border-width" "0")
		      (node-style-set! frame "width" "100%")
		      (node-style-set! frame "height" "100%")
		      (let* ((w (window-open :id $t
				   :src frame
				   :width $w :height $h
				   :left (+ 60 (node-bounding-box-x p))
				   :top (+ 10 (node-bounding-box-y p))
				   :parent p))
			     (i (<SPAN> :class "icon" $t)))
			 (set! i.onmousedown
			       (lambda (e)
				  (set! i.style.visibility "hidden")
				  (set! w.style.display "block")))
			 (set! w.iconify
			       (lambda ()
				  (set! i.style.top w.style.top)
				  (set! i.style.left w.style.left)
				  (set! i.style.visibility "visible")
				  (set! w.style.display "none")))
			 (dom-append-child! p i)
			 w)))))
