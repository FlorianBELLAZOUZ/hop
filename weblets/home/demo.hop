;*=====================================================================*/
;*    serrano/prgm/project/hop/weblets/home/demo.hop                   */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed May 10 16:29:57 2006                          */
;*    Last change :  Mon Oct 15 08:35:39 2007 (serrano)                */
;*    Copyright   :  2006-07 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOME page demonstration                                          */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hophome_demo
   (import hophome_config
	   hophome_widgets
	   hophome
	   hophome_demos-minesweeper
	   hophome_demos-sudoku
	   hophome_demos-repl
	   hophome_demos-rss
	   hophome_demos-source
	   hophome_demos-wiki
	   hophome_demos-rewrite
	   hophome_demos-set
	   hophome_demos-music)
   (export (<DEMO> request)))

;*---------------------------------------------------------------------*/
;*    <DEMO> ...                                                       */
;*---------------------------------------------------------------------*/
(define (<DEMO> req)
   ;; MSIE does not support yet, inline images!
   (let ((inl (not
	       (string-contains
		(http-header-field (http-request-header req) :user-agent)
		"MSIE"))))
      (<DIV>
	 :class "demo"
	 :id "demo-playground"
	 :align "left"
	 (<TIPS> 550 500)
	 (<DIV>
	    :class "toolbar"
	    :align "center"
	    :id "toolbar-demo"
	    (<TABLE>
	       :class "toolbar"
	       (<TR>
		  (<TD>
		     :align "left"
		     (<ZIMG> (make-service-url home/demos/sudoku)
			     "games1-32x32.png" "games1-48x48.png" inl
			     500 420)))
	       (<TR>
		  (<TD>
		     :align "left"
		     (<ZIMG> (make-service-url home/demos/minesweeper)
			     "mines-32x32.png" "mines-48x48.png" inl
			     320 320)))
	       (<TR>
		  (<TD>
		     :align "left"
		     (<ZIMG> (make-service-url home/demos/set)
			     "set-32x32.png" "set-48x48.png" inl
			     500 400)))
	       (<TR>
		  (<TD>
		     :align "left"
		     (<ZIMG> (make-service-url home/demos/music)
			     "music-32x32.png" "music-48x48.png" inl
			     420 320)))
;* 	    (<TR>                                                      */
;* 	       (<TD>                                                   */
;* 		  :align "left"                                        */
;* 		  (<ZIMG> "hop/home/demos/tetris"                      */
;* 			  "games2-32x32.png" "games2-48x48.png")))     */
	       (<TR>
		  (<TD>
		     :align "left"
		     (<ZIMG> (make-service-url home/demos/rss)
			     "news-32x32.png" "news-48x48.png" inl
			     570 370)))
	       (<TR>
		  (<TD>
		     :align "left"
		     (<ZIMG> (make-service-url home/demos/repl)
			     "term-32x32.png" "term-48x48.png" inl
			     640 500)))
	       (<TR>
		  (<TD>
		     :align "left"
		     (<ZIMG> (make-service-url home/demos/wiki)
			     "wiki-32x32.png" "wiki-48x48.png" inl
			     390 450)))
	       (<TR>
		  (<TD>
		     :align "left"
		     (<ZIMG> (make-service-url home/demos/rewrite)
			     "utilities-32x32.png" "utilities-48x48.png" inl
			     500 220)))
	       (<TR>
		  (<TD>
		     :align "left"
		     (<ZIMG> (make-service-url home/demos/source)
			     "computer-32x32.png" "computer-48x48.png" inl
			     700 500))))))))

;*---------------------------------------------------------------------*/
;*    home/demos/tips ...                                              */
;*---------------------------------------------------------------------*/
(define-service (home/demos/tips)
   (<HTML>
      (<HEAD> :title "Home Tips"
	 :base (service-base-url home/demos/tips (current-request))
	 :css "tips.hss")
      (<BODY>
       (<H1> "This is the HOP demonstration playground.")
       (<P> [It illustrates various features provided by HOP. It shows
some of the HTML extensions provided by HOP (for instance for implementing
this simple window manager). It shows how to programs application where
,(<EM> "client") computations and ,(<EM> "server") computations are
simultaneously involved. It also illustrates some of the HOP libraries
such as libraries for accessing and parsing ressources over the network. This
playground contains the following demonstrations:])
       (<H2> "Sudoku")
       (<P> :class "descr" [This implements a ,(<EM> "Sudoku") game.
 The programs show how client side and server side computations coexist])
       (<H2> "Minesweeper")
       (<P> :class "descr" [This demonstration implements a simple
 ,(<EM> "Minesweeper") game. It shows how to program client side applications
 in HOP.])
       (<H2> "Rss")
       (<P> :class "descr" [This implements a ,(<EM> "RSS") reader. It
 illustrates the HOP widget for ,(<EM> "fold lists"). It shows how to use
 this widget can be used for implementing ,(<EM> "lazy") unfolding. In this
 demonstration, RSS feeds are fetched from the network and parsed only
 when items are unfolded. This demonstration also shows how to
 program applications that uses third party servers.])
       (<H2> "Repl")
       (<P> :class "descr" [This is a HOP client side interpreter. Each time,
 the \[return\] key is pressed. The expression after the prompt (the string
 ,(<TT> ":=>")) is sent to the server for compilation. Once back, it is
 evaluated on the client browser. The expressions may refer to the whole
 HOP client side API. In particular, they can manipulate the current DOM.])
       (<H2> "Wiki")
       (<P> :class "descr" [This demonstration uses the HOP Wiki library. It
also shows how HOP ,(<EM> "signals") can be deployed for allowing external
clients to be notified by servers.])
       (<H2> "Rewrite")
       (<P> :class "descr" [This demonstration shows how the client and the
server can cooperate to operate on distant documents. In this simple
demonstration remote pages are changed on-the-fly by the server that acts
as a proxy.])
       (<H2> "Set")
       (<P> :class "descr" [This demonstration implements another
game. It shows how to use events to synchronize multiple clients in HOP.])
       (<H2> "Source")
       (<P> :class "descr" [This demonstration uses HOP ,(<EM> "trees") and
,(<EM> "pan"). It implements a simple file browser. This browsers may
be used to access the whole source code of this playground.]))))

;*---------------------------------------------------------------------*/
;*    <TIPS> ...                                                       */
;*---------------------------------------------------------------------*/
(define (<TIPS> . r)
   (let ((id (xml-make-id))
	 (w (if (pair? r) (car r) "200"))
	 (h (if (and (pair? r) (pair? (cdr r))) (cadr r) "200"))
	 (t (string-capitalize "Tips")))
      ~(let ((frame (document.createElement "iframe"))
	     (t (document.getElementById $id))
	     (p (document.getElementById "demo-playground")))
	  (set! frame.className "demos")
	  (set! frame.src $(make-service-url home/demos/tips))
	  (set! frame.style.border "0")
	  (set! frame.style.width "100%")
	  (set! frame.style.height "99%")
	  (let* ((w (window-open :id $t
		       :src frame
		       :width $w :height $h
		       :left (/ (- window.innerWidth $w) 2) :top 200
		       :parent p))
		 (i (<SPAN> :class "icon" $t)))
	     (set! i.onmousedown
		   (lambda (e)
		      (set! i.style.visibility "hidden")
		      (set! w.style.display "block")))
	     (set! w.iconify
		   (lambda ()
		      (set! i.style.top w.style.top)
		      (set! i.style.left w.style.left)
		      (set! i.style.visibility "visible")
		      (set! w.style.display "none")))
	     (dom-append-child! p i)
	     w))))

;*---------------------------------------------------------------------*/
;*    img->data ...                                                    */
;*---------------------------------------------------------------------*/
(define (img->data src inline)
   (if inline
       (let ((file (make-file-name (home-dir) src)))
	  (if (file-exists? file)
	      (let ((p (open-input-file file)))
		 (if (input-port? p)
		     (unwind-protect
			(format "data:~a;base64,~a"
				(mime-type src (format "image/~a"
						       (suffix src)))
				(base64-encode (read-string p)))
			(close-input-port p))
		     src))
	      src))
       src))

;*---------------------------------------------------------------------*/
;*    <ZIMG> ...                                                       */
;*---------------------------------------------------------------------*/
(define (<ZIMG> svc s1 s2 inl . r)
   (let* ((id (xml-make-id))
	  (i1 (format "etc/icons/~a" s1))
	  (i2 (format "etc/icons/~a" s2))
	  (p1 (img->data i1 inl))
	  (p2 (img->data i2 inl))
	  (w (if (pair? r) (car r) "200"))
	  (h (if (and (pair? r) (pair? (cdr r))) (cadr r) "200"))
	  (t (string-capitalize (basename svc))))
      (<IMG> :id id
	 :src p1
	 :inline #t
	 :title t
	 :alt t
	 :onerror ~(let ((i (document.getElementById $id)))
		      (set! i.onerror
			    (lambda (x)
			       (set! i.src $(service-resource home i1))))
		      (set! i.src $p1))
	 :onmouseover ~(let ((i (document.getElementById $id)))
			  (set! i.onerror
				(lambda (x)
				   (set! i.src $(service-resource home i2))))
			  (set! i.src $p2))
	 :onmouseout ~(let ((i (document.getElementById $id)))
			 (set! i.onerror
			       (lambda (x)
				  (set! i.src $(service-resource home i1))))
			 (set! i.src $p1))
	 :onclick ~(let ((frame (document.createElement "iframe"))
			 (t (document.getElementById $id))
			 (p (document.getElementById "demo-playground")))
		      (set! frame.className "demos")
		      (set! frame.src $svc)
		      (node-style-set! frame :width "100%")
		      (node-style-set! frame :height "99%")
		      (node-style-set! frame :border-width 0)
		      (let* ((w (window-open :id $t
				   :src frame
				   :width $w :height $h
				   :left (+ 60 (hop_element_x p))
				   :top (+ 10 (hop_element_y p))
				   :parent p))
			     (i (<SPAN> :class "icon" $t)))
			 (set! i.onmousedown
			       (lambda (e)
				  (set! i.style.visibility "hidden")
				  (set! w.style.display "block")))
			 (set! w.iconify
			       (lambda ()
				  (set! i.style.top w.style.top)
				  (set! i.style.left w.style.left)
				  (set! i.style.visibility "visible")
				  (set! w.style.display "none")))
			 (dom-append-child! p i)
			 w)))))
