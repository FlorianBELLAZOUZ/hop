(module hophome_demos-repl
   (export (home/demos/repl)))

;; main function
(define-service (home/demos/repl)
   (<HTML>
      (<HEAD>
	 :title "Home Repl demo"
	 :include "hop-window" "hop-notepad" "hop-tree"
	 :include "hop-tabslider" "hop-foldlist" "hop-paned"
	 :include "hop-sorttable" "hop-fx"
	 :css "repl.hss")
      (<BODY>
	 (<DIV>
	    :align "center"
	    :class "repl"
	    (<H1> "Welcome to the HOP client side interpreter...")
	    (<TEXTAREA>
	       :class "repl"
	       :rows 22 :cols 80
	       :onkeyup
	       ~(when (= (event-key-code event) 13)
		   (let* ((self this)
			  (e self.value)
			  (i (e.lastIndexOf ":=> ")))
		      (define (safe-eval expr)
			 (with-handler
			  (lambda (exception)
			     (format "*** ~a" exception))
			  (eval expr)))
		      (when (>= i 0)
			 (let ((s (e.substr (+ i 4) e.length)))
			    (with-hop ($home/demos/repl/compile s)
			       (lambda (h)
				  (cond
				     ((pair? h)
				      (with-output-to-procedure
				       (lambda (s)
					  (set! self.value
						(string-append self.value s)))
				       (lambda ()
					  (unless (string=? (car h) "")
					     (let ((e (safe-eval (car h))))
						(print e)))
					  (display ":=> "))))
				     ((string? h)
				      (alert h)
				      (set! self.value
					    (string-append self.value
							   ";; error\n:=> "))))))))))
	       ";; Try to cut an paste the following lines, without the semi-colons
;;   (let ((el (car (dom-get-elements-by-tag-name document \"h1\"))))
;;      (el.style.setProperty \"color\" \"red\" \"\"))
;; you can also try:
;;   (dom-append-child! document.body (<TABLE> :border 1 (<TR> (<TD> \"foo\"))))
;;   (window-open :id 'home :src \"/hop/home\" :title \"home\")
:=> ")))))

(define-service (home/demos/repl/compile s)
   (with-handler
      (lambda (e) #f)
      (cond
	 ((string-index s #\$)
	  "For the sake of security, $-expressions are not accepted")
	 ((string-contains s "define-macro")
	  "For the sake of security, define-macro are not accepted")
	 (else
	  (with-input-from-string s
	     (lambda ()
		(let ((e (hop-read (current-input-port))))
		   (if (eof-object? e)
		       (cons "" "")
		       (with-handler
			  (lambda (e)
			     (with-error-to-string
				(lambda () (error-notify e))))
			  (cons (compile-hop-client e) s))))))))))
