(module hophome_demos-repl
   (export (home/demos/repl)))

(define *repl-directory* (dirname (the-loading-file)))

;; main function
(define-service (home/demos/repl)
   (<HTML>
      (<HEAD>
	 :dir *repl-directory*
	 :jscript "hop-iwindow.js" :css "hop-iwindow.css"
	 :jscript "hop-notepad.js" :css "hop-notepad.css"
	 :jscript "hop-tree.js" :css "hop-tree.css"
	 :jscript "hop-tabslider.js" :css "hop-tabslider.css"
	 :jscript "hop-foldlist.js" :css "hop-foldlist.css"
	 :jscript "hop-paned.js" :css "hop-paned.css"
	 :jscript "hop-sorttable.js" :css "hop-sorttable.css"
	 :jscript "hop-dom.js" :jscript "hop-fx.js" :jscript "base64.js"
	 :css "repl.hss")
      (<BODY>
	 (<DIV>
	    :align "center"
	    :class "repl"
	    (<H1> "Welcome to the HOP client side interpreter...")
	    (<TEXTAREA>
	       :class "repl"
	       :rows 22 :cols 80
	       :onkeyup ~(if (= event.keyCode 13)
			     (let* ((t this)
				    (e t.value)
				    (i (e.lastIndexOf ":=> ")))
				(define (safe-eval expr)
				   (with-handler
				    (lambda (exception)
				       "exception")
				    (eval expr)))
				(if (>= i 0)
				    (let ((s (e.substr (+ i 4) e.length)))
				       (with-hop ($home/demos/repl/compile s)
					  (lambda (h)
					     (if (pair? h)
						 (let ((e (safe-eval (car h))))
						    (set! t.value
							  (+ t.value
							     e
							     "\n:=> "))))))))))
	       ";; Try to cut an paste the following lines, without the semi-colons
;;   (define els (document.getElementsByTagName \"h1\"))
;;   (define el (array-ref els 0))
;;   (el.style.setProperty \"color\" \"red\" \"\")
;; you can also try:
;;   (dom-append-child! document.body (<TABLE> :border 1 (<TR> (<TD> \"foo\"))))
;;   (iwindow-open 'home \"/hop/home\" \"home\")
:=> ")))))

(define-service (home/demos/repl/compile s)
   (with-handler
      (lambda (e) #f)
      (with-input-from-string s
	 (lambda ()
	    (let* ((e (hop-read (current-input-port)))
		   (j (with-handler
			 (lambda (e)
			    (with-error-to-string
			       (lambda () (error-notify e))))
			 (with-output-to-string
			    (lambda () (compile-hop-client e))))))
	       (cons j s))))))
