(module hophome_demos-music
   (export (home/demos/music)))

(define podcast-list
   '(("http://radiofrance-podcast.net/podcast/rss_10053.xml"
      "France Musique")
     ("http://radiofrance-podcast.net/podcast/rss_20000.xml"
      "FIP")
     ("http://radiofrance-podcast.net/podcast/rss_16256.xml"
      "Continent sciences")
     ("http://radiofrance-podcast.net/podcast/rss_10334.xml"
      "Le Mouv'")))

(define (rss->podcast-mp3 url)
   (with-url url
      (lambda (p)
	 (bind-exit (return)
	    (let ((p (open-input-string p)))
	       (xml-parse p
			  :procedure
			  (lambda (markup attributes body)
			     (when (eq? markup 'enclosure)
				(return (cdr (assq 'url attributes))))))
	       #f)))))

(define-service (home/demos/music)
   (let ((audio (<AUDIO> :controls #t)))
      (<HTML>
	 (<HEAD>
	    :title "Podcast demo"
	    :base (service-base-url home/demos/music (current-request))
	    :include "hop-audio" "hop-slider"
	    :css "music.hss")
	 (<BODY>
	    ~(define snd #f)
	    ~(define (play-url url)
		(if (string=? url "")
		    (set! snd #f)
		    (set! snd (make-sound url :stream #t))))
	    (<H3> "Podcast demonstration")
	    audio
	    (<BR>)
	    (<SELECT> :name "podcast" :id "podcast" :size 1
	       :onchange ~(audio-load $audio this.value #t)
	       (<OPTION> :value "" "Select a podcast")
	       (filter-map (lambda (podcast)
			      (let* ((rss (car podcast))
				     (name (cadr podcast))
				     (url (rss->podcast-mp3 (car podcast))))
				 (when url
				    (<OPTION> :value url name))))
			   podcast-list))))))
	       
