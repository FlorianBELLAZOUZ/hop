(module hophome_demos-music
   (export (home/demos/music)))

(define (rss->podcast-mp3 url)
   (with-url url
      (lambda (p)
	 (bind-exit (return)
	    (let ((p (open-input-string p)))
	       (xml-parse p
			  :procedure
			  (lambda (markup attributes body)
			     (when (eq? markup 'enclosure)
				(return (cdr (assq 'url attributes))))))
	       #f)))))

(define-service (home/demos/music)
   (let ((audio (<AUDIO> :controls #t))
	 (input (<INPUT> :name "podcast" :id "podcast" :type 'text
		   :size 50
		   :value "http://radiofrance-podcast.net/podcast09/rss_10060.xml"
		   :onchange ~(load-url this.value)))) 
      (<HTML>
	 (<HEAD>
	    :title "Podcast demo"
	    :include "hop-audio" "hop-slider"
	    :css (service-resource home/demos/music "music.hss"))
	 (<BODY>
	    ~(define snd #f)
	    ~(define (play-url url)
		(if (string=? url "")
		    (set! snd #f)
		    (set! snd (make-sound url :stream #t))))
	    ~(define (load-url podcast)
		(with-hop ($(service (rss)
			       (with-handler
				  (lambda (e)
				     (cons 'error rss))
				  (rss->podcast-mp3 rss)))
			    podcast)
		   (lambda (path)
		      (if (string? path)
			  (audio-load $audio path #t)
			  (alert "Cannot download podcast: " (cdr path))))))
	    (<H3> "Podcast demonstration")
	    audio
	    (<BR>)
	    (<DIV> "Enter a podcast URL")
	    input
	    (<BR>)
	    (<BUTTON> "load" :onclick ~(load-url $input.value))))))
	       
