#!/bin/sh
#*=====================================================================*/
#*    serrano/prgm/project/hop/2.3.x/configure                         */
#*    -------------------------------------------------------------    */
#*    Author      :  Manuel Serrano                                    */
#*    Creation    :  Sat Jul 31 06:49:37 2004                          */
#*    Last change :  Wed Jan 11 13:39:26 2012 (serrano)                */
#*    Copyright   :  2004-12 Manuel Serrano                            */
#*    -------------------------------------------------------------    */
#*    HOP autoconfiguration                                            */
#*=====================================================================*/

#*---------------------------------------------------------------------*/
#*    User flags                                                       */
#*---------------------------------------------------------------------*/
prefix=/usr/local

bigloo=bigloo
afile=bglafile
jfile=bgljfile
btags=bgltags
bdepend=bgldepend
cc=
flashcc=/usr/bin/mtasc
fflags="-main -version 9 -cp /usr/share/mtasc/std -cp /usr/share/mtasc/std8 -swf"
backend=native
link=dynamic
unzip=unzip
gzip="GZIP=-9 gzip"
install="install -m a+r,u+r"
jar="jar cfm"
javac=javac

debug=no

bcflags="-O2 -fsharing -Wall -wslots -L \$(BUILDLIBDIR)"
btflags="-gtrace"

bcflagsdev=""
bcflagsdbg="-copt -g -O2"
bcflagsdbg2="-g -cg"
bcflagspmem="-pmem -O2 -fno-user-inlining"
bcflagspmem2="-pmem2 -O2 -fno-user-inlining"
bcflagsopt="-unsafe -O3"
bcflagsprofile="-O3 -pg -L \$(BUILDLIBDIR)"

bcflagsrts="-unsafe -safee"
bscm2jsflags="-unsafe"

blflags="-copt \$(CPICFLAGS) -L \$(BUILDLIBDIR)"

mimetypes=/etc/mime.types
jsmimetype="application/x-javascript"
cssmimetype="text/css"

libraries="hop hopwidget web hopscheme scheme2js multimedia sqlite"
bglcloselibs="web multimedia"

#*---------------------------------------------------------------------*/
#*    Private variables                                                */
#*---------------------------------------------------------------------*/
version="2.3.0"
devel=pre

hopc=$PWD/bin/hopc

branch="`echo $version | sed 's/[0-9][0-9]*$/x/'`"
date=`date +"%d %B %Y"`

url="http://hop.inria.fr"

etcdir=$prefix/etc
bindir=$prefix/bin
libdir=$prefix/lib
sharedir=$prefix/share/hop
mansec=man1
mandir=$prefix/man/$mansec
webletsdir=
contribsdir=$prefix/share/hop/contribs
buildlibdir=$PWD/lib
buildsharedir=$PWD/share
distribdir=$HOME/prgm/distrib
distribdir=$HOME/prgm/project/hop/repository
buildbindir=$PWD/bin

buildspecific=
installspecific=

bigloorequired=3.6a
bigloourl=http://www.inria.fr/indes/fp/Bigloo

svn=ssh://hop@hop.inria.fr/hop

if [ "$USER " = "serrano " ]; then
  distribdir=$HOME/prgm/distrib
  repodir=$HOME/prgm/project/hop/repository
else
  distribdir=.
  repodir=.
fi

# User controlled optional features
ssl=""
locevent="true"
threads=""
zeroconf=""
avahi=""

hopsrfis=""

rts="hop-dom.js hop-event.js hop-serialize.js base64.js hop-request.js hop-lib.js hop-history.js hopscheme.js"

hopservicebase="/hop"
hopjs='"hop.js"'
hopjsfiles='"hop-autoconf.js" "runtime.js"'
 
for p in $rts; do
  hopjsfiles="$hopjsfiles \"$p\""; 
done

arch=noarch

felix=

# Argument parsing
while : ; do
  case $1 in
    "")
      break;;

    --prefix=*)
      prefix="`echo $1 | sed 's/^[^=]*=//'`";
      bindir=$prefix/bin;
      libdir=$prefix/lib;
      sharedir=$prefix/share/hop;
      mandir=$prefix/man/$mansec;
      etcdir=$prefix/etc;
      contribsdir=$prefix/share/hop/contribs;;

    --etcdir=*)
      etcdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --bindir=*)
      bindir="`echo $1 | sed 's/^[^=]*=//'`";;

    --libdir=*)
      libdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --sharedir=*)
      sharedir="`echo $1 | sed 's/^[^=]*=//'`";;

    --mandir=*)
      mandir="`echo $1 | sed 's/^[^=]*=//'`"/$mansec;;

    --webletsdir=*)
      webletsdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --contribsdir=*)
      contribsdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --distribdir=*)
      distribdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --mimetypes=*)
      mimetypes="`echo $1 | sed 's/^[^=]*=//'`";;

    --jsmimetype=*)
      jsmimetype="`echo $1 | sed 's/^[^=]*=//'`";;

    --cssmimetype=*)
      cssmimetype="`echo $1 | sed 's/^[^=]*=//'`";;

    --bigloo=*)
      bigloo="`echo $1 | sed 's/^[^=]*=//'`";;

    --bglafile=*)
      afile="`echo $1 | sed 's/^[^=]*=//'`";;

    --bigloolibdir=*)
      bigloolibdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --backend=*)
      backend="`echo $1 | sed 's/^[^=]*=//'`";;

    --link=*)
      link="`echo $1 | sed 's/^[^=]*=//'`";;

    --afile=*)
      afile="`echo $1 | sed 's/^[^=]*=//'`";;

    --btags=*)
      btags="`echo $1 | sed 's/^[^=]*=//'`";;

    --bdepend=*)
      bdepend="`echo $1 | sed 's/^[^=]*=//'`";;

    --cc=*)
      cc="`echo $1 | sed 's/^[^=]*=//'`";;

    --bcflags=*)
      bcflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --extra-bcflags=*)
      bcflags="$bcflags $(echo $1 | sed 's/^[-a-z]*=//')";;

    --blflags=*)
      blflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --bhflags=*)
      bhflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --brflags=*)
      brflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --bcflagsdev=*)
      bcflagsdev="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --ccflags=*)
      ccflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --devel)
      bcflagsrts=;
      bcflagsdev=-cg;
      bscm2jsflags=;;

    --debug)
      debug=yes;
      bcflagsrts=;
      bscm2jsflags=;
      bcflags="$bcflags $bcflagsdbg";;

    --debug2)
      debug=yes;
      bcflagsrts=;
      bscm2jsflags=;
      bcflags="$bcflags $bcflagsdbg2";;

    --pmem)
      bcflags="$bcflags $bcflagspmem";;

    --pmem2)
      bcflags="$bcflags $bcflagspmem2";;

    --optimize)
      bcflags="$bcflags $bcflagsopt";;

    --profile)
      bscm2jsflags=;
      bcflags="$bcflagsprofile";;

    --enable-ssl)
      ssl=yes;;

    --disable-ssl)
      ssl=no;;

#*     --disable-avahi)                                                */
#*       avahi=no;;                                                    */
#*                                                                     */
    --gzip=*)
      gzip="`echo $1 | sed 's/^[^=]*=//'`";;

    --install=*)
      install="`echo $1 | sed 's/^[^=]*=//'`";;

    --enable-locevent)
      locevent=true;;

    --disable-locevent)
      locevent=false;;

    --enable-threads)
      threads=yes;;

    --disable-threads)
      threads=no;;

    --srfi=*)
      hopsrfis="$hopsrfis `echo $1 | sed 's/^[^=]*=//'`";;

    --library=*)
      libraries="$libraries `echo $1 | sed 's/^[^=]*=//'`";;

    --macosx-bundle|--macosx)
      arch=macosx;;

    --android)
      buildspecific=build-android;
      installspecific=install-android;
      arch=android;;

    --apache-felix=*)
      felix="`echo $1 | sed 's/^[^=]*=//'`";
      link=felix;
      hopsrfis="$hopsrfis boot-from-java"
      ;;


    -*)
      echo "*** Configure error, unknown option $1" >&2;
      echo >&2;
      echo "Usage: configure [options]" >&2;
      echo "   --prefix=dir.......... prefix to HOP install" >&2;
      echo "   --etcdir=dir.......... Hop etc directory" >&2;
      echo "   --bindir=dir.......... alternative Hop bin directory" >&2;
      echo "   --libdir=dir.......... alternative Hop lib directory" >&2;
      echo "   --sharedir=dir........ alternative Hop share directory" >&2;
      echo "   --mandir=dir.......... alternative Hop man directory" >&2;
      echo "   --webletsdir=dir...... alternative Hop weblets directory" >&2;
      echo "   --contribsdir=dir..... alternative Hop contribs directory" >&2;
      echo "   --mimetypes=file...... default mime.types file" >&2;
      echo "   --jsmimetype=type..... default 'text/javascript'" >&2;
      echo "   --cssmimetype=type.... default 'text/css'" >&2;
      echo "   --bigloo=comp......... The Bigloo compiler ($bigloo)" >&2;
      echo "   --bigloolibdir=path... The Bigloo lib-dir path" >&2;
      echo "   --backend=backend..... The execution platform [native,jvm,dotnet]" >&2;
      echo "   --link=method......... The link method [static,dynamic,library,felix]" >&2;
      echo "   --afile=afile......... The Bigloo afile tool" >&2;
      echo "   --btags=btags......... The Bigloo btags tool" >&2;
      echo "   --bdepend=bdepend..... The Bigloo dependence tool" >&2;
      echo "   --gzip................ The GNU zipper ($gzip)" >&2;
      echo "   --install............. The installer ($install)" >&2;
      echo "   --cc=cc............... The C compiler" >&2;
      echo "   --bcflags=args........ The compilation options" >&2;
      echo "   --bcflagsdev=args..... The devel Bigloo options" >&2;
      echo "   --blflags=args........ The link options" >&2;
      echo "   --bhflags=args........ The heap options" >&2;
      echo "   --brflags=args........ The heap options" >&2;
      echo "   --ccflags=args........ The heap options" >&2;
      echo "   --devel............... Enables devel mode (safe but not debug)" >&2;
      echo "   --debug[2]............ Enables Bigloo debug mode" >&2;
      echo "   --pmem[2]............. Enables memory profiling mode" >&2;
      echo "   --profile............. Enables Bigloo profiling mode" >&2;
      echo "   --optimize............ Enables Bigloo optimization mode (default)" >&2;
      echo "   --enable-ssl.......... Enables SSL support" >&2;
      echo "   --disable-ssl......... Disables SSL support (default)" >&2;
      echo "   --enable-locevent..... Enables location event support (default)" >&2;
      echo "   --disable-locevent.... Disables location event support" >&2;
      echo "   --enable-threads...... Enables multi-threading support (default)" >&2;
      echo "   --disable-threads..... Disables multi-threading support" >&2;
      echo "   --srfi=sym............ Activates this srfi (during compilation and runtime)" >&2;
      echo "   --library=lib......... Add extra lib to Hop" >&2;
      echo "   --macosx.............. Prepares the production of a MacOSX bundle" >&2;
      echo "   --android............. Prepares the production of an Android apk" >&2;
      echo "   --macosx.............. Prepares the production of a MacOSX bundle" >&2;
      echo "   --apache-felix=path... Path to felix.jar" >&2;
      exit 255;
  esac
  shift
done

#*---------------------------------------------------------------------*/
#*    First check if bigloo exists and if it is recent enough          */
#*---------------------------------------------------------------------*/
if [ ! -f $bigloo ]; then
   which $bigloo > /dev/null 2> /dev/null
   if [ "$?" != "0" ]; then
      echo "*** ERROR:configure:bigloo. Aborting"
      echo "Can't find bigloo."
      exit 1;
   fi
fi

bglversion=`$bigloo -q -eval "(exit (display *bigloo-version*))"`

$bigloo -q -eval "(exit (if (string>=? *bigloo-version* \"$bigloorequired\") 0 1))"

if [ $? != "0" ]; then
  echo "*** ERROR:configure:bigloo. Aborting"
  echo "Your version of Bigloo ($bglversion) is too old. Release"
  echo "   $bigloorequired"
  echo "or more recent is required. It may be downloaded at:"
  echo "   $bigloourl"
  exit 1;
fi

#*---------------------------------------------------------------------*/
#*    Check the backend                                                */
#*---------------------------------------------------------------------*/
case $backend in
  "native")
     break;;
  "jvm")
     etcdir=/resource/etc
     libdir=/resource/lib
     webletsdir=/resource/lib/weblets
     contribsdir=/resource/share/contribs
     sharedir=/resource/share
     hopc="java -jar $PWD/bin/hopc.jar"
     break;;
  "dotnet")
     break;;
  *)
      echo "*** Configure error, Illegal backend $backend" >&2;
      echo "see configure --help" >&2;
      exit -1;
esac

#*---------------------------------------------------------------------*/
#*    We are now able to set the correct value for cc since we know    */
#*    what Bigloo is.                                                  */
#*---------------------------------------------------------------------*/
if [ "$cc " = " " ]; then
  cc=`$bigloo -eval '(begin (print *cc*) (exit 0))'`
fi

if [ "$bigloolibdir " = " " ]; then
  bigloolibdir=`$bigloo -q -eval "(begin (print *default-lib-dir*) (exit 0))"`
else
  bcflags="$bcflags -lib-dir $bigloolibdir"
fi

if [ "$ccflags " = " " ]; then
  ccflags=`grep '^CFLAGS=' $bigloolibdir/Makefile.config | sed 's/^[A-Z]*=//'`
  if [ "$debug " = "yes " ]; then
    ccflags=`echo $ccflags | sed 's/[-]O[0-9]//'`
  fi
  ccflags="$ccflags -I$bigloolibdir"
fi

#*---------------------------------------------------------------------*/
#*    Check the Bigloo required libraries                              */
#*---------------------------------------------------------------------*/
if [ ! -f $bigloolibdir/web.heap ]; then
  echo "*** ERROR:configure:bigloo web. Aborting"
  echo ""
  echo "This error is due to a bad Bigloo installation. It might be that"
  echo "you have installed Bigloo without the WEB support. Please"
  echo "check your Bigloo installation."
  exit 1;
fi

if [ ! -f $bigloolibdir/multimedia.heap ]; then
  echo "*** ERROR:configure:bigloo multimedia. Aborting"
  echo ""
  echo "This error is due to a bad Bigloo installation. It might be that"
  echo "you have installed Bigloo without the MULTIMEDIA support. Please"
  echo "check your Bigloo installation."
  exit 1;
fi

#*---------------------------------------------------------------------*/
#*    SSL                                                              */
#*---------------------------------------------------------------------*/
if [ "$ssl " = " " ]; then
  if [ ! -f $bigloolibdir/ssl.heap ]; then
    ssl=no
  else
    ssl=yes
  fi
fi

if [ "$ssl" = "yes" ]; then
  if [ ! -f $bigloolibdir/ssl.heap ]; then
    echo "*** ERROR:configure:bigloo ssl. Aborting"
    echo ""
    echo "This error is due to a bad Bigloo installation. It might be that"
    echo "you have installed Bigloo without the SSL support. Please"
    echo "check your Bigloo installation, or configure Hop without ssl."
    exit 1;
  fi

  hopsrfis="$hopsrfis enable-ssl"
  libraries="ssl $libraries"
fi

#*---------------------------------------------------------------------*/
#*    Threads                                                          */
#*---------------------------------------------------------------------*/
if [ "$threads " = " " ]; then
  if [ -f $bigloolibdir/pthread.heap ]; then
    threads=yes
  else
    threads=no
  fi
fi

if [ "$threads" = "yes" ]; then
  if [ ! -f $bigloolibdir/pthread.heap ]; then
    echo "*** ERROR:configure:bigloo pthread. Aborting"
    echo ""
    echo "You have request a multi-threading support but it appears that"
    echo "the installed Bigloo compiler does not support multi-threading."
    echo "You must either, configure Hop without multi-threading support"
    echo "or re-configure and re-install your Bigloo compiler."
    exit 1;
  fi

  hopsrfis="$hopsrfis enable-threads"
  libraries="pthread $libraries"
fi

#*---------------------------------------------------------------------*/
#*    Avahi                                                            */
#*---------------------------------------------------------------------*/
if [ "$avahi " = " " ]; then
  if [ -f $bigloolibdir/avahi.heap ]; then
    avahi=yes
  else
    avahi=no
  fi
fi

if [ "$avahi" = "yes" ]; then
  if [ ! -f $bigloolibdir/avahi.heap ]; then
    echo "*** ERROR:configure:bigloo avahi. Aborting"
    echo ""
    echo "You have request a avahi support but it appears that"
    echo "the installed Bigloo compiler does not support avahi."
    echo "You must either, configure Hop without avahi support"
    echo "or re-configure and re-install your Bigloo compiler."
    exit 1;
  fi

  hopsrfis="$hopsrfis enable-avahi"
  libraries="avahi $libraries"
  bglcloselibs="$bglcloselibs avahi"
  zeroconf="avahi $zeroconf"
fi

#*---------------------------------------------------------------------*/
#*    Then check if bglafile exists this is a good indicator of a      */
#*    correct Bigloo installation.                                     */
#*---------------------------------------------------------------------*/
$afile runtime/*.scm > /dev/null 2> /dev/null

if [ $? != "0" ]; then
  echo "*** ERROR:configure:$afile. Aborting"
  echo ""
  echo "This error is due to a bad Bigloo installation. It might be that"
  echo "you have installed Bigloo but not ran \"ldconfig\" afterward."
  echo "In such a case, binaries produced by Bigloo cannot be executed"
  echo "because the loader cannot find the Bigloo dynamic library."
  exit 1;
fi

#*---------------------------------------------------------------------*/
#*    Jvm zip libs                                                     */
#*---------------------------------------------------------------------*/
jvmziplibs=
jvminits=

#*---------------------------------------------------------------------*/
#*    Weblets dir                                                      */
#*---------------------------------------------------------------------*/
if [ "$webletsdir " = " " ]; then
  webletsdir=$libdir/hop/$version/weblets;
fi

# Hop librairies
for p in scheme2js hopscheme hop hopwidget; do
  elib="$buildlibdir/$p"_es-$version.zip;
  slib="$buildlibdir/$p"_s-$version.zip;
  jvmziplibs="$elib $slib $jvmziplibs";
done

# Bigloo libraries
for p in web multimedia sqlite ssl calendar mail text; do
  elib="$bigloolibdir/bigloo$p"_es-$bglversion.zip;
  slib="$bigloolibdir/bigloo$p"_s-$bglversion.zip;
  jvmziplibs="$elib $slib $jvmziplibs";
  jvminits="$bigloolibdir/$p"".init $jvminits";
done

#pth
elib="$bigloolibdir/bigloopthread"_es-$bglversion.zip;
slib="$bigloolibdir/bigloopthread"_s-$bglversion.zip;
jvmziplibs="$elib $slib $jvmziplibs";
jvminits="$bigloolibdir/pthread.init $jvminits";

slib="$bigloolibdir/bigloo_s.zip";
jvmziplibs="$slib $jvmziplibs";
jvminits="$bigloolibdir/pthread.init $jvminits";

#*---------------------------------------------------------------------*/
#*    Srfis                                                            */
#*---------------------------------------------------------------------*/
for srfi in $hopsrfis; do
    bcflags="$bcflags -srfi $srfi";
done

#*---------------------------------------------------------------------*/
#*    Apache Felix                                                     */
#*---------------------------------------------------------------------*/
if [ "$felix " != " " ]; then
   if [ ! -f "$felix" ]; then
      echo "*** Configure error, Apache Felix not found in $felix" >&2;
      exit 1;
   fi

   if [ "$backend " != "jvm " ]; then
      echo "*** Configure error, Apache Felix requires the jvm backend" >&2;
      exit 1;
   fi
fi

#*---------------------------------------------------------------------*/
#*    Makefile.hopconfig                                               */
#*---------------------------------------------------------------------*/
if [ "$ssl " = "yes " ]; then
  bigloossl="'bigloossl";
  bigloossllibs="-lbigloossl_s-$""(RELEASE)";
  bigloossllibu="-lbigloossl_u-$""(RELEASE)";
else
  bigloossl="";
  bigloossllibs="";
  bigloossllibu="";
fi

if [ "$threads " = "yes " ]; then
  bigloopth="'bigloopthread";
  bigloopthlibs="-lbigloopthread_s-$""(RELEASE)";
  bigloopthlibu="-lbigloopthread_u-$""(RELEASE)";
  bigloogc="-lbigloogc_fth-$""(RELEASE)"
else
  bigloopth="";
  bigloopthlibs="";
  bigloopthlibu="";
  bigloogc="-lbigloogc-$""(RELEASE)"
fi

mkmf=etc/Makefile.hopconfig

bglcloselibs_u=
bglcloselibs_s=
bglcloselibs_init=

for p in $bglcloselibs; do
  bglcloselibs_u="$bglcloselibs_u -lbigloo$p""_u-$""(RELEASE)";
  bglcloselibs_s="$bglcloselibs_s -lbigloo$p""_s-$""(RELEASE)";
  bglcloselibs_init="'bigloo$p $bglcloselibs_init";
done

rm -f $mkmf 2> /dev/null
echo "#* Automatically generated file (don't edit) */" > $mkmf

cat $mkmf.in \
    | sed -e "s|@RELEASE@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@DATE@|$date|" \
          -e "s|@DEVEL@|$devel|" \
          -e "s|@DEBUG@|$debug|" \
          -e "s|@BIGLOO@|$bigloo|" \
          -e "s|@BIGLOOVERSION@|$bglversion|" \
          -e "s|@HOPC@|$hopc|" \
          -e "s|@BACKEND@|$backend|" \
          -e "s|@LINK@|$link|" \
          -e "s|@BIGLOOLIBDIR@|$bigloolibdir|" \
          -e "s|@AFILE@|$afile|" \
          -e "s|@JFILE@|$jfile|" \
          -e "s|@BTAGS@|$btags|" \
          -e "s|@BDEPEND@|$bdepend|" \
          -e "s|@CC@|$cc|" \
          -e "s|@FLASHCC@|$flashcc|" \
          -e "s|@UNZIP@|$unzip|" \
          -e "s|@GZIP@|$gzip|" \
          -e "s|@INSTALL@|$install|" \
          -e "s|@JAR@|$jar|" \
          -e "s|@JAVAC@|$javac|" \
          -e "s|@BCFLAGS@|$bcflags|" \
          -e "s|@BTFLAGS@|$btflags|" \
          -e "s|@BCFLAGSRTS@|$bcflagsrts|" \
          -e "s|@BSCM2JSFLAGS@|$bscm2jsflags|" \
          -e "s|@BLFLAGS@|$blflags|" \
          -e "s|@FFLAGS@|$fflags|" \
          -e "s|@JVMZIPLIBS@|$jvmziplibs|" \
          -e "s|@JVMINITS@|$jvminits|" \
          -e "s|@CCFLAGS@|$ccflags|" \
          -e "s|@BCFLAGSDEV@|$bcflagsdev|" \
          -e "s|@BUILDDIR@|$PWD|" \
          -e "s|@BUILDLIBDIR@|$PWD/lib|" \
          -e "s|@BUILDETCDIR@|$PWD/etc|" \
          -e "s|@BUILDBINDIR@|$PWD/bin|" \
          -e "s|@BUILDSHAREDIR@|$buildsharedir|" \
          -e "s|@BUILDSPECIFIC@|$buildspecific|" \
          -e "s|@INSTALLSPECIFIC@|$installspecific|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir|" \
          -e "s|@MANDIR@|$mandir|" \
          -e "s|@PREFIX@|$prefix|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@DISTRIBDIR@|$distribdir|" \
          -e "s|@REPODIR@|$repodir|" \
          -e "s|@HOPSVN@|$svn|" \
          -e "s|@HOPDISTRIBDIR@|$distribdir|" \
          -e "s|@BIGLOOSSLLIBS@|$bigloossllibs|" \
          -e "s|@BIGLOOSSLLIBU@|$bigloossllibu|" \
          -e "s|@BIGLOOPTHLIBS@|$bigloopthlibs|" \
          -e "s|@BIGLOOPTHLIBU@|$bigloopthlibu|" \
          -e "s|@RTSCONFIG@|$rts|" \
          -e "s|@HOPGCCLOSELIB@|$bigloogc|" \
          -e "s|@BGLCLOSELIBS_U@|$bglcloselibs_u|" \
          -e "s|@BGLCLOSELIBS_S@|$bglcloselibs_s|" \
    >> $mkmf

# runtime/configure.scm
for p in configure.scm configure_noarch.sch configure_macosx.sch configure_android.sch; do
  configure=runtime/$p
  rm -f $configure 2> /dev/null
  echo ";* Automatically generated file (don't edit) */" > $configure
  cat etc/$p.in \
      | sed -e "s|@VERSION@|$version|" \
            -e "s|@BIGLOOVERSION@|$bglversion|" \
            -e "s|@BRANCH@|$branch|" \
            -e "s|@BACKEND@|$backend|" \
            -e "s|@LINK@|$link|" \
            -e "s|@URL@|$url|" \
            -e "s|@BINDIR@|$bindir|" \
            -e "s|@LIBDIR@|$libdir|" \
            -e "s|@LIBPATH@|$libdir/hop/$version|" \
            -e "s|@SHAREDIR@|$sharedir|" \
            -e "s|@ETCDIR@|$etcdir|" \
            -e "s|@WEBLETSDIR@|$webletsdir|" \
            -e "s|@CONTRIBSDIR@|$contribsdir|" \
            -e "s|@MIMETYPES@|$mimetypes|" \
            -e "s|@JSMIMETYPE@|$jsmimetype|" \
            -e "s|@CSSMIMETYPE@|$cssmimetype|" \
            -e "s|@HOPJS@|$hopjs|" \
            -e "s|@HOPJSFILES@|$hopjsfiles|" \
            -e "s|@HOPSERVICEBASE@|$hopservicebase|" \
            -e "s|@HOPSRFIS@|$hopsrfis|" \
            -e "s|@HOPARCH@|$arch|" \
      >> $configure
done

# etc/hoprc.hop
hoprc=etc/hoprc.hop
rm -f $hoprc 2> /dev/null
cat etc/hoprc.hop.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@MIMETYPES@|$mimetypes|" \
    >> $hoprc

# etc/hopshrc.hop
hopshrc=etc/hopshrc.hop
rm -f $hopshrc 2> /dev/null
cat etc/hopshrc.hop.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@MIMETYPES@|$mimetypes|" \
    >> $hopshrc

# lib/hop.init
init=lib/hop.init
mkdir -p lib
rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/hop.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BIGLOOSSL@|$bigloossl|" \
          -e "s|@BIGLOOPTH@|$bigloopth|" \
          -e "s|@BIGLOOCLOSELIBS@|$bglcloselibs_init|" \
    >> $init
echo "" >> $init

echo "(cond-expand" >> $init
echo "   ((not hop-server)" >> $init
cat runtime/xml_expd.sch >> $init
echo "" >> $init
cat runtime/param_expd.sch >> $init
echo "" >> $init
cat runtime/hss_expd.sch >> $init
echo "" >> $init
cat runtime/prefs_expd.sch >> $init
echo "" >> $init
cat runtime/service_expd.sch >> $init
echo "" >> $init
cat runtime/expanders.sch >> $init
echo "" >> $init
echo "(hop-install-expanders!)" >> $init
echo "   ))" >> $init
chmod a-w $init

# lib/hopwidget.init
init=lib/hopwidget.init
mkdir -p lib
rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/hopwidget.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BIGLOOSSL@|$bigloossl|" \
          -e "s|@BIGLOOPTH@|$bigloopth|" \
    >> $init
echo "" >> $init

# lib/scheme2js.init
init=lib/scheme2js.init
mkdir -p lib
mkdir -p scheme2js/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/scheme2js.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init
chmod a-w $init

# lib/hopscheme.init
init=lib/hopscheme.init
mkdir -p lib
mkdir -p hopscheme/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/hopscheme.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init
chmod a-w $init

# lib/hopdroid.init
if [ "$arch " = "android " ]; then
  init=lib/hopdroid.init
  mkdir -p lib
  mkdir -p hopdroid/o

  rm -f $init 2> /dev/null
  echo ";* Automatically generated file (don't edit) */" > $init
 
  cat etc/hopdroid.init.in \
      | sed -e "s|@VERSION@|$version|" \
            -e "s|@BRANCH@|$branch|" \
      >> $init
  echo "" >> $init
  chmod a-w $init
fi
  
# share/hop-autoconf.js
init=share/hop-autoconf.js
mkdir -p share
rm -f $init 2> /dev/null
echo "/* Automatically generated file (don't edit) */" > $init

cat etc/hop-autoconf.js.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BACKEND@|$backend|" \
          -e "s|@LINK@|$link|" \
          -e "s|@URL@|$url|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@LOCEVENT@|$locevent|" \
          -e "s|@HOPSERVICEBASE@|$hopservicebase|" \
    >> $init
echo "" >> $init
chmod a-w $init

# src/libraries.sch
lib=src/libraries.sch
rm -f $lib 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $lib

cat etc/libraries.sch.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@LIBRARIES@|$libraries|" \
    >> $lib
echo "" >> $lib
chmod a-w $lib

# man pages
for p in etc/hop.man etc/hopsh.man etc/hopreplay.man; do
  cat $p.in \
      | sed -e "s|@RELEASE@|$version|" \
            -e "s|@BRANCH@|$branch|" \
            -e "s|@DATE@|$date|" \
            -e "s|@DEVEL@|$devel|" \
            -e "s|@DEBUG@|$debug|" \
            -e "s|@BIGLOO@|$bigloo|" \
            -e "s|@BACKEND@|$backend|" \
            -e "s|@LINK@|$link|" \
      > $p
done

#*---------------------------------------------------------------------*/
#*    Summary                                                          */
#*---------------------------------------------------------------------*/
if [ ! -x .hoprelease ]; then
  cat > .hoprelease <<EOF
#!/bin/sh
major=$version
state=$devel
minor=
EOF
  chmod a+rx .hoprelease
fi

. ./.hoprelease

if [ "$state " != "$devel " ]; then
  state=$devel
  minor=1
  cat > .hoprelease <<EOF
#!/bin/sh
major=$version
state=$devel
minor=1
EOF
  chmod a+rx .hoprelease
fi

# Generate the config.status file to please debian packages
echo "configuration completed" > config.status

echo "** Configuration summary **"
echo 
echo "Release:"
echo "  hop release number.................... $version $state$minor"
echo "  bigloo................................ $bigloo ($bglversion)"
echo "  backend............................... $backend"
echo "  link.................................. $link"
echo 
echo "Optional features:"
echo "  multi-threading....................... $threads"
echo "  https support......................... $ssl"
echo "  zeroconf.............................. $zeroconf"
echo
echo "Directories where Hop will be installed:"
echo "  etc directory......................... $etcdir"
echo "  bin directory......................... $bindir"
echo "  lib directory......................... $libdir"
echo "  share directory....................... $sharedir"
echo "  man directory......................... $mandir"
echo "  weblets directory..................... $webletsdir"
echo "  contribs directory.................... $contribsdir"
echo 
echo "Internals:"
echo "  bigloo compilation flags.............. $bcflags"
echo "  runtime compilation flags............. $bcflagsrts"
echo "  mime types............................ $mimetypes"
echo "  default JavaScript mime type.......... $jsmimetype"
echo "  default CSS mime type................. $cssmimetype"

