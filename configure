#!/bin/sh
#*=====================================================================*/
#*    serrano/prgm/project/hop/hop/configure                           */
#*    -------------------------------------------------------------    */
#*    Author      :  Manuel Serrano                                    */
#*    Creation    :  Sat Jul 31 06:49:37 2004                          */
#*    Last change :  Mon May 25 08:05:37 2020 (serrano)                */
#*    Copyright   :  2004-20 Manuel Serrano                            */
#*    -------------------------------------------------------------    */
#*    HOP autoconfiguration                                            */
#*=====================================================================*/

#*---------------------------------------------------------------------*/
#*    User flags                                                       */
#*---------------------------------------------------------------------*/
prefix=/usr/local

bigloo=bigloo
if [ "$HOPBIGLOO " != " " ]; then
  bigloo=$HOPBIGLOO
fi

afile=bglafile
jfile=bgljfile
btags=bgltags
bdepend=bgldepend
cc=
hostcc=cc
flashcc=/usr/bin/mtasc
fflags="-main -version 9 -cp /usr/share/mtasc/std -cp /usr/share/mtasc/std8 -swf"
backend=native
link=dynamic
unzip=unzip
gzip="gzip -9"
install="install -m a+r,u+r"
jar="jar cfm"
javac=javac

devmode=product
debug=no

bcflags="-O2 -fsharing -L \$(BUILDLIBDIR) -srfi bigloo-compile"
bhflags=
btflags="-gtrace"
hflags="-O2 --libdir=\$(BUILDLIBDIR)"

bglpcre=required
bglunistring=required

bcflagsdev=""
bcflagsdbg="-copt -g -O2"
bcflagsdbg2="-g -cg"
bcflagspmem="-pmem -O2 -fno-user-inlining"
bcflagspmem2="-pmem2 -fno-user-inlining"
bcflagsopt="-unsafe -O3"

bcflagsrts="-unsafe -safee"
bscm2jsflags="-unsafe"
bhopcflags=""

blflags="-copt \$(CPICFLAGS) -L \$(BUILDLIBDIR) -srfi bigloo-compile"

mimetypes=/etc/mime.types
jsmimetype="application/x-javascript"
cssmimetype="text/css"

libraries="hop hopwidget web hopscheme scheme2js multimedia sqlite js2scheme hopscript nodejs"
bglcloselibs="web multimedia"
bglextracloselibs=

closure=

hostbigloo=bigloo

#*---------------------------------------------------------------------*/
#*    Private variables                                                */
#*---------------------------------------------------------------------*/
version="3.3.0"
devel=pre
license=free
licenseforced=false
if [ "$HOPLICENSE " != " " ]; then
  license=$HOPLICENSE
fi

hopc=$PWD/bin/hopc
hop=$PWD/bin/hop
bglcpp=$PWD/scheme2js/runtime/bglcpp

branch="`echo $version | sed 's/[0-9][0-9]*$/x/'`"
branch=master
date=`date +"%d %B %Y"`

url="http://hop.inria.fr"
docurl="http://hop-dev.inria.fr/home/lang.html"

etcdir=$prefix/etc
bindir=$prefix/bin
libdir=$prefix/lib
sharedir=$prefix/share/hop
mansec=man1
mandir=$prefix/man/$mansec
webletsdir=
nodemodulesdir=
contribsdir=$prefix/share/hop/contribs
docdir=$prefix/share/doc/hop/$version
buildlibdir=$PWD/lib/hop/$version
buildsharedir=$PWD/share
distribdir=$HOME/prgm/distrib
distribdir=$HOME/prgm/project/hop/repository
buildbindir=$PWD/bin

buildspecific=
installspecific=

bigloorequired=4.3g
bigloourl=http://www-sop.inria.fr/indes/fp/Bigloo

svn=ssh://hop@hop.inria.fr/hop

if [ "$USER " = "serrano " ]; then
  distribdir=$HOME/prgm/distrib
  repodir=$HOME/prgm/project/hop/repository
else
  distribdir=.
  repodir=.
fi

# User controlled optional features
ssl=""
locevent="true"
threads=""
nodoc=
tls=

zeroconf="#f"
zeroconfbe="no"
avahi=""

upnp=""

uv=""

hopsrfis=""

rts="hop-dom.js hop-event.js hop-serialize.js hop-request.js hop-lib.js hopscheme.js hop-require.js hop-boot.js hop-react.js"

bglfail=false;

hopservicebase="/hop"
hopjssanssuffix='"hop"'
hopjsfiles='"hop-autoconf.js" "runtime.js" "hop-boot.js" "hop-react.js"'
 
for p in $rts; do
  hopjsfiles="$hopjsfiles \"$p\""; 
done

arch=noarch
mach=

androidapp=hopdroid

echo "configuring with [$*]..." > config.status

# Argument parsing
while : ; do
  case $1 in
    "")
      break;;
      
    --prefix=*)
      prefix="`echo $1 | sed 's/^[^=]*=//'`";
      bindir=$prefix/bin;
      libdir=$prefix/lib;
      sharedir=$prefix/share/hop;
      mandir=$prefix/man/$mansec;
      etcdir=$prefix/etc;
      contribsdir=$prefix/share/hop/contribs
      docdir=$prefix/share/doc/hop;;

    --etcdir=*)
      etcdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --bindir=*)
      bindir="`echo $1 | sed 's/^[^=]*=//'`";;

    --libdir=*)
      libdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --sharedir=*)
      sharedir="`echo $1 | sed 's/^[^=]*=//'`";;

    --mandir=*)
      mandir="`echo $1 | sed 's/^[^=]*=//'`"/$mansec;;

    --webletsdir=*)
      webletsdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --contribsdir=*)
      contribsdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --docdir=*)
      docdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --distribdir=*)
      distribdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --build-bindir=*)
      buildbindir="`echo $1 | sed 's/^[^=]*=//'`";
      bigloo=$buildbindir/bigloo;
      afile=$buildbindir/bglafile;
      jfile=$buildbindir/bgljfile;
      hop=$buildbindir/hop;
      hopc=$buildbindir/hopc;;
      
    --mimetypes=*)
      mimetypes="`echo $1 | sed 's/^[^=]*=//'`";;

    --jsmimetype=*)
      jsmimetype="`echo $1 | sed 's/^[^=]*=//'`";;

    --cssmimetype=*)
      cssmimetype="`echo $1 | sed 's/^[^=]*=//'`";;

    --hop=*)
      hop="`echo $1 | sed 's/^[^=]*=//'`";;
      
    --hopc=*)
      hopc="`echo $1 | sed 's/^[^=]*=//'`";;
      
    --bigloo=*)
      bigloo="`echo $1 | sed 's/^[^=]*=//'`";
      hostbigloo="`echo $1 | sed 's/^[^=]*=//'`";;

    --host-bigloo=*)
      hostbigloo="`echo $1 | sed 's/^[^=]*=//'`";;

    --build-bigloo=*)
      bigloo="`echo $1 | sed 's/^[^=]*=//'`";;

    --bigloo-pcre=*)
      bglpcre="`echo $1 | sed 's/^[^=]*=//'`";;

    --bigloo-unistring=*)
      bglunistring="`echo $1 | sed 's/^[^=]*=//'`";;

    --bglafile=*)
      afile="`echo $1 | sed 's/^[^=]*=//'`";;

    --bigloolibdir=*)
      bigloolibdir="`echo $1 | sed 's/^[^=]*=//'`";;

    --bigloobindir=*)
      bigloobindir="`echo $1 | sed 's/^[^=]*=//'`";;

    --backend=*)
      backend="`echo $1 | sed 's/^[^=]*=//'`";;

    --link=*)
      link="`echo $1 | sed 's/^[^=]*=//'`";;

    --afile=*)
      afile="`echo $1 | sed 's/^[^=]*=//'`";;

    --btags=*)
      btags="`echo $1 | sed 's/^[^=]*=//'`";;

    --bdepend=*)
      bdepend="`echo $1 | sed 's/^[^=]*=//'`";;

    --cc=*)
      cc="`echo $1 | sed 's/^[^=]*=//'`";;

    --hostcc=*)
      hostcc="`echo $1 | sed 's/^[^=]*=//'`";;

    --bcflags=*)
      bcflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --bldflags=*)
      bldflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --extra-bcflags=*)
      bcflags="$bcflags $(echo $1 | sed 's/^[-a-z]*=//')";;

    --blflags=*)
      blflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --bhflags=*)
      bhflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --hflags=*)
      hflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --bcflagsdev=*)
      bcflagsdev="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --ccflags=*)
      ccflags="`echo $1 | sed 's/^[-a-z]*=//'`";;

    --devel)
      devmode="devel";
      bcflagsrts=;
      bcflagsdev=-cg;
      bscm2jsflags=;
      bcflags="$bcflags -Wall -Wno-slot -srfi devel";;

    --debug)
      devmode="debug";
      debug=yes;
      bcflagsrts=-g;
      bscm2jsflags=-g;
      bhopcflags=-g;
      ccflagsdebug=-g;
      hflags="$hflags -g";
      bcflags="$bcflags $bcflagsdbg -Wall -Wno-slot -srfi devel -srfi debug";;

    --debug2)
      devmode="debug2";
      debug=yes;
      bcflagsrts=-g;
      bscm2jsflags=-g;
      bhopcflags=-g;
      hflags=-g;
      bcflags="$bcflags $bcflagsdbg2 -Wall -Wno-slot -srfi devel -srfi debug";;

    --pmem)
      devmode="pmem";
      debug=no;
      bscm2jsflags=-pmem;
      bcflags="$bcflags $bcflagspmem";;

    --pmem2)
      devmode="pmem2";
      debug=no;
      bscm2jsflags=-pmem2;
      bcflags="$bcflags $bcflagspmem2";;

    --optimize)
      bcflags="$bcflags $bcflagsopt";;

    --profile)
      bscm2jsflags=;
      ccflagsprofile="-DHOP_PROFILE=1";
      bcflagsprofile="-srfi profile";;

    --enable-ssl)
      ssl=yes;;

    --disable-ssl)
      ssl=no;;

    --enable-avahi)
      avahi=yes;;

    --disable-avahi)
      avahi=no;;

    --enable-upnp)
      upnp=yes;;

    --disable-upnp)
      upnp=no;;

    --disable-libuv)
      uv=no;
      libuv=no;;

    --gzip=*)
      gzip="`echo $1 | sed 's/^[^=]*=//'`";;

    --install=*)
      install="`echo $1 | sed 's/^[^=]*=//'`";;

    --enable-locevent)
      locevent=true;;

    --disable-locevent)
      locevent=false;;

    --enable-threads)
      threads=yes;;

    --disable-threads)
      threads=no;;

    --enable-tls)
      tls=yes;;

    --disable-tls)
      tls=no;;

    --disable-doc)
      nodoc=yes;;

    --enable-doc)
      nodoc=;;

    --srfi=*)
      hopsrfis="$hopsrfis `echo $1 | sed 's/^[^=]*=//'`";;

    --library=*)
      libraries="$libraries `echo $1 | sed 's/^[^=]*=//'`";;

    --macosx-bundle|--macosx)
      bcflags="$bcflags -copt -I../arch/macosx";
      arch=macosx;;

    --android)
      buildspecific=build-android;
      installspecific=install-android;
      arch=android;;

    --android-app=*)
      androidapp="`echo $1 | sed 's/^[^=]*=//'`"
      ;;
      
    --closure=*)
      closure="`echo $1 | sed 's/^[^=]*=//'`"
      ;;

    --alloc=*)
      alloc="`echo $1 | sed 's/^[^=]*=//'`"
      ;;
    
    --license=free)
      license=free;;
      
    --license=commercial)
      license=commercial;;
      
    --license=academic)
      license=academic;;

    --force-license)
      licenseforced=true;;
      
    -*)
      if [ "$1" != "--help" ]; then
        echo "*** Configure error, unknown option $1" >&2;
        echo >&2;
      fi
      echo "Usage: configure [options]" >&2;
      echo "" >&2;
      echo "Path:" >&2;
      echo "   --prefix=dir................ prefix to HOP install" >&2;
      echo "   --etcdir=dir................ Hop etc directory" >&2;
      echo "   --bindir=dir................ alternative Hop bin directory" >&2;
      echo "   --libdir=dir................ alternative Hop lib directory" >&2;
      echo "   --sharedir=dir.............. alternative Hop share directory" >&2;
      echo "   --mandir=dir................ alternative Hop man directory" >&2;
      echo "   --webletsdir=dir............ alternative Hop weblets directory" >&2;
      echo "   --contribsdir=dir........... alternative Hop contribs directory" >&2;
      echo "   --docdir=dir................ alternative Hop doc directory" >&2;
      echo "" >&2;
      echo "Misc:" >&2;
      echo "   --mimetypes=file............ default mime.types file" >&2;
      echo "   --jsmimetype=type........... default 'text/javascript'" >&2;
      echo "   --cssmimetype=type.......... default 'text/css'" >&2;
      echo "" >&2;
      echo "Features:" >&2;
      echo "   --[enable|disable]-doc...... enables documentation generation" >&2;
      echo "   --[enable|disable]-ssl...... enables SSL support" >&2;
      echo "   --[enable|disable]-locevent. enables location event support" >&2;
      echo "   --[enable|disable]-threads.. enables multi-threading support" >&2;
      echo "   --[enable|disable]-avahi.... enables AVAHI support" >&2;
      echo "   --[enable|disable]-upnp..... enables UPNP support" >&2;
      echo "   --[enable|disable]-libuv.... disables LIBUV support" >&2;
      echo "   --[enable|disable]-tls...... disables thread local storage support" >&2;
      echo "   --srfi=sym.................. activates this srfi (comptime and runtime)" >&2;
      echo "" >&2;
      echo "Cross compilation and OS dependencies:" >&2;
      echo "   --build-bindir=dir.......... cross compilers path ($buildbindir)" >&2;
      echo "   --hop=comp.................. the Hop binary ($hop)" >&2;
      echo "   --hopc=comp................. the Hopc binary ($hopc)" >&2;
      echo "   --bigloo=comp............... set both build and host Bigloo compilers ($bigloo/$hostbigloo)" >&2;
      echo "   --build-bigloo=comp......... the build Bigloo compiler ($bigloo)" >&2;
      echo "   --host-bigloo=comp.......... the host Bigloo compiler ($hostbigloo)" >&2;
      echo "   --bigloobindir=path......... the Bigloo bin-dir path" >&2;
      echo "   --bigloolibdir=path......... the Bigloo lib-dir path" >&2;
      echo "   --bigloo-prce=yes|no........ enable/disable libunistring" >&2;
      echo "   --bigloo-unistring=yes|no... enable/disable pcre" >&2;
      echo "   --backend=backend........... the execution platform [native,jvm,dotnet]" >&2;
      echo "   --link=method............... the link method [static,dynamic,library]" >&2;
      echo "   --afile=afile............... the Bigloo afile tool" >&2;
      echo "   --btags=btags............... the Bigloo btags tool" >&2;
      echo "   --bdepend=bdepend........... the Bigloo dependence tool" >&2;
      echo "   --gzip...................... the GNU zipper ($gzip)" >&2;
      echo "   --install................... the installer ($install)" >&2;
      echo "   --cc=cc..................... the C compiler" >&2;
      echo "   --hostcc=cc................. default host C compiler" >&2;
      echo "   --bcflags=args.............. the Bigloo C compilation options" >&2;
      echo "   --bldflags=args............. the Bigloo C link options" >&2;
      echo "   --extra-bcflags=args........ additional Bigloo compilation options" >&2;
      echo "   --bcflagsdev=args........... the devel Bigloo options" >&2;
      echo "   --blflags=args.............. the link options" >&2;
      echo "   --bhflags=args.............. the heap options" >&2;
      echo "   --hflags=args............... the hopc options" >&2;
      echo "   --ccflags=args.............. the C compilation options" >&2;
      echo "   --android................... prepares the production of an Android apk" >&2;
      echo "   --macosx.................... prepares the production of a MacOSX bundle" >&2;
      echo "" >&2;
      echo "Misc settings:" >&2;
      echo "   --devel..................... enables devel mode (safe but not debug)" >&2;
      echo "   --debug[2].................. enables Bigloo debug mode" >&2;
      echo "   --pmem[2]................... enables memory profiling mode" >&2;
      echo "   --profile................... enables Bigloo profiling mode" >&2;
      echo "   --optimize.................. enables Bigloo optimization mode (default)" >&2;
      echo "   --closure=comp.............. path to closure compiler" >&2;
      echo "" >&2;
      echo "Experimental features:" >&2;
      echo "   --alloc=classic|worker...... allocator method [worker]" >&2
      echo "License:" >&2;
      echo "   --license=[license]......... select Hop license (see LICENSE)" >&2;
      exit 255;
  esac
  shift
done

# patch the bigloobindir path
if [ "$bigloobindir " = " " -a "$bigloo " != "bigloo " ]; then
  bigloobindir=`dirname $bigloo`;
fi  
    
if [ "$bigloobindir " != " " ]; then
  if [ "$bigloo " = "bigloo " ]; then
    bigloo=$bigloobindir/bigloo
  fi
  if [ "$afile " = "bglafile " ]; then
    afile=$bigloobindir/bglafile
  fi
  if [ "$jfile " = "bgljfile " ]; then
    jfile=$bigloobindir/bgljfile
  fi
  if [ "$btags " = "bgltags " ]; then
    btags=$bigloobindir/bgltags
  fi
  if [ "$bdepend " = "bgldepend " ]; then
    bdepend=$bigloobindir/bgldepend
  fi
fi

#*---------------------------------------------------------------------*/
#*    Versioning                                                       */
#*---------------------------------------------------------------------*/
if [ ! -x .hoprelease ]; then
  cat > .hoprelease <<EOF
#!/bin/sh
major=$version
state=$devel
minor=
EOF
  chmod a+rx .hoprelease
fi

. ./.hoprelease

if [ "$state " != "$devel " ]; then
  state=$devel
  minor=1
  cat > .hoprelease <<EOF
#!/bin/sh
major=$version
state=$devel
minor=1
EOF
  chmod a+rx .hoprelease
fi

if [ "$state " != " " ]; then
  minorversion=-$state$minor
else
  minorversion=
fi

#*---------------------------------------------------------------------*/
#*    license                                                          */
#*---------------------------------------------------------------------*/
hopsrfis="$hopsrfis license-$license"

if [ "$license " = "commercial " ]; then
  echo "*** LICENSE ERROR:configure. Aborging!" >&2
  echo "You have choseen the commercial license." >&2
  echo "This license requires Inria approval first." >&2
  echo "Please contact Inria first." &2
fi  
  
#*---------------------------------------------------------------------*/
#*    First check that bigloo exists and is recent enough              */
#*---------------------------------------------------------------------*/
if [ ! -f $bigloo ]; then
   which $bigloo > /dev/null 2> /dev/null
   if [ "$?" != "0" ]; then
      echo "*** ERROR:configure:bigloo. Aborting!" >&2
      echo "Can't find bigloo. You need at least version $(bigloorequired)." >&2
      echo "It may be downloaded at:" >&2
      echo "   $bigloourl" >&2
      exit 1;
   fi
fi

bglversion=`$bigloo -q -eval "(exit (display (bigloo-config 'release-number)))"`

$bigloo -q -eval "(exit (if (string>=? (bigloo-config 'release-number) \"$bigloorequired\") 0 1))"

if [ $? != "0" ]; then
  echo "*** ERROR:configure:bigloo. Aborting!" >&2
  echo "Your version of Bigloo ($bglversion) is too old. Release" >&2
  echo "   $bigloorequired" >&2
  echo "or more recent is required. It may be downloaded at:" >&2
  echo "   $bigloourl" >&2
  exit 1;
fi

#*---------------------------------------------------------------------*/
#*    checking awk                                                     */
#*---------------------------------------------------------------------*/
echo "toto:tutu" | awk -F: '{ print $1 }' 2> /dev/null > /dev/null

if [ $? != "0" ]; then
  echo "*** ERROR:configure:awk. Aborting!" >&2
  echo "Awk command  missing or not running correctly." >&2
  exit 1;
fi
   
#*---------------------------------------------------------------------*/
#*    Check the backend                                                */
#*---------------------------------------------------------------------*/
case $backend in
  "native")
     break;;
  *)
      echo "*** Configure error, Illegal backend $backend" >&2;
      echo "see configure --help" >&2;
      exit -1;
esac

#*---------------------------------------------------------------------*/
#*    We are now able to set the correct value for cc since we know    */
#*    what Bigloo is.                                                  */
#*---------------------------------------------------------------------*/
if [ "$bigloolibdir " = " " ]; then
  bigloolibdir=`$bigloo -q -eval "(begin (print (bigloo-config 'library-directory)) (exit 0))"`
else
  bcflags="$bcflags -lib-dir $bigloolibdir"
fi

if [ "$cc " = " " ]; then
  cc=`$bigloo -lib-dir $bigloolibdir $bcflags -eval '(begin (print *cc*) (exit 0))'`
else  
  bcflags="$bcflags -cc $cc"
fi

if [ "$ccflags " = " " ]; then
  ccflags=`grep '^CFLAGS=' $bigloolibdir/Makefile.config | sed 's/^[A-Z]*=//'`
  if [ "$debug " = "yes " ]; then
    ccflags=`echo $ccflags | sed 's/[-]O[0-9]//'`
  fi
  ccflags="$ccflags -I$bigloolibdir \$(CPICFLAGS) \$(CNANFLAGS)"
fi

if [ "$alloc " = "classic " ]; then
  ccflags="$ccflags -DHOP_ALLOC_POLICY=1"
fi

if [ ! -f $bigloolibdir/Makefile.config ]; then
  echo "Bigloo not properly installed, file missing:" >&2;
  echo "  $bigloolibdir/Makefile.config" >&2;
  exit -1;
fi

#*---------------------------------------------------------------------*/
#*    Check that Bigloo compiles and binary runs                       */
#*---------------------------------------------------------------------*/
tmp=`$bigloo -eval '(begin (print (os-tmp)) (exit 0))'`
cat > $tmp/bigloo-test-hop.scm <<EOF
(module test (main main))

(define (main args)
  (exit (-fx 1 (string->integer (cadr args)))))
EOF

$bigloo $tmp/bigloo-test-hop.scm -o $tmp/bigloo-test-hop || exit 1

$tmp/bigloo-test-hop 1 || exit 1

rm -f $tmp/bigloo-test-hop $tmp/bigloo-test-hop.scm $tmp/bigloo-test-hop.o

#*---------------------------------------------------------------------*/
#*    Check the Bigloo required libraries                              */
#*---------------------------------------------------------------------*/
if [ ! -f $bigloolibdir/web.heap ]; then
  echo "*** ERROR:configure:bigloo web." >&2;
  echo "" >&2;
  echo "This error is due to a bad Bigloo installation. It might be that" >&2;
  echo "you have installed Bigloo without the WEB support. Please" >&2;
  echo "check your Bigloo installation." >&2;
  echo "" >&2
  bglfail=true;
fi

if [ ! -f $bigloolibdir/multimedia.heap ]; then
  echo "*** ERROR:configure:bigloo multimedia." >&2;
  echo "" >&2;
  echo "This error is due to a bad Bigloo installation. It might be that" >&2;
  echo "you have installed Bigloo without the MULTIMEDIA support. Please" >&2;
  echo "check your Bigloo installation." >&2;
  echo "" >&2
  bglfail=true;
fi

#*---------------------------------------------------------------------*/
#*    Check hostcc                                                     */
#*---------------------------------------------------------------------*/
cat > $tmp/hostcc-test.c <<EOF
int main( int argc, char *argv[] ) {
  return 0;
}
EOF

$hostcc $tmp/hostcc-test.c -o $tmp/hostcc.out \
  || (echo "*** ERROR: incorrect hostcc ($hostcc)"; exit 1) || exit 1

$tmp/hostcc.out 1 \
  || (echo "*** ERROR: incorrect hostcc compilation"; exit 1) || exit 1

rm -f $tmp/hostcc.out $tmp/hostcc-test.c

#*---------------------------------------------------------------------*/
#*    SSL                                                              */
#*---------------------------------------------------------------------*/
if [ "$ssl " = " " ]; then
  if [ ! -f $bigloolibdir/ssl.heap ]; then
    ssl=no
  else
    ssl=yes
  fi
fi

if [ "$ssl" = "yes" ]; then
  if [ ! -f $bigloolibdir/ssl.heap ]; then
    echo "*** ERROR:configure:bigloo ssl." >&2;
    echo "" >&2;
    echo "This error is due to a bad Bigloo installation. It might be that" >&2;
    echo "you have installed Bigloo without the SSL support. Please" >&2;
    echo "check your Bigloo installation, or configure Hop without ssl." >&2;
    echo "" >&2
    bglfail=true;
  fi

  hopsrfis="$hopsrfis enable-ssl"
  libraries="$libraries ssl"
  bglcloselibs="$bglcloselibs ssl"
fi

#*---------------------------------------------------------------------*/
#*    Threads                                                          */
#*---------------------------------------------------------------------*/
if [ "$threads " = " " ]; then
  if [ -f $bigloolibdir/pthread.heap ]; then
    threads=yes
  else
    threads=no
  fi
fi

if [ "$threads" = "yes" ]; then
  if [ ! -f $bigloolibdir/pthread.heap ]; then
    echo "*** ERROR:configure:bigloo pthread." >&2;
    echo "" >&2;
    echo "You have request a multi-threading support but it appears that" >&2;
    echo "the installed Bigloo compiler does not support multi-threading." >&2;
    echo "You must either, configure Hop without multi-threading support" >&2;
    echo "or re-configure and re-install your Bigloo compiler." >&2;
    echo "" >&2
    bglfail=true;
  fi

  hopsrfis="$hopsrfis enable-threads"
  libraries="$libraries pthread"
  bglcloselibs="$bglcloselibs pthread"
else
  if [ "$avahi " = "yes " ]; then
    echo "*** ERROR:configure:bigloo avahi." >&2;
    echo "" >&2;
    echo "Avahi requires threads, either disable avahi (--disable-avahi)" >&2;
    echo "or enable threads (--enable-threads)" >&2;
    echo "" >&2
    bglfail=true;
  else
    avahi=no;
  fi
  if [ "$upnp " = "yes " ]; then
    echo "*** ERROR:configure:bigloo upnp." >&2;
    echo "" >&2;
    echo "Upnp requires threads, either disable upnp (--disable-upnp)" >&2;
    echo "or enable threads (--enable-threads)" >&2;
    echo "" >&2
    bglfail=true;
  else
    upnp=no;
  fi
fi

#*---------------------------------------------------------------------*/
#*    Avahi                                                            */
#*---------------------------------------------------------------------*/
if [ "$avahi " = " " ]; then
  if [ -f $bigloolibdir/avahi.heap ]; then
    avahi=yes
  else
    avahi=no
  fi
fi

if [ "$avahi " = "yes " ]; then
  if [ ! -f $bigloolibdir/avahi.heap ]; then
    echo "*** ERROR:configure:bigloo avahi." >&2;
    echo "" >&2;
    echo "You have request a avahi support but it appears that" >&2;
    echo "the installed Bigloo compiler does not support avahi." >&2;
    echo "You must either, configure Hop without avahi support" >&2;
    echo "or re-configure and re-install your Bigloo compiler." >&2;
    echo "" >&2
    bglfail=true;
  fi

  hopsrfis="$hopsrfis enable-avahi"
  zeroconf="#t"
  zeroconfbe="avahi"
  libraries="$libraries avahi"
  bglcloselibs="$bglcloselibs avahi"
fi

#*---------------------------------------------------------------------*/
#*    Upnp                                                             */
#*---------------------------------------------------------------------*/
if [ "$upnp " = " " ]; then
  if [ -f $bigloolibdir/upnp.heap ]; then
    upnp=yes
  else
    upnp=no
  fi
fi

if [ "$upnp " = "yes " ]; then
  if [ ! -f $bigloolibdir/upnp.heap ]; then
    echo "*** ERROR:configure:bigloo upnp." >&2;
    echo "" >&2;
    echo "You have request a upnp support but it appears that" >&2;
    echo "the installed Bigloo compiler does not support upnp." >&2;
    echo "You must either, configure Hop without upnp support" >&2;
    echo "or re-configure and re-install your Bigloo compiler." >&2;
    echo "" >&2
    bglfail=true;
  fi

  hopsrfis="$hopsrfis enable-upnp"
  libraries="$libraries upnp"
  bglcloselibs="$bglcloselibs upnp"
fi

#*---------------------------------------------------------------------*/
#*    uv                                                               */
#*---------------------------------------------------------------------*/
if [ "$uv " = " " ]; then
  if [ -f $bigloolibdir/libuv.heap ]; then
    uv=yes
  else
    uv=no
  fi
fi

if [ "$uv " = "no " ]; then
  if [ "$libuv " != "no " ]; then
    echo "*** ERROR:configure:bigloo libuv." >&2;
    echo "" >&2;
    echo "Bigloo LIBUV is not installed on your machine." >&2;
    echo "" >&2;
    echo "LIBUV is strongly recommended for better performance. It is then" >&2;
    echo "advised to install LIBUV and re-install Bigloo before compiling Hop." >&2;
    echo "However, if you want to give Hop a try without LIBUV, configure it" >&2;
    echo "with the \"--disable-libuv\" option." >&2;
    echo "" >&2
    bglfail=true;
  fi
else
  hopsrfis="$hopsrfis enable-libuv"
  libraries="$libraries libuv"
  bglcloselibs="$bglcloselibs libuv"
  bglextracloselibs="-luv"
fi

#*---------------------------------------------------------------------*/
#*    unistring                                                        */
#*---------------------------------------------------------------------*/
haveunistring=`$bigloo -lib-dir $bigloolibdir -q -eval "(exit (display (bigloo-config 'have-unistring)))"`
if [ "$haveunistring " != "#t " -a "$bglunistring " != "no " ]; then
    echo "*** ERROR:configure: your Bigloo setting  does not support \"unistring\"." >&2
    echo "  As a consequence JavaScript locale comparison are not correctly supported." >&2
    echo "  If you known what you are doing and if you don't need string locale " >&2
    echo "  comparison, re-configure Hop with the following option:" >&2
    echo "    ./configure --bigloo-unistring=no ..." >&2
    echo "" >&2
    bglfail=true;
fi

#*---------------------------------------------------------------------*/
#*    pcre                                                             */
#*---------------------------------------------------------------------*/
pcre=`$bigloo -lib-dir $bigloolibdir -q -eval "(exit (display (bigloo-config 'regexp)))"`

if [ "$pcre " != "pcre " -a "$bglpcre " != "no " ]; then
    echo "*** ERROR:configure: your Bigloo setting  does not support \"pcre\"." >&2
    echo "  As a consequence JavaScript regular expressions are not fully supported." >&2
    echo "  If you known what you are doing and if you don't want compatible regexp" >&2
    echo "  re-configure Hop with the following option:" >&2
    echo "    ./configure --bigloo-pcre=no ..." >&2
    echo "  Otherwise, install pcre and re-configure and re-compile Bigloo first." >&2
    echo "" >&2
    bglfail=true;
fi

#*---------------------------------------------------------------------*/
#*    tls                                                              */
#*---------------------------------------------------------------------*/
if [ "$tls " != "no " ]; then
  tls=`bigloo -q -eval "(exit (display (bigloo-config 'thread-local-storage))))"`
  if [ "$tls " = "#t " ]; then
    hopsrfis="enable-tls $hopsrfis";
  fi
fi

#*---------------------------------------------------------------------*/
#*    bgl test completion                                              */
#*---------------------------------------------------------------------*/
if [ "$bglfail " = "true " ]; then
  echo "When re-configuring Bigloo, it might be useful to use the configure option" >&2
  echo "\"--abort-missing\" that will force the Bigloo configuration process to fail" >&2
  echo "as soon as one important Bigloo library is missing." >&2
  exit 1
fi    

#*---------------------------------------------------------------------*/
#*    Then check if bglafile exists this is a good indicator of a      */
#*    correct Bigloo installation.                                     */
#*---------------------------------------------------------------------*/
$afile runtime/*.scm > /dev/null 2> /dev/null

if [ $? != "0" ]; then
  echo "*** ERROR:configure:$afile. Aborting"
  echo ""
  echo "This error is due to a bad Bigloo installation. It might be that"
  echo "you have installed Bigloo but not ran \"ldconfig\" afterward."
  echo "In such a case, binaries produced by Bigloo cannot be executed"
  echo "because the loader cannot find the Bigloo dynamic library."
  exit 1;
fi

#*---------------------------------------------------------------------*/
#*    NODEMODULES dir                                                  */
#*---------------------------------------------------------------------*/
if [ "$nodemodulesdir " = " " ]; then
  nodemodulesdir=$libdir/hop/$version/node_modules;
fi

#*---------------------------------------------------------------------*/
#*    Weblets dir                                                      */
#*---------------------------------------------------------------------*/
if [ "$webletsdir " = " " ]; then
  webletsdir=$libdir/hop/$version/weblets;
fi

#*---------------------------------------------------------------------*/
#*    Srfis                                                            */
#*---------------------------------------------------------------------*/
for srfi in $hopsrfis; do
    bcflags="$bcflags -srfi $srfi";
    bhflags="$bhflags -srfi $srfi";
done

#*---------------------------------------------------------------------*/
#*    closure (optional)                                               */
#*---------------------------------------------------------------------*/
if [ "$closure " = " " ]; then
  js="function _(){return 1};"
  for p in closure-compiler closure; do
    if [ "`echo \"$js\" | $p > /dev/null 2> /dev/null`" = "$js" ]; then
      closure=$p
      break;
    fi
  done
fi
      
if [ "$closure " = " " ]; then
  closure=cat
fi
    
#*---------------------------------------------------------------------*/
#*    buildid & buildtag ...                                           */
#*---------------------------------------------------------------------*/
buildid=
buildtag=

if [ -e .git ]; then
  buildtag=`git log -1 --abbrev-commit --pretty="%h"`

  git status -s | grep M > /dev/null
  
  if [ "$? " = "0 " ]; then
    buildtag="$buildtag+"
  fi
else
  if [ -f .buildtag ]; then
    buildtag=`cat .buildtag`
  fi
fi  

# md5sum
echo "1" | md5sum > /dev/null 2> /dev/null

if [ "$? " = "0 " ]; then
  buildid=`md5sum hopscript/*.scm js2scheme/*.scm nodejs/*.js | md5sum | sed 's/[ ]*[-]$//'`
fi

if [ "$buildid " = " " ]; then
  # md5
  echo "1" | md5 -q > /dev/null 2> /dev/null

  if [ "$? " = "0 " ]; then
    buildid=`md5 hopscript/*.scm js2scheme/*.scm nodejs/*.js | md5 -q | sed 's/[ ]*[-]$//'`
  fi
fi

if [ "$buildid " = " " ]; then
  # bigloo
  for p in hopscript/*.scm js2scheme/*.scm nodejs/*.js; do
    id=`$bigloo -s -eval "(begin (print (md5sum-file \"$p\")) (exit 1))"`
    buildid="$buildid $id"
  done
  buildid=`$bigloo -s -eval "(begin (print (md5sum-string \"$buildid\")) (exit 1))"`
fi  

buildid=`$bigloo -s -eval "(begin (print (md5sum-string \"$buildid $buildtag $bigloolibdir\")) (exit 1))"`

#*---------------------------------------------------------------------*/
#*    OS specific                                                      */
#*---------------------------------------------------------------------*/
if [ "$arch " = "android " ]; then
  hopsrfis="$hopsrfis enable-hopdroid"
  bcflags="$bcflags -srfi enable-hopdroid";
  bglcloselibs="$bglcloselibs phone";
fi

#*---------------------------------------------------------------------*/
#*    Create directories                                               */
#*---------------------------------------------------------------------*/
mkdir -p bin
mkdir -p lib
mkdir -p lib/hop
mkdir -p lib/hop/$version

#*---------------------------------------------------------------------*/
#*    Makefile.hopconfig                                               */
#*---------------------------------------------------------------------*/
if [ "$ssl " = "yes " ]; then
  bigloossllibs="$""(OPENSSLLIBS)";
  bigloossllibu="$""(OPENSSLLIBS)";
else
  bigloossllibs="";
  bigloossllibu="";
fi

if [ "$threads " = "yes " ]; then
  bigloopthlibs="-lbigloopthread_s-$""(RELEASE)";
  bigloopthlibu="-lbigloopthread_u-$""(RELEASE)";
  bigloogc="-lbigloogc_fth-$""(RELEASE)"
  bhopcflags="--js-worker-slave";
else
  bigloopthlibs="";
  bigloopthlibu="";
  bigloogc="-lbigloogc-$""(RELEASE)"
fi

mkmf=etc/Makefile.hopconfig

bglcloselibs_u="-lbigloo_u-$""(RELEASE) "
bglcloselibs_s="-lbigloo_s-$""(RELEASE) "

for p in $bglcloselibs; do
  bglcloselibs_u="$bglcloselibs_u -lbigloo$p""_u-$""(RELEASE)";
  bglcloselibs_s="$bglcloselibs_s -lbigloo$p""_s-$""(RELEASE)";
done

rm -f $mkmf 2> /dev/null
echo "#* Automatically generated file (don't edit) */" > $mkmf

if [ "$bldflags " = " " ]; then
  bldflags="-rpath \$(HOPLIBDIR)/\$(HOPFILDIR)"
fi

if [ "$mach " = " " ]; then
  mach="`$bigloo -lib-dir $bigloolibdir -eval \"(begin (display (bigloo-config 'os-name)) (exit 0))\"`-`$bigloo -lib-dir $bigloolibdir -eval \"(begin (display (bigloo-config 'os-arch)) (exit 0))\"`"
fi

for p in hopc.sh hop.sh hopaot.sh; do
  cat etc/$p.in \
    | sed -e "s|@RELEASE@|$version|" \
          -e "s|@BIGLOO@|$bigloo|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@DATE@|$date|" \
          -e "s|@DEVEL@|$devel|" \
          -e "s|@DEBUG@|$debug|" \
          -e "s|@HOP@|$hop|" \
          -e "s|@HOPC@|$hopc|" \
          -e "s|@HOPCFLAGS@|$hopcflags|" \
          -e "s|@BUILDDIR@|$PWD|" \
          -e "s|@BUILDLIBDIR@|$buildlibdir|" \
          -e "s|@BUILDETCDIR@|$PWD/etc|" \
          -e "s|@BUILDBINDIR@|$PWD/bin|" \
          -e "s|@BUILDSHAREDIR@|$buildsharedir|" \
          -e "s|@BUILDSPECIFIC@|$buildspecific|" \
          -e "s|@INSTALLSPECIFIC@|$installspecific|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
  > bin/$p
  chmod a+rx bin/$p
done

if [ "$hopc" = "$PWD/bin/hopc" ]; then
  mkmfhopc=$hopc.sh
else  
  mkmfhopc=$hopc
fi

if [ "$hop" = "$PWD/bin/hop" ]; then
  mkmfhop=$hop.sh
else  
  mkmfhop=$hop
fi

hsflags="`echo $hflags | sed 's/[-]O[^ ]*//g'`-Os"

cat $mkmf.in \
  | sed -e "s|@RELEASE@|$version|" \
        -e "s|@BRANCH@|$branch|" \
        -e "s|@DATE@|$date|" \
        -e "s|@DEVEL@|$devel|" \
        -e "s|@DEBUG@|$debug|" \
        -e "s|@BIGLOO@|$bigloo|" \
        -e "s|@HOSTBIGLOO@|$hostbigloo|" \
        -e "s|@BIGLOOVERSION@|$bglversion|" \
        -e "s|@HOP@|$mkmfhop|" \
        -e "s|@HOPC@|$mkmfhopc|" \
        -e "s|@BGLCPP@|$bglcpp|" \
        -e "s|@BACKEND@|$backend|" \
        -e "s|@LINK@|$link|" \
        -e "s|@BIGLOOLIBDIR@|$bigloolibdir|" \
        -e "s|@AFILE@|$afile|" \
        -e "s|@JFILE@|$jfile|" \
        -e "s|@BTAGS@|$btags|" \
        -e "s|@BDEPEND@|$bdepend|" \
        -e "s|@CC@|$cc|" \
        -e "s|@HOSTCC@|$hostcc|" \
        -e "s|@FLASHCC@|$flashcc|" \
        -e "s|@UNZIP@|$unzip|" \
        -e "s|@GZIP@|$gzip|" \
        -e "s|@INSTALL@|$install|" \
        -e "s|@JAR@|$jar|" \
        -e "s|@JAVAC@|$javac|" \
        -e "s|@BCFLAGS@|$bcflags $bcflagsprofile|" \
        -e "s|@BLDFLAGS@|$bldflags|" \
        -e "s|@BHFLAGS@|$bhflags|" \
        -e "s|@HFLAGS@|$hflags|" \
        -e "s|@HSFLAGS@|$hsflags|" \
        -e "s|@BTFLAGS@|$btflags|" \
        -e "s|@BCFLAGSRTS@|$bcflagsrts|" \
        -e "s|@BSCM2JSFLAGS@|$bscm2jsflags|" \
        -e "s|@BHOPCFLAGS@|$bhopcflags|" \
        -e "s|@BLFLAGS@|$blflags|" \
        -e "s|@FFLAGS@|$fflags|" \
        -e "s|@CCFLAGS@|$ccflags $ccflagsprofile $ccflagsdebug|" \
        -e "s|@BCFLAGSDEV@|$bcflagsdev|" \
        -e "s|@BUILDDIR@|$PWD|" \
        -e "s|@BUILDLIBDIR@|$buildlibdir|" \
        -e "s|@BUILDETCDIR@|$PWD/etc|" \
        -e "s|@BUILDBINDIR@|$PWD/bin|" \
        -e "s|@BUILDSHAREDIR@|$buildsharedir|" \
        -e "s|@BUILDSPECIFIC@|$buildspecific|" \
        -e "s|@INSTALLSPECIFIC@|$installspecific|" \
        -e "s|@BINDIR@|$bindir|" \
        -e "s|@LIBDIR@|$libdir|" \
        -e "s|@LIBPATH@|$libdir/hop/$version|" \
        -e "s|@SHAREDIR@|$sharedir|" \
        -e "s|@MANDIR@|$mandir|" \
        -e "s|@PREFIX@|$prefix|" \
        -e "s|@ETCDIR@|$etcdir|" \
        -e "s|@WEBLETSDIR@|$webletsdir|" \
        -e "s|@NMODULESDIR@|$nodemodulesdir|" \
        -e "s|@CONTRIBSDIR@|$contribsdir|" \
        -e "s|@DOCDIR@|$docdir|" \
        -e "s|@DOCURL@|$docurl|" \
        -e "s|@DISTRIBDIR@|$distribdir|" \
        -e "s|@REPODIR@|$repodir|" \
        -e "s|@HOPSVN@|$svn|" \
        -e "s|@HOPDISTRIBDIR@|$distribdir|" \
        -e "s|@BIGLOOSSLLIBS@|$bigloossllibs|" \
        -e "s|@BIGLOOSSLLIBU@|$bigloossllibu|" \
        -e "s|@BIGLOOPTHLIBS@|$bigloopthlibs|" \
        -e "s|@BIGLOOPTHLIBU@|$bigloopthlibu|" \
        -e "s|@RTSCONFIG@|$rts|" \
        -e "s|@HOPGCCLOSELIB@|$bigloogc|" \
        -e "s|@BGLCLOSELIBS_U@|$bglcloselibs_u $bglextracloselibs|" \
        -e "s|@BGLCLOSELIBS_S@|$bglcloselibs_s $bglextracloselibs|" \
        -e "s|@BGLCLOSELIBS@|$bglcloselibs_version|" \
	-e "s|@BGLMACH@|$mach|" \
	-e "s|@BGLARCH@|$arch|" \
        -e "s|@BUILDID@|$buildid|" \
        -e "s|@BUILDTAG@|$buildtag|" \
        -e "s|@CLOSURE@|$closure|" \
	-e "s|@THREADS@|$threads|" \
	-e "s|@NODOC@|$nodoc|" \
	>> $mkmf

# runtime/configure.scm
for p in configure.scm configure_noarch.sch configure_macosx.sch configure_android.sch; do
  configure=runtime/$p
  rm -f $configure 2> /dev/null
  echo ";* Automatically generated file (don't edit) */" > $configure
  cat etc/$p.in \
    | sed -e "s|@VERSION@|$version|" \
	  -e "s|@MINORVERSION@|$minorversion|" \
          -e "s|@BIGLOOVERSION@|$bglversion|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BACKEND@|$backend|" \
          -e "s|@LINK@|$link|" \
          -e "s|@URL@|$url|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir/$version|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@NMODULESDIR@|$nodemodulesdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@DOCDIR@|$docdir|" \
          -e "s|@DOCURL@|$docurl|" \
          -e "s|@MIMETYPES@|$mimetypes|" \
          -e "s|@JSMIMETYPE@|$jsmimetype|" \
          -e "s|@CSSMIMETYPE@|$cssmimetype|" \
          -e "s|@HOPJSSANSSUFFIX@|$hopjssanssuffix|" \
          -e "s|@HOPJSFILES@|$hopjsfiles|" \
          -e "s|@HOPSERVICEBASE@|$hopservicebase|" \
          -e "s|@HOPZEROCONF@|$zeroconf|" \
          -e "s|@HOPSRFIS@|$hopsrfis|" \
          -e "s|@HOPMACH@|$mach|" \
          -e "s|@HOPARCH@|$arch|" \
          -e "s|@BUILDID@|$buildid|" \
          -e "s|@BUILDTAG@|$buildtag|" \
          -e "s|@BUILDARCH@|$mach|" \
          -e "s|@BIGLOO@|$bigloo|" \
          -e "s|@HOSTBIGLOO@|$hostbigloo|" \
	  >> $configure
done

# nodejs/configure.scm
for p in nodejs.sch; do
  configure=nodejs/$p
  rm -f $configure 2> /dev/null
  echo ";* Automatically generated file (don't edit) */" > $configure
  cat etc/$p.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BIGLOOVERSION@|$bglversion|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BACKEND@|$backend|" \
          -e "s|@LINK@|$link|" \
          -e "s|@URL@|$url|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir/$version|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@NMODULESDIR@|$nodemodulesdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@DOCDIR@|$docdir|" \
          -e "s|@DOCURL@|$docurl|" \
          -e "s|@MIMETYPES@|$mimetypes|" \
          -e "s|@JSMIMETYPE@|$jsmimetype|" \
          -e "s|@CSSMIMETYPE@|$cssmimetype|" \
          -e "s|@HOPJSSANSSUFFIX@|$hopjssanssuffix|" \
          -e "s|@HOPJSFILES@|$hopjsfiles|" \
          -e "s|@HOPSERVICEBASE@|$hopservicebase|" \
          -e "s|@HOPZEROCONF@|$zeroconf|" \
          -e "s|@HOPSRFIS@|$hopsrfis|" \
          -e "s|@HOPMACH@|$mach|" \
          -e "s|@HOPARCH@|$arch|" \
	  >> $configure
done

# script
for script in test/nodejs/TEST test/nodejs/HOP.exe test/hopjs/TEST; do
  rm -f $script 2> /dev/null
  cat $script.in \
    | sed -e "s|@VERSION@|$version|g" \
          -e "s|@BIGLOOVERSION@|$bglversion|g" \
          -e "s|@BRANCH@|$branch|g" \
          -e "s|@BACKEND@|$backend|g" \
          -e "s|@LINK@|$link|g" \
          -e "s|@URL@|$url|g" \
          -e "s|@BINDIR@|$bindir|g" \
          -e "s|@LIBDIR@|$libdir|g" \
          -e "s|@LIBPATH@|$libdir/hop/$version|g" \
          -e "s|@SHAREDIR@|$sharedir/$version|g" \
          -e "s|@ETCDIR@|$etcdir|g" \
          -e "s|@WEBLETSDIR@|$webletsdir|g" \
          -e "s|@NMODULESDIR@|$nodemodulesdir|g" \
          -e "s|@CONTRIBSDIR@|$contribsdir|g" \
          -e "s|@BUILDDIR@|$PWD|g" \
          -e "s|@BUILDLIBDIR@|$buildlibdir|g" \
          -e "s|@BUILDETCDIR@|$PWD/etc|g" \
          -e "s|@BUILDBINDIR@|$PWD/bin|g" \
          -e "s|@DOCDIR@|$docdir|g" \
          -e "s|@DOCURL@|$docurl|g" \
          -e "s|@MIMETYPES@|$mimetypes|g" \
          -e "s|@JSMIMETYPE@|$jsmimetype|g" \
          -e "s|@CSSMIMETYPE@|$cssmimetype|g" \
          -e "s|@HOPJSSANSSUFFIX@|$hopjssanssuffix|g" \
          -e "s|@HOPJSFILES@|$hopjsfiles|g" \
          -e "s|@HOPSERVICEBASE@|$hopservicebase|g" \
          -e "s|@HOPZEROCONF@|$zeroconf|g" \
          -e "s|@HOPSRFIS@|$hopsrfis|g" \
          -e "s|@HOPMACH@|$mach|g" \
          -e "s|@HOPARCH@|$arch|g" \
	  >> $script
  chmod a+x $script
done

# misc files
for file in etc/hopjs-config.el; do
  rm -f $file 2> /dev/null
  echo ";* Automatically generated file (don't edit) */" > $file
  cat $file.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BIGLOOVERSION@|$bglversion|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BACKEND@|$backend|" \
          -e "s|@LINK@|$link|" \
          -e "s|@URL@|$url|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir/$version|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@NMODULESDIR@|$nodemodulesdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@BUILDDIR@|$PWD|" \
          -e "s|@BUILDLIBDIR@|$buildlibdir|" \
          -e "s|@BUILDETCDIR@|$PWD/etc|" \
          -e "s|@BUILDBINDIR@|$PWD/bin|" \
          -e "s|@DOCDIR@|$docdir|" \
          -e "s|@DOCURL@|$docurl|" \
	  >> $file
  chmod a+r $file
done

# etc/hoprc.hop
hoprc=etc/hoprc.hop
rm -f $hoprc 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $hoprc
cat etc/hoprc.hop.in \
  | sed -e "s|@VERSION@|$version|" \
        -e "s|@BRANCH@|$branch|" \
        -e "s|@BINDIR@|$bindir|" \
        -e "s|@LIBDIR@|$libdir|" \
        -e "s|@LIBPATH@|$libdir/hop/$version|" \
        -e "s|@SHAREDIR@|$sharedir/$version|" \
        -e "s|@ETCDIR@|$etcdir|" \
        -e "s|@WEBLETSDIR@|$webletsdir|" \
        -e "s|@NMODULESDIR@|$nodemodulesdir|" \
        -e "s|@CONTRIBSDIR@|$contribsdir|" \
        -e "s|@DOCDIR@|$docdir|" \
        -e "s|@DOCURL@|$docurl|" \
        -e "s|@MIMETYPES@|$mimetypes|" \
	>> $hoprc

# etc/hopshrc.hop
hopshrc=etc/hopshrc.hop
rm -f $hopshrc 2> /dev/null
cat etc/hopshrc.hop.in \
  | sed -e "s|@VERSION@|$version|" \
        -e "s|@BRANCH@|$branch|" \
        -e "s|@BINDIR@|$bindir|" \
        -e "s|@LIBDIR@|$libdir|" \
        -e "s|@LIBPATH@|$libdir/hop/$version|" \
        -e "s|@SHAREDIR@|$sharedir/$version|" \
        -e "s|@ETCDIR@|$etcdir|" \
        -e "s|@WEBLETSDIR@|$webletsdir|" \
        -e "s|@NMODULESDIR@|$nodemodulesdir|" \
        -e "s|@CONTRIBSDIR@|$contribsdir|" \
        -e "s|@DOCDIR@|$docdir|" \
        -e "s|@DOCURL@|$docurl|" \
        -e "s|@MIMETYPES@|$mimetypes|" \
	>> $hopshrc

# doc/doc.json
docjson=doc/doc.json
rm -f $docjson 2> /dev/null
cat $docjson.in \
  | sed -e "s|@VERSION@|$version$minorversion|" \
	-e "s|@BRANCH@|$version|" \
	-e "s|@DATE@|$date|" \
	-e "s|@BIGLOOVERSION@|$bglversion|" \
	>> $docjson

# docker/Dockerfile.in
docker=docker/Dockerfile
rm -f $docker 2> /dev/null
cat $docker.in \
  | sed -e "s|@HOPVERSION@|$version|" \
	-e "s|@HOPMINORVERSION@|$minorversion|" \
	-e "s|@BIGLOOVERSION@|$bglversion|" \
    >> $docker

# travis.yml.in
travis=.travis.yml
rm -f $travis 2> /dev/null
cat $travis.in \
  | sed -e "s|@HOPVERSION@|$version|" \
	-e "s|@HOPMINORVERSION@|$minorversion|" \
	-e "s|@BIGLOOVERSION@|$bglversion|" \
    >> $travis

# lib/hop.init
init=lib/hop/$version/hop.init

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/hop.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BIGLOOCLOSELIBS@|$bglcloselibs|" \
    >> $init
echo "" >> $init

# lib/hopc_config.sch
config=lib/hop/$version/hopc_config.sch

rm -f $config 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $config
echo ";; Hop release number" >> $config
echo "\"$version\"" >> $config
echo "" >> $config
cat etc/hopc_config.sch.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BIGLOO@|$bigloo|" \
          -e "s|@URL@|$url|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBRARY-PATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir/$version|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@DOCDIR@|$docdir|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@NODE_MODULES@|$nodemodulesdir|" \
          -e "s|@BUILD-ID@|$buildid|" \
          -e "s|@BUILD-TAG@|$buildtag|" \
          -e "s|@BUILD-ARCH@|$mach|" \
          -e "s|@MIMETYPES@|$mimetypes|" \
          -e "s|@JAVASCRIPT-MIME-TYPE@|$jsmimetype|" \
          -e "s|@CSS-MIME-TYPE@|$cssmimetype|" \
    >> $config
echo "" >> $config

cat etc/hop.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BIGLOOCLOSELIBS@|$bglcloselibs|" \
    >> $init
echo "" >> $init

echo "(cond-expand" >> $init
echo "   (bigloo-compile" >> $init
cat runtime/xml_expd.sch >> $init
echo "" >> $init
cat runtime/param_expd.sch >> $init
echo "" >> $init
cat runtime/hss_expd.sch >> $init
echo "" >> $init
cat runtime/prefs_expd.sch >> $init
echo "" >> $init
cat runtime/service_expd.sch >> $init
echo "" >> $init
cat runtime/verbose_expd.sch >> $init
echo "" >> $init
cat runtime/expanders.sch >> $init
echo "" >> $init
echo "(hop-install-expanders!)" >> $init
echo "   ))" >> $init
chmod a-w $init

# lib/hopwidget.init
init=lib/hop/$version/hopwidget.init
mkdir -p lib
rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/hopwidget.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BIGLOOCLOSELIBS@|$bglcloselibs|" \
    >> $init
echo "" >> $init

# lib/scheme2js.init
init=lib/hop/$version/scheme2js.init
mkdir -p lib
mkdir -p scheme2js/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/scheme2js.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init
chmod a-w $init

# lib/hopscheme.init
init=lib/hop/$version/hopscheme.init
mkdir -p lib
mkdir -p hopscheme/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/hopscheme.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init
chmod a-w $init

# lib/hopdroid.init
if [ "$arch " = "android " ]; then
  init=lib/hop/$version/hopdroid.init
  mkdir -p lib
  mkdir -p hopdroid/o

  rm -f $init 2> /dev/null
  echo ";* Automatically generated file (don't edit) */" > $init
 
  cat etc/hopdroid.init.in \
      | sed -e "s|@VERSION@|$version|" \
            -e "s|@BRANCH@|$branch|" \
      >> $init
  echo "" >> $init
  chmod a-w $init
  
  cat node_modules/hopdroid/lib/Makefile.in \
      | sed -e "s|@HOPDROIDCLOSELIBS_S@|-lhopdroid_s-$version|" \
            -e "s|@HOPDROIDCLOSELIBS_U@|-lhopdroid_u-$version|" \
      > node_modules/hopdroid/lib/Makefile
  chmod a-w $init
  cat arch/android/hopdroid/phone.scm.in \
      | sed -e "s|@HOPAPP@|$androidapp|" \
      > arch/android/hopdroid/phone.scm
  chmod a-w $init
else
  cat node_modules/hopdroid/lib/Makefile.in \
      | sed -e "s|@HOPDROIDCLOSELIBS_S@||" \
            -e "s|@HOPDROIDCLOSELIBS_U@||" \
      > node_modules/hopdroid/lib/Makefile
  chmod a-w $init
fi
  
# lib/js2scheme.init
init=lib/hop/$version/js2scheme.init
mkdir -p lib
mkdir -p js2scheme/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/js2scheme.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init
chmod a-w $init

# lib/hopscript.init
init=lib/hop/$version/hopscript.init
mkdir -p lib
mkdir -p hopscript/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/hopscript.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init

echo "(cond-expand" >> $init
echo "   (bigloo-compile" >> $init
echo "" >> $init
cat hopscript/types_expd.sch >> $init
echo "" >> $init
cat hopscript/property_expd.sch >> $init
echo "" >> $init
cat hopscript/arithmetic.sch >> $init
echo "" >> $init
cat hopscript/array.sch >> $init
echo "" >> $init
cat hopscript/function.sch >> $init
echo "" >> $init
cat hopscript/arguments.sch >> $init
echo "" >> $init
cat hopscript/number.sch >> $init
echo "" >> $init
cat hopscript/call.sch >> $init
echo "" >> $init
cat hopscript/public_expd.sch >> $init
echo "" >> $init
cat hopscript/stringliteral_expd.sch >> $init
echo "" >> $init
cat hopscript/constants_expd.sch >> $init
echo "" >> $init
cat hopscript/names_expd.sch >> $init
echo "" >> $init
cat hopscript/expanders.sch >> $init
echo "" >> $init
echo "(hopscript-install-expanders!)" >> $init
echo "   ))" >> $init
chmod a-w $init

# lib/nodejs.init
init=lib/hop/$version/nodejs.init
mkdir -p lib
mkdir -p nodejs/o

rm -f $init 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $init

cat etc/nodejs.init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
    >> $init
echo "" >> $init
chmod a-w $init

# share/hop-autoconf.js, share/hop-boot.js
for init in hop-autoconf.js hop-boot.js; do
  rm -f share/$init 2> /dev/null
  echo "/* Automatically generated file (don't edit) */" > share/$init

  cat etc/$init.in \
    | sed -e "s|@VERSION@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@BACKEND@|$backend|" \
          -e "s|@LINK@|$link|" \
          -e "s|@URL@|$url|" \
          -e "s|@BINDIR@|$bindir|" \
          -e "s|@LIBDIR@|$libdir|" \
          -e "s|@LIBPATH@|$libdir/hop/$version|" \
          -e "s|@SHAREDIR@|$sharedir/$version|" \
          -e "s|@ETCDIR@|$etcdir|" \
          -e "s|@CONTRIBSDIR@|$contribsdir|" \
          -e "s|@DOCDIR@|$docdir|" \
          -e "s|@DOCURL@|$docurl|" \
          -e "s|@WEBLETSDIR@|$webletsdir|" \
          -e "s|@NMODULESDIR@|$nodemodulesdir|" \
          -e "s|@LOCEVENT@|$locevent|" \
          -e "s|@HOPSERVICEBASE@|$hopservicebase|" \
          -e "s|@BUILDID@|$buildid|" \
          -e "s|@BUILDTAG@|$buildtag|" \
          -e 's|//[^\"]*$||g' \
	  >> share/$init
  echo "" >> share/$init
  chmod a-w share/$init
done

# src/libraries.sch
lib=src/libraries.sch
rm -f $lib 2> /dev/null
echo ";* Automatically generated file (don't edit) */" > $lib

cat etc/libraries.sch.in \
  | sed -e "s|@VERSION@|$version|" \
        -e "s|@LIBRARIES@|$libraries|" \
	>> $lib
echo "" >> $lib
chmod a-w $lib

# man pages
for p in etc/hop.man etc/hopsh.man etc/hopreplay.man; do
  cat $p.in \
    | sed -e "s|@RELEASE@|$version|" \
          -e "s|@BRANCH@|$branch|" \
          -e "s|@DATE@|$date|" \
          -e "s|@DEVEL@|$devel|" \
          -e "s|@DEBUG@|$debug|" \
          -e "s|@BIGLOO@|$bigloo|" \
          -e "s|@HOSTBIGLOO@|$hostbigloo|" \
          -e "s|@BACKEND@|$backend|" \
          -e "s|@LINK@|$link|" \
	  > $p
done

#*---------------------------------------------------------------------*/
#*    Debian script                                                    */
#*---------------------------------------------------------------------*/
# debian
deb=arch/debian/makedeb.sh
rm -f $deb 2> /dev/null
echo "#!/bin/sh" > $deb
echo "#* Automatically generated file (don't edit) */" >> $deb

cat $deb.in \
  | sed -e "s|#!/bin/sh||" \
        -e "s|@BIGLOOREQUIRED@|$bigloorequired|" \
        -e "s|@VERSION@|$version|" \
        -e "s|@WEBLETSDIR@|$webletsdir|" \
        -e "s|@NMODULESDIR@|$nodemodulesdir|" \
        -e "s|@MINOR@|$minorversion|" \
	>> $deb  
chmod a+rx $deb
 
# homebrew
deb=arch/homebrew/makebrew.sh
rm -f $deb 2> /dev/null
echo "#!/bin/sh" > $deb
echo "#* Automatically generated file (don't edit) */" >> $deb

cat $deb.in \
  | sed -e "s|#!/bin/sh||" \
        -e "s|@BIGLOOREQUIRED@|$bigloorequired|" \
        -e "s|@VERSION@|$version|" \
        -e "s|@WEBLETSDIR@|$webletsdir|" \
        -e "s|@NMODULESDIR@|$nodemodulesdir|" \
        -e "s|@MINOR@|$minorversion|" \
	>> $deb  
chmod a+rx $deb
 
#*---------------------------------------------------------------------*/
#*    Summary                                                          */
#*---------------------------------------------------------------------*/

# Generate the config.status file to please debian packages
echo "configuration completed" >> config.status

echo "** Configuration summary **"
echo 
echo "Release:"
echo "  hop release number.................... $version$minorversion ($license)"
echo "  hop build id.......................... $buildid"
echo "  hop build tag......................... $buildtag"
echo "  bigloo................................ $bigloo ($bglversion)"
echo "  backend............................... $backend"
echo "  link.................................. $link"
echo "  devel mode............................ $devmode"
echo "  arch.................................. $arch"
echo 
echo "Optional features:"
echo "  multi-threading....................... $threads"
echo "  https support......................... $ssl"
echo "  zeroconf.............................. $zeroconfbe"

if [ "$nodoc " = "yes " ]; then
  echo "  documentation......................... no"
else
  echo "  documentation......................... yes"
fi  
echo
echo "Directories where Hop will be installed:"
echo "  etc directory......................... $etcdir"
echo "  bin directory......................... $bindir"
echo "  lib directory......................... $libdir"
echo "  share directory....................... $sharedir"
echo "  man directory......................... $mandir"
echo "  weblets directory..................... $webletsdir"
echo "  node_modules directory................ $nodemodulesdir"
echo "  contribs directory.................... $contribsdir"
echo "  doc directory......................... $docdir"
echo "  doc official url...................... $docurl"
echo 
echo "Internals:"
echo "  bigloo compilation flags.............. $bcflags"
echo "  bigloo link flags..................... $bldflags"
echo "  runtime compilation flags............. $bcflagsrts"
echo "  mime types............................ $mimetypes"
echo "  default JavaScript mime type.......... $jsmimetype"
echo "  default CSS mime type................. $cssmimetype"
echo "  closure compiler (optional)........... $closure"
echo
echo "Bootstrap compilers:"
echo "  hop................................... $hop"
echo "  hopc.................................. $hopc"

