;*=====================================================================*/
;*    .../project/hop/2.2.x/arch/android/androidemo/androidemo.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Tue Mar  2 07:33:54 2010                          */
;*    Last change :  Wed May 11 13:17:42 2011 (serrano)                */
;*    Copyright   :  2010-11 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    The Android Demonstration                                        */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module androidemo
   (library mail phone hopdroid multimedia)
   (import androidemo_config))

;*---------------------------------------------------------------------*/
;*    Phone descriptor ...                                             */
;*---------------------------------------------------------------------*/
(define android (instantiate::androidphone))
(define amusic (instantiate::androidmusic (phone android)))
(define atts (instantiate::androidtts (phone android)))

(define sos-vibrations
   (let ((dot #l200)
	 (dash #l500)
	 (short-gap #l200)
	 (medium-gap #l500)
	 (long-gap #l1000))
      `#(#l0
	 ;; S
	 ,dot ,short-gap ,dot ,short-gap ,dot
	 ,medium-gap
	 ;; O
	 ,dash ,short-gap ,dash ,short-gap ,dash
	 ,medium-gap
	 ;; S
	 ,dot ,short-gap ,dot ,short-gap ,dot
	 ,long-gap)))

;* (define contact                                                     */
;*    (string->vcard "BEGIN:VCARD                                      */
;* VERSION:2.1                                                         */
;* N:Jean;Dupont;;;                                                    */
;* FN:Jean Dupont                                                      */
;* TEL;HOME;VOICE:09 29 48 32 28                                       */
;* TEL;WORK: 01 46 32 22 22                                            */
;* EMAIL;HOME:foo@bar.org                                              */
;* ADR;HOME:;;22 Rue De La Poste;Paris;France;75001;                   */
;* URL:http://nowhere.org                                              */
;* END:VCARD"))                                                        */

;*---------------------------------------------------------------------*/
;*    server listener                                                  */
;*---------------------------------------------------------------------*/
(add-event-listener! android "sms-delivered"
   (lambda (e)
      (hop-event-broadcast! "sms-delivered" #t)))
(add-event-listener! android "sms-sent"
   (lambda (e)
      (hop-event-broadcast! "sms-sent" #t)))
(add-event-listener! android "sms-received"
   (lambda (e)
      (let ((val (event-value e)))
	 (hop-event-broadcast! "sms-received" val)
	 (tts-speak atts (cadr val)))))
(add-event-listener! android "battery"
   (lambda (e)
      (hop-event-broadcast! "battery" (event-value e))))
(add-event-listener! android "tts"
   (lambda (e)
      (hop-event-broadcast! "tts" (event-value e))))
(add-event-listener! android "call"
   (lambda (e)
      (hop-event-broadcast! "call" (event-value e))))
(add-event-listener! android "orientation"
   (lambda (e)
      (hop-event-broadcast! "orientation" (event-value e))))

;*---------------------------------------------------------------------*/
;*    androidemo ...                                                   */
;*---------------------------------------------------------------------*/
(define-service (androidemo)
   (<HTML>
      (<HEAD> :title "Hop controlled Android Phone"
	 :favicon (service-resource androidemo "etc/favicon.png")
	 :base (service-base-url androidemo (current-request))
	 :path (androidemo-dir)
	 :include "hop-gauge" "hop-audio" "hop-slider" "hop-foot"
	 :include "androidemo")
      (<ANDROIDEMO:BODY> :header "Androidemo"
	 (<DIV> :class "note"
	    "To better understand the purpose of these
demonstrations it is adviced to run them from a PC, although they can be
executed by the Web browsers running on the Android device.")

	 (<H2> "Telephony")
	 (<ANDROIDEMO:TELEPHONY>)

	 (<H2> "Hardware")
	 (<DIV> :class "short-note"
	    "This small demonstrations illustrate the ability of the server
side to use the hardware sensors and activators of the phone. Each time a
button of this web interface is clicked, the corresponding order is send
to the server to directly controls the phone.")
	 (<ANDROIDEMO:HARDWARE>)
;* 	                                                               */
;* 	 (<H2> "Contact")                                              */
;* 	 (<DIV> :class "short-note"                                    */
;* 	    "This illustrates the ability of the Hop to use the on-device */
;* contacts.")                                                         */
;* {* 	 (<ANDROIDEMO:CONTACT>)                                        *} */
;*                                                                     */
	 (<H2> "Speech")
	 (<DIV> :class "short-note"
	    "This shows the Android ability to synthesizes speech from
text for immediate playback or to create a sound file.")
	 (<ANDROIDEMO:SPEECH>)
	 
	 (<H2> "Multimedia")
	 (<DIV> :class "short-note"
	    "This shows that the server side can control the multimedia
resources of the phone. When the control buttons of the followin music player
are clicked (for instance the play button below), the corresponding order
is sent to the server that directly controls the multimedia player of the
Android phone. This demonstration does not use any HTML5 facility.")
	 (<ANDROIDEMO:MULTIMEDIA>))))

;*---------------------------------------------------------------------*/
;*    androidemo/sensors ...                                           */
;*---------------------------------------------------------------------*/
(define-service (androidemo/sensors)
   (list (cons 'orientation
	       (phone-sensor android 'orientation))
	 (cons 'magnetic
	       (phone-sensor android 'magnetic-field))
	 (cons 'accelerometer
	       (phone-sensor android 'accelerometer))
	 (cons 'temperature
	       (phone-sensor android 'temperature))
	 (cons 'light
	       (phone-sensor android 'light))
	 (cons 'pressure
	       (phone-sensor android 'pressure))
	 (cons 'proximity
	       (phone-sensor android 'proximity))))

;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:BODY> ...                                            */
;*---------------------------------------------------------------------*/
(define-xml-compound <ANDROIDEMO:BODY> ((class "androidemo")
					(header string "")
					body)
   (<BODY> :class class
      (<DIV> :align "center"
	 (<TABLE> :class "main"
	    (<TR>
	       (<TD> :class "buttons"
		  (<IMG> :class "logo" :src "etc/logo.png")
		  (<DIV> :class "version"
		     (<DIV> "Androidemo v " (androidemo-version))
		     (<DIV> (androidemo-date)))
		  (<DIV> :class "buttons"
		     (<DIV> :class "button doc"
			(<A> :title "Documentation"
			   :class "doc"
			   :href "documentation"
			   :onclick ~(set! this.href ($androidemo/documentation))
			   :target "_blank"
			   :title "androidemo documentation"
			   (<IMG> :class "doc"
			      :inline #t
			      :src (service-resource androidemo "etc/doc.png"))
			   "Help"))))
	       (<TD>
		  (<TABLE> :class "body"
		     (<TR> (<TD> :class "weblet-title"
			      (format "Androidemo - Hop Controlled Android Phone")))
		     (<TR> (<TD> :class "body" body)))))))
      (<BR>)
      (<FOOT>)))

;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:TELEPHONY> ...                                       */
;*---------------------------------------------------------------------*/
(define (<ANDROIDEMO:TELEPHONY>)
   (list
    (<DIV> :id "sms-send"
       ~(add-event-listener! "sms-sent" "server"
	   (lambda (e)
	      (innerHTML-set! "sms-status" "sent")))
       ~(add-event-listener! "sms-delivered" "server"
	   (lambda (e)
	      (innerHTML-set! "sms-status" "delivered")))
       ~(add-event-listener! "sms-received" "server"
	   (lambda (e)
	      (innerHTML-set! "sms-received-no" (car e.value))
	      (innerHTML-set! "sms-received-text" (cadr e.value))))
       ~(add-event-listener! "orientation" "server"
	   (lambda (e)
	      (let ((r (format "rotate(~adeg)" (car e.value))))
		 (node-style-set! "img-ori"
		    :MozTransform r
		    :webkitTransform r))))
       
       (<DIV>
	  (<BUTTON> :onclick ~(with-hop ($(service (no text)
					     (phone-sms-send android no text))
					  (let ((no (dom-get-element-by-id "smsno")))
					     no.value)
					  (let ((txt (dom-get-element-by-id "smstext")))
					     txt.value)))
	     "Send SMS")
	  (<INPUT> :id "smsno"))
       (<TEXTAREA> :id "smstext" "")
       (<DIV> :id "sms-status" ""))
    (<H3> "Incoming SMS")
    (<DIV> :class "short-note"
       "This demonstrates the ability to the running Hop to react to
incoming SMS. In that demonstration, when a SMS is received, the server code
intercepts that message, read it, and broadcasts it to clients
(i.e., web browsers) that display information relative to that message.")
    (<DIV> "From: " (<SPAN> :id "sms-received-no"))
    (<PRE> :id "sms-received-text" "This box will display the content of incoming SMS")
    (<H3> "Call Log")
    (<DIV> :class "short-note"
       "This shows the log of the recent calls, received, placed, and
missed.")
    (<ANDROIDEMO:CALLLOG>)
    (<H3> "Call status")
    (<DIV> :class "short-note"
       "This shows the status of the phone and call events.")
    (<ANDROIDEMO:CALLINFO>)
    (<H3> "Call")
    (<DIV> :class "short-note"
       "This shows how to place a phone call.")
    (<ANDROIDEMO:CALL>)))

;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:HARDWARE> ...                                        */
;*---------------------------------------------------------------------*/
(define (<ANDROIDEMO:HARDWARE>)
   (list
    (<BUTTON> :onclick ~(with-hop ($(service ()
				       (phone-vibrate android sos-vibrations -1))))
       "Vibrate (SOS)")
    (<ANDROIDEMO:SENSORS>)
    (<H3> "Battery")
    (<ANDROIDEMO:BATTERY>)))

;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:SENSORS> ...                                         */
;*---------------------------------------------------------------------*/
(define (<ANDROIDEMO:SENSORS>)
   (list
    ~(define active-sensors #f)
    
    (<DIV> "Sensor list:")
    
    (<PRE> (map (lambda (l)
		   (with-output-to-string
		      (lambda ()
			 (write l)
			 (newline))))
		(phone-sensor-list android)))
    
    (<BUTTON> :onclick ~(if active-sensors
			    (begin
			       (innerHTML-set! this "Activate sensors")
			       (set! active-sensors #f))
			    (let ((img (dom-get-element-by-id "img"))
				  (2PI (* 4 (atan 1))))
			       (innerHTML-set! this "Deactive sensors")
			       (set! active-sensors #t)
			       (let loop ()
				  (with-hop ($androidemo/sensors)
				     (lambda (l)
					(innerHTML-set!
					 "sensors"
					 (<TABLE> (map (lambda (r)
							  (<TR>
							     (<TD> (symbol->string (car r)))
							     (<TD> (if (pair? (cdr r))
								       (<TT> (map (lambda (v)
										     (list v " " ))
										  (cdr r)))
								       ""))))
						       l)))
					(when active-sensors
					   (after 200 loop)))))))
       "Activate sensors")
    
    (<DIV> :id "sensors")
    (<IMG> :id "img-ori"
       :src (make-file-path (hop-share-directory)
			    "icons" "hop" "hop-128x128.png"))))

;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:BATTERY> ...                                         */
;*---------------------------------------------------------------------*/
(define (<ANDROIDEMO:BATTERY>)
   (list
    ~(add-event-listener! "battery" "server"
	(lambda (e)
	   (let ((val (event-value e)))
	      (gauge-value-set! "bat-level" (car val))
	      (innerHTML-set! "bat-status" (symbol->string (caddr val)))
	      (innerHTML-set! "bat-plug" (symbol->string (cadddr val)))
	      (innerHTML-set! "bat-health" (symbol->string (cadr (cdddr val))))
	      (innerHTML-set! "bat-voltage" (caddr (cdddr val))))))
    (<TABLE> :id "battery"
       (<TR>
	  (<TH> "charge level")
	  (<TH> "status")
	  (<TH> "plug")
	  (<TH> "health")
	  (<TH> "voltage"))
       (<TR>
	  (<TD> (<GAUGE> :id "bat-level"))
	  (<TD> :id "bat-status" "")
	  (<TD> :id "bat-plug" "")
	  (<TD> :id "bat-health" "")
	  (<TD> :id "bat-voltage" "")))))

;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:CONTACT> ...                                         */
;*---------------------------------------------------------------------*/
;* (define (<ANDROIDEMO:CONTACT>)                                      */
;*                                                                     */
;*    (define (->string obj)                                           */
;*       (if (eq? obj 'nil)                                            */
;* 	  ""                                                           */
;* 	  (with-output-to-string                                       */
;* 	     (lambda () (write obj)))))                                */
;*                                                                     */
;*    (define (->list obj)                                             */
;*       (if (pair? obj)                                               */
;* 	  obj                                                          */
;* 	  '()))                                                        */
;*                                                                     */
;*    (define (<RBUTTON> id)                                           */
;*       (<BUTTON> :onclick ~(with-hop ($(service (id)                 */
;* 					 ;; remove the entry           */
;* 					 (phone-contact-remove! android id) */
;* 					 ;; request the new contact list */
;* 					 (<CONTACT> (phone-contact android))) */
;* 				      $id)                             */
;* 			     (lambda (l)                               */
;* 				(innerHTML-set! "contact-list" l)))    */
;* 	 "remove"))                                                    */
;*                                                                     */
;*    (define (<CONTACT-ENTRY> vcard)                                  */
;*       (with-access::vcard vcard (firstname                          */
;* 				 familyname org url phones             */
;* 				 addresses emails notes)               */
;* 	 (let ((row (list (<TD> firstname " " familyname)              */
;* 			  (<TD> org)                                   */
;* 			  (<TD> (map (lambda (p)                       */
;* 					(<DIV> (car p) ": " (cadr p))) */
;* 				     (->list phones)))                 */
;* 			  (<TD> (map (lambda (a)                       */
;* 					(list                          */
;* 					 (car a)                       */
;* 					 (map <DIV> (cadr a))))        */
;* 				     (->list addresses)))              */
;* 			  (<TD> (map (lambda (e) (<DIV> (<TT> e)))     */
;* 				     (->list emails)))                 */
;* 			  (<TD> (map (lambda (n)                       */
;* 					(<DIV> (<TT> (->string n))))   */
;* 				     (->list notes))))))               */
;* 	    (let ((c (assq 'android-id notes)))                        */
;* 	       (<TR> (if (pair? c)                                     */
;* 			 (cons (<TD> (<RBUTTON> (cdr c))) row)         */
;* 			 (cons (<TD>) row)))))))                       */
;*                                                                     */
;*    (define (<CONTACT> l)                                            */
;*       (<TABLE> :class "contact"                                     */
;* 	 (<TR> (<TH>)                                                  */
;* 	       (<TH> "Name")                                           */
;* 	       (<TH> "Company")                                        */
;* 	       (<TH> "Phones")                                         */
;* 	       (<TH> "Addresses")                                      */
;* 	       (<TH> "Emails")                                         */
;* 	       (<TH> "Notes"))                                         */
;* 	 (map <CONTACT-ENTRY> l)))                                     */
;*                                                                     */
;*    (<DIV> :id "contact-list"                                        */
;*       (<CONTACT> (phone-contact android))                           */
;*       (<BUTTON> :onclick ~(with-hop ($(service ()                   */
;* 					 (phone-contact-add! android contact)) */
;* 				      (lambda (l)                      */
;* 					 (innerHTML-set! "contact-list" l)))) */
;* 	 "Add entry")))                                                */

;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:CALLINFO> ...                                        */
;*---------------------------------------------------------------------*/
(define (<ANDROIDEMO:CALLINFO>)
   (list
    ~(add-event-listener! "call" "server"
	(lambda (e)
	   (let* ((el (dom-get-element-by-id "callinfo-state"))
		  (s (with-output-to-string
			(lambda () (write e.value)))))
	      (innerHTML-set! el (<PRE> s)))))
    (<TABLE> :class "callinfo"
       (map (lambda (e)
	       (<TR> (<TH> (symbol->string (car e))) (<TD> (cadr e))))
	    (phone-call-info android)))
    (<BR>)
    (<DIV> :class "short-note"
       "Call Events")
    (<DIV> :id "callinfo-state" "")))

;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:CALL> ...                                            */
;*---------------------------------------------------------------------*/
(define (<ANDROIDEMO:CALL>)
   (list
    (<TEXTAREA> :id "call-number"
       "")
    (<TEXTAREA> :id "call-speech"
       "")
    (<DIV>
       (<BUTTON> :onclick ~(let ((eln (dom-get-element-by-id "call-number"))
				 (elt(dom-get-element-by-id "call-speech")))
			      (with-hop ($(service (number text)
					     (when (and (string? text) (>fx (string-length text) 0))
						(letrec ((h (lambda (e)
							       (match-case (event-value e)
								  ((call-state offhook)
								   (remove-event-listener! android "call" h)
								   (tts-speak atts "text"))))))
						   (add-event-listener! android "call" h)
						   (phone-call-start android number))))
					  eln.value elt.value)))
	  "Place call")
       (<BUTTON> :onclick ~(with-hop ($(service ()
					  (phone-call-stop android))))
	  "End call"))))
   
;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:CALLLOG> ...                                         */
;*---------------------------------------------------------------------*/
(define (<ANDROIDEMO:CALLLOG>)
   (<TABLE> :class "calllog"
      (<TR> (<TH> "number") (<TH> "date") (<TH> "duration") (<TH> "name"))
      (map (lambda (entry)
	      (match-case entry
		 ((?type ?number ?date ?duration ?name)
		  (<TR> :class (symbol->string type)
		     (<TD> (<TT> number))
		     (<TD> (seconds->date date))
		     (<TD> duration)
		     (<TD> name)))))
	   (phone-call-log android 10))))

;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:SPEECH> ...                                          */
;*---------------------------------------------------------------------*/
(define (<ANDROIDEMO:SPEECH>)
   (list
    ~(add-event-listener! "tts" "server"
	(lambda (e)
	   (alert "tts done: " (event-value e))))
    (<TEXTAREA> :id "speech" "")
    (<DIV> "language: "
       (let ((locale (phone-current-locale android)))
	  (<SELECT> :id "language"
	     :onchange ~(with-hop ($(service (s)
				       (let ((l (call-with-input-string s read)))
					  (tts-locale-set! atts l)))
				    this.value))
	     (filter-map (lambda (l)
			    (when (memq (tts-locale-check atts l)
					'(lang-country lang-country-var))
			       (<OPTION> :label (list-ref l 3)
				  :value (with-output-to-string
					    (lambda ()
					       (write l)))
				  :selected (equal? l locale)
				  (list-ref l 3))))
			 (phone-locales android)))))
    (<TABLE> :id "speech-conf"
       (<TR>
	  (<TH> "pitch: ")
	  (<TD> (<SLIDER> :min 0.2 :max 2.0 :step 0.1 :value (tts-pitch atts)
		   :onchange ~(with-hop ($(service (v) (tts-pitch-set! atts v))
					  this.value)))))
       (<TR>
	  (<TH> "rate: ")
	  (<TD> (<SLIDER> :min 0.2 :max 2.0 :step 0.1 :value (tts-rate atts)
		   :onchange ~(with-hop ($(service (v) (tts-rate-set! atts v))
					  this.value))))))
    (<BUTTON>
       :onclick ~(let ((el (dom-get-element-by-id "speech")))
		    (with-hop ($(service (text) (tts-speak atts text)) el.value)))
       "Speak")))

;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:MULTIMEDIA> ...                                      */
;*---------------------------------------------------------------------*/
(define (<ANDROIDEMO:MULTIMEDIA>)
   (list
      (<H3> "Music database")
      (let ((mpd (instantiate::androidmpd-database
		    (phone android))))
	 (<DIV> :id "database-genre"
	    (call-with-output-string
	       (lambda (op)
		  (mpd-database-listgenre mpd op)))))
      (<H3> "Music player")
      (<AUDIO>
	 :controls #t
	 :src "http://www.m-base.org/motherland_pulse_mp3_files/motherland_pulse.mp3"
	 :browser 'none
	 :server (instantiate::audio-server
		    (music amusic)))
      (<DIV> :style "font-size: 10px; font-style: italic"
	 "Thanks to " (<A> :href "http://www.m-base.com" "Steve Coleman")
	 " for making his music freely available on-line.")))
	   
;*---------------------------------------------------------------------*/
;*    androidemo/documentation ...                                     */
;*---------------------------------------------------------------------*/
(define-service (androidemo/documentation)
   (let* ((file (service-resource androidemo/documentation "etc/androidemo.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))
