;*=====================================================================*/
;*    .../project/hop/2.2.x/arch/android/androidemo/androidemo.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Tue Mar  2 07:33:54 2010                          */
;*    Last change :  Fri Oct 15 08:50:09 2010 (serrano)                */
;*    Copyright   :  2010 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    The Android Demonstration                                        */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module androidemo
   ~(import (osm-api_server "osm-api-1.0.*.hz"))
   ~(import (osm-api_client "osm-api-1.0.*.hz"))
   (import androidemo_config)
   (library phone hopandroid))

;*---------------------------------------------------------------------*/
;*    Local configuration                                              */
;*---------------------------------------------------------------------*/
(define _dir (dirname (the-loading-file)))
(define (androidemo-dir)
   _dir)

;*---------------------------------------------------------------------*/
;*    Phone descriptor ...                                             */
;*---------------------------------------------------------------------*/
(define android (instantiate::androidphone))
(define amusic (instantiate::androidmusic (phone android)))

(define sos-vibrations
   (let ((dot #l200)
	 (dash #l500)
	 (short-gap #l200)
	 (medium-gap #l500)
	 (long-gap #l1000))
      `#(#l0
	 ;; S
	 ,dot ,short-gap ,dot ,short-gap ,dot
	 ,medium-gap
	 ;; O
	 ,dash ,short-gap ,dash ,short-gap ,dash
	 ,medium-gap
	 ;; S
	 ,dot ,short-gap ,dot ,short-gap ,dot
	 ,long-gap)))

;*---------------------------------------------------------------------*/
;*    audio-volume-magnetic-set! ...                                   */
;*---------------------------------------------------------------------*/
(define (audio-volume-magnetic-set! val)
   (let* ((v (inexact->exact (round val)))
	  (d (max 0 (-fx v 17)))
	  (vol (*fx d 10)))
      (music-volume-set! amusic (min 100 vol))))

;*---------------------------------------------------------------------*/
;*    androidemo ...                                                   */
;*---------------------------------------------------------------------*/
(define-service (androidemo)
   (<HTML>
      (<HEAD> :title "Hop controlled Android Phone"
	 :favicon (service-resource androidemo "etc/favicon.png")
	 :base (service-base-url androidemo (current-request))
	 :path (androidemo-dir)
	 :include "hop-audio" "androidemo")
      (<ANDROIDEMO:BODY> :header "Androidemo"
	 (<DIV> :class "note"
	    "To better understand the purpose of these
demonstrations it is adviced to run them from a PC, although they can be
executed by the Web browsers running on the Android device.")
	 (<H2> "Phone control")
	 (<BUTTON> :onclick ~(with-hop ($(service ()
					    (phone-vibrate android sos-vibrations))))
	    "Vibrate (SOS)")
	 (<H2> "Sensors")
	 ~(define active-sensors #f)
	 (<DIV> "Sensor list:")
	 (<PRE> (map (lambda (l)
			(with-output-to-string
			   (lambda ()
			      (write l))))
		     (phone-sensor-list android)))
	 (<BUTTON> :onclick ~(if active-sensors
				 (begin
				    (innerHTML-set! this "Activate sensors")
				    (set! active-sensors #f))
				 (let ((osm (dom-get-element-by-id "osm"))
				       (PI/2 (* 2 (atan 1))))
				    (innerHTML-set! this "Deactive sensors")
				    (set! active-sensors #t)
				    (let loop ()
				       (with-hop ($(service ()
						      (let ((mag (phone-sensor android 'magnetic-field))
							    (ori (phone-sensor android 'orientation)))
							 (when (pair? mag)
							    (audio-volume-magnetic-set! (car mag)))
							 (when (pair? ori)
							    (let ((r (format "rotate(~a)" (* PI/2 e.val))))
							       (node-style-set! osm :MozTransform r)))
							 (list (cons 'magnetic
								     mag)
							       (cons 'orientation
								     ori)
							       (cons 'temperature
								     (phone-sensor android 'temperature))
							       (cons 'light
								     (phone-sensor android 'light))
							       
							       (cons 'tricorder
								     (phone-sensor android 'tricorder))
							       (cons 'proximity
								     (phone-sensor android'proximity))))))
					  (lambda (l)
					     (innerHTML-set!
					      "sensors"
					      (<TABLE> (map (lambda (r)
							       (<TR>
								  (<TD> (symbol->string (car r)))
								  (<TD> (if (pair? (cdr r))
									    (<TT> (map (lambda (v)
											  (list v " " ))
										       (cdr r)))
									    ""))))
							    l)))
					     (when active-sensors
						(after 200 loop)))))))
	    "Activate sensors")
	 (<DIV> :id "sensors")
	 (<OSM:MAP> :id "osm"
	    :style "width: 300px; height: 300px; border: 1px solid red"
	    :latitude 43.619779 :longitude 7.049575)
	 ~(navigator.geolocation.getCurrentPosition
	   (lambda (p)
	      (add-event-listener! window "ready"
		 (lambda (e)
		    (let ((osm (dom-get-element-by-id "osm")))
		       (osm-set-center osm p.latitude p.longitude))))))
	 (<H2> "Multimedia")
	 (<AUDIO>
	    :controls #t
	    :src "http://www.m-base.org/motherland_pulse_mp3_files/motherland_pulse.mp3"
	    :browser 'none
	    :server (instantiate::audio-server
		       (music amusic)))
	 (<DIV> :style "font-size: 10px; font-style: italic"
	    "Thanks to " (<A> :href "http://www.m-base.com" "Steve Coleman")
	    " for making his music freely available on-line."))))

;*---------------------------------------------------------------------*/
;*    androidemo/proxy ...                                             */
;*---------------------------------------------------------------------*/
(define-service (androidemo/proxy src)
   (multiple-value-bind (scheme uinfo host port abspath)
      (http-url-parse src)
      (instantiate::http-response-remote
	 (host host)
	 (port port)
	 (path abspath)
	 (header `((Host: . ,host)))
	 (request (current-request)))))

;*---------------------------------------------------------------------*/
;*    <ANDROIDEMO:BODY> ...                                            */
;*---------------------------------------------------------------------*/
(define-xml-compound <ANDROIDEMO:BODY> ((class "androidemo")
					(header string "")
					body)
   (<BODY> :class class
      (<DIV> :align "center"
	 (<TABLE> :class "main"
	    (<TR>
	       (<TD> :class "buttons"
		  (<IMG> :class "logo" :src "etc/logo.png")
		  (<DIV> :class "version"
		     (<DIV> "Androidemo v " (androidemo-version))
		     (<DIV> (androidemo-date)))
		  (<DIV> :class "buttons"
		     (<DIV> :class "button doc"
			(<A> :title "Documentation"
			   :class "doc"
			   :href "documentation"
			   :onclick ~(set! this.href ($androidemo/documentation))
			   :target "_blank"
			   :title "androidemo documentation"
			   (<IMG> :class "doc"
			      :inline #t
			      :src (service-resource androidemo "etc/doc.png"))
			   "Help"))))
	       (<TD>
		  (<TABLE> :class "body"
		     (<TR> (<TD> :class "weblet-title"
			      (format "Androidemo - Hop Controlled Android Phone")))
		     (<TR> (<TD> :class "body" body)))))))
      (<FOOT>)))

;*---------------------------------------------------------------------*/
;*    androidemo/documentation ...                                     */
;*---------------------------------------------------------------------*/
(define-service (androidemo/documentation)
   (let* ((file (service-resource androidemo/documentation "etc/androidemo.wiki"))
	  (url (format "/hop/doc/weblet?weblet=~a" file)))
      (instantiate::http-response-string
	 (start-line "HTTP/1.0 301 Moved Permanently")
	 (header (list (cons 'location: url))))))
