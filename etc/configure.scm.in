;*=====================================================================*/
;*    serrano/prgm/project/hop/1.9.x/etc/configure.scm.in              */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Feb 18 17:29:47 2000                          */
;*    Last change :  Thu Jun 26 05:10:02 2008 (serrano)                */
;*    -------------------------------------------------------------    */
;*    HOP configuration                                                */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module __hop_configure
   
   (export (hop-configure ::bstring)
	   (hop-name)
           (hop-version)
           (hop-branch)
           (hop-backend)
	   (hop-url)
	   (inline hop-bin-directory)
	   (inline hop-lib-directory)
	   (inline hop-etc-directory)
	   (inline hop-share-directory)
	   (inline hop-contribs-directory)
	   (inline hop-weblets-directory)
           (inline hop-mime-types-file)
	   (inline hop-configure-javascript-mime-type)
	   (inline hop-configure-css-mime-type)
	   (inline hop-runtime-system::pair)
	   (inline hop-var-runtime-system::pair)
	   (inline hop-runtime-system-files::pair)
	   (inline hop-service-base::bstring)
	   (hop-autoconf-srfis))

   (export
    ;; will only be used in macosx-bundle mode, but due to bigloo
    ;; limitations must always be exported.
    (hop-mac-bin-directory)
    (hop-mac-lib-directory)
    (hop-mac-etc-directory)
    (hop-mac-share-directory)
    (hop-mac-weblets-directory))

   (cond-expand (macosx-bundle (export (bundle-bigloo-lib-path))))
   (cond-expand
      (macosx-bundle
       (extern
	(include "macosx_bundle.h")
	(macro resource-dir-fill!::int (::string ::int) "resourceDirFill"))))

   (eval   (export hop-name)
	   (export hop-version)
	   (export hop-branch)
	   (export hop-backend)
	   (export hop-url)
	   (export hop-etc-directory)
	   (export hop-bin-directory)
	   (export hop-lib-directory)
	   (export hop-share-directory)
	   (export hop-contribs-directory)
           (export hop-weblets-directory)
           (export hop-mime-types-file)
	   (export hop-configure-javascript-mime-type)
	   (export hop-configure-css-mime-type)
           (export hop-runtime-system)
           (export hop-var-runtime-system)
           (export hop-runtime-system-files)
	   (export hop-service-base)))

;*---------------------------------------------------------------------*/
;*    hop-configure ...                                                */
;*---------------------------------------------------------------------*/
(define (hop-configure config)
   (case (string->symbol config)
      ((--version)
       (print (hop-version)))
      ((--branch)
       (print (hop-branch)))
      ((--backend)
       (print (hop-backend)))
      ((--etcdir)
       (print (hop-etc-directory)))
      ((--bindir)
       (print (hop-bin-directory)))
      ((--libdir)
       (print (hop-lib-directory)))
      ((--sharedir)
       (print (hop-share-directory)))
      ((--contribsdir)
       (print (hop-contribs-directory)))
      ((--webletsdir)
       (print (hop-weblets-directory)))
      ((--mimetypes)
       (print (hop-mime-types-file)))
      ((--javascript-mime-type)
       (print (hop-configure-javascript-mime-type)))
      ((--css-mime-type)
       (print (hop-configure-css-mime-type)))
      ((--url)
       (print (hop-url)))
      ((--hop-runtime-system)
       (print (hop-runtime-system)))
      ((--hop-var-runtime-system)
       (print (hop-var-runtime-system)))
      ((--hop-runtime-system-files)
       (print (hop-runtime-system-files)))
      ((--hop-service-base)
       (print (hop-service-base)))
      (else
       (with-output-to-port (current-error-port)
	  (lambda ()
	     (print "usage: hop --configure [OPTION]")
	     (newline)
	     (print "Option:")
	     (print "  [--version]")
	     (print "  [--branch]")
	     (print "  [--backend]")
	     (print "  [--etcdir]")
	     (print "  [--bindir]")
	     (print "  [--libdir]")
	     (print "  [--sharedir]")
	     (print "  [--contribsdir]")
             (print "  [--webletsdir]")
             (print "  [--mimetypes]")
             (print "  [--javascript-mime-type]")
             (print "  [--css-mime-type]")
	     (print "  [--url]"))))))
	     
;*---------------------------------------------------------------------*/
;*    Name and version                                                 */
;*---------------------------------------------------------------------*/
(define (hop-name) "Hop")
(define (hop-version) "@VERSION@")
(define (hop-branch) "@BRANCH@")
(define (hop-backend) "@BACKEND@")
(define (hop-url) "@URL@")

;*---------------------------------------------------------------------*/
;*    Install directories ...                                          */
;*---------------------------------------------------------------------*/
(cond-expand
   (macosx-bundle
    (define *bundle-dir* (let* ((str (make-string 1024))
				(len (resource-dir-fill! str 1024)))
			    (when (<fx len 0)
			       (error "hop configure"
				      "could not get bundle directory"
				      #f))
			    (string-shrink! str len)
			    ;; resource directory is inside bundle directory.
			    (file-name-unix-canonicalize! (make-file-path str ".."))))
    (define (bundle-dir) *bundle-dir*)
    (define (hop-mac-bin-directory) (make-file-path (bundle-dir) "@BINDIR@"))
    (define (hop-mac-etc-directory) (make-file-path (bundle-dir) "@ETCDIR@"))
    (define (hop-mac-lib-directory) (make-file-path (bundle-dir) "@LIBDIR@"))
    (define (hop-mac-share-directory) (make-file-path (bundle-dir) "@SHAREDIR@"))
    (define (hop-mac-weblets-directory) (make-file-path (bundle-dir)
							"@WEBLETSDIR@")))
   (else
    (define (hop-mac-bin-directory) "")
    (define (hop-mac-etc-directory) "")
    (define (hop-mac-lib-directory) "")
    (define (hop-mac-share-directory) "")
    (define (hop-mac-weblets-directory) "")))

(define-inline (hop-etc-directory)
   (cond-expand (macosx-bundle (hop-mac-etc-directory)) (else "@ETCDIR@")))
(define-inline (hop-bin-directory)
   (cond-expand (macosx-bundle (hop-mac-bin-directory)) (else "@BINDIR@")))
(define-inline (hop-lib-directory)
   (cond-expand (macosx-bundle (hop-mac-lib-directory)) (else "@LIBDIR@")))
(define-inline (hop-share-directory)
   (cond-expand (macosx-bundle (hop-mac-share-directory)) (else "@SHAREDIR@")))
;; contribs-dir is absolute even in a macosx-bundle
(define-inline (hop-contribs-directory) "@CONTRIBSDIR@")
(define-inline (hop-weblets-directory)
   (cond-expand (macosx-bundle (hop-mac-weblets-directory))
		(else "@WEBLETSDIR@")))

(cond-expand
   (macosx-bundle
    (define (bundle-bigloo-lib-path)
       (make-file-path (bundle-dir) "Frameworks" "bigloo" "@BIGLOOVERSION@"))))

;*---------------------------------------------------------------------*/
;*    Misc ...                                                         */
;*---------------------------------------------------------------------*/
(define-inline (hop-mime-types-file) "@MIMETYPES@")
(define-inline (hop-configure-javascript-mime-type) "@JSMIMETYPE@")
(define-inline (hop-configure-css-mime-type) "@CSSMIMETYPE@")

;*---------------------------------------------------------------------*/
;*    hop-runtime-system ...                                           */
;*---------------------------------------------------------------------*/
(define-inline (hop-runtime-system) '(@HOPJS@))
(define-inline (hop-var-runtime-system) '("hop-setup.js")) ;; TODO remove hardcoded.
(define-inline (hop-runtime-system-files) '(@HOPJSFILES@))

;*---------------------------------------------------------------------*/
;*    hop-service-base ...                                             */
;*    -------------------------------------------------------------    */
;*    The prefix of all HOP weblets.                                   */
;*---------------------------------------------------------------------*/
(define-inline (hop-service-base) "@HOPSERVICEBASE@")



;*---------------------------------------------------------------------*/
;*    register-eval-srfis ...                                          */
;*---------------------------------------------------------------------*/
(define *hop-autoconf-srfis*
   `(@HOPSRFIS@
     ,(string->symbol (format "hop-~a" (hop-version)))
     ,(string->symbol (format "hop-~a" (hop-branch)))))

(define (hop-autoconf-srfis) *hop-autoconf-srfis*)
