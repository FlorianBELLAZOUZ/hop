;*=====================================================================*/
;*    serrano/prgm/project/hop/etc/hoprc.hop.in                        */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Mar 26 08:20:34 2006                          */
;*    Last change :  Thu Feb  1 20:00:57 2007 (serrano)                */
;*    Copyright   :  2006-07 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP runtime command file.                                        */
;*    -------------------------------------------------------------    */
;*    When HOP starts, it first search the RC files in the following   */
;*    order:                                                           */
;*      $HOME/.config/hop.$HOSTNAME/hoprc.hop                          */
;*      $HOME/.config/hop/hoprc.hop                                    */
;*      $ETC/hoprc.hop                                                 */
;*                                                                     */
;*    Hence, if users want to define their own RC file but still load  */
;*    the one from /etc, they have to add the following expression     */
;*    anywhere in their RC file:                                       */
;*                                                                     */
;*    (let ((path (make-file-name (hop-etc-directory) "hoprc.hop")))   */
;*       (when (file-exists? path) (hop-load path)))                   */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    Authentication                                                   */
;*---------------------------------------------------------------------*/
;; passwords
;; =========
;; When exists, load an HOP password file.
;; 
;; A user is declared with the ADD-USER! function, whose syntax is
;;
;;   (add-user! <USERNAME>
;;   	   :groups <list-of-symbols>
;;   	   :password <PASSWORD>
;;   	   :directories <list-of-string> | '*
;;   	   :services (list-of-symbols) | '*
;;
;;   Examples:
;;
;;   (add-user! "admin"
;;   	   :groups '(admin exec bbdb)
;;   	   :password "3a8456e439c48f324cef234a4b687cd2"
;;   	   :directories '*
;;   	   :services '*)
;;   (add-user! "guest"
;;   	   :groups '(guest)
;;   	   :password "384a653ec489344fe22c4f436a7bd82c"
;;   	   :directories (cons "/users/guest" (hop-path))
;;   	   :services '(hopcal))
;; 
;; It is required to define the "anonymous" user. An error will be raised
;; if this user is not declared when the first request is intercepted.
(add-user! "anonymous" 
           :services '(home doc password hz/list)
	   :directories (hop-path))

(when (file-exists? (make-file-name (hop-etc-directory) "passwd.hop"))
   (hop-load (make-file-name (hop-etc-directory) "passwd.hop")))

;; proxy authentication
;; ====================
;;   Set to #t for enabling proxy authentication.
;;   Enabling proxy authentication enables HOP to trace and log
;;   all proxy requests.
;(hop-proxy-authentication-set! #f)

;*---------------------------------------------------------------------*/
;*    server aliases ...                                               */
;*---------------------------------------------------------------------*/
;(hop-server-aliases-add! "<YOUR-ALIASES-HOSTNAME>")

;*---------------------------------------------------------------------*/
;*    multithreading                                                   */
;*---------------------------------------------------------------------*/
;; The number of running threads accepting connections
;(hop-max-accept-thread-set! 8)

;; The number of running threads handling answer
;(hop-max-reply-thread-set! 12)

;*---------------------------------------------------------------------*/
;*    Default HTML back-end                                            */
;*---------------------------------------------------------------------*/
;; The default back-end used for generating HTML
(hop-xml-backend-set! 'html-4.01)
;(hop-xml-backend-set! 'xhtml-1.0)

;*---------------------------------------------------------------------*/
;*    welcome message ...                                              */
;*---------------------------------------------------------------------*/
(hop-filter-add!
 (lambda (req)
    (if (and (string=? (http-request-path req) "/")
	     (not (file-exists?
		   (make-file-name (hop-rc-directory) (hop-rc-file)))))
	(http-warning [You have reached this page because you
have started Hop without any configuration file. At that stage, the only
services that you are allowed to run are:
,(<UL>
    (<LI> (<A> :href (format "http://~a:~a/hop/doc" (hostname) (hop-port))
	     "Doc")
	  ":The Hop documentation weblet.")
    (<LI> (<A> :href (format "http://~a:~a/hop/password" (hostname) (hop-port))
	     "Password")
	  ": The Hop key generation weblet."))]
		      [You should fix this at once. For that you should
generate a file named
,(<TT> :style "color: #ff881c" (make-file-path (hop-rc-directory) ".config" (hop-rc-file))) or
,(<TT> :style "color: #ff881c" (make-file-name (hop-rc-directory) (hop-rc-file))).

,(<P>) A good starting point is probably to copy and edit the file
,(<TT> :style "color: #4adc38" (make-file-name (hop-etc-directory) "hoprc.hop")).
In order to create an user account, you must use an expression such as:

,(<TT> (<PRE> [(add-user! ",(<I> [your-user-name])"
   :groups '*
   :services '*
   :password ",(<A> :href (format "http://~a:~a/hop/password" (hostname) (hop-port)) (<I> [encrypt-the-key-here]))")]))]))))

           
