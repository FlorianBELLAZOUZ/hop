;*=====================================================================*/
;*    serrano/prgm/project/hop/etc/hoprc.hop.in                        */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Mar 26 08:20:34 2006                          */
;*    Last change :  Sat Feb  3 18:42:59 2007 (serrano)                */
;*    Copyright   :  2006-07 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    HOP runtime command file.                                        */
;*    -------------------------------------------------------------    */
;*    When HOP starts, it first search the RC files in the following   */
;*    order:                                                           */
;*      $HOME/.config/hop.$HOSTNAME/hoprc.hop                          */
;*      $HOME/.config/hop/hoprc.hop                                    */
;*      $ETC/hoprc.hop                                                 */
;*                                                                     */
;*    Hence, if users want to define their own RC file but still load  */
;*    the one from /etc, they have to add the following expression     */
;*    anywhere in their RC file:                                       */
;*                                                                     */
;*    (let ((path (make-file-name (hop-etc-directory) "hoprc.hop")))   */
;*       (when (file-exists? path) (hop-load path)))                   */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    Authentication                                                   */
;*---------------------------------------------------------------------*/
;; passwords
;; =========
;; When exists, load an HOP password file.
;; 
;; A user is declared with the ADD-USER! function, whose syntax is
;;
;;   (add-user! <USERNAME>
;;   	   :groups <list-of-symbols>
;;   	   :password <PASSWORD>
;;   	   :directories <list-of-string> | '*
;;   	   :services (list-of-symbols) | '*
;;
;;   Examples:
;;
;;   (add-user! "admin"
;;   	   :groups '(admin exec bbdb)
;;   	   :password "3a8456e439c48f324cef234a4b687cd2"
;;   	   :directories '*
;;   	   :services '*)
;;   (add-user! "guest"
;;   	   :groups '(guest)
;;   	   :password "384a653ec489344fe22c4f436a7bd82c"
;;   	   :directories (cons "/users/guest" (hop-path))
;;   	   :services '(hopcal))
;; 
;; It is required to define the "anonymous" user. An error will be raised
;; if this user is not declared when the first request is intercepted.
(add-user! "anonymous" 
           :services '(home doc epassword wizard hz/list)
	   :directories (hop-path))

(when (file-exists? (make-file-name (hop-etc-directory) "passwd.hop"))
   (hop-load (make-file-name (hop-etc-directory) "passwd.hop")))

;; proxy authentication
;; ====================
;;   Set to #t for enabling proxy authentication.
;;   Enabling proxy authentication enables HOP to trace and log
;;   all proxy requests.
;(hop-proxy-authentication-set! #f)

;*---------------------------------------------------------------------*/
;*    server aliases ...                                               */
;*---------------------------------------------------------------------*/
;(hop-server-aliases-add! "<YOUR-ALIASES-HOSTNAME>")

;*---------------------------------------------------------------------*/
;*    multithreading                                                   */
;*---------------------------------------------------------------------*/
;; The number of running threads accepting connections
;(hop-max-accept-thread-set! 8)

;; The number of running threads handling answer
;(hop-max-reply-thread-set! 12)

;*---------------------------------------------------------------------*/
;*    Default HTML back-end                                            */
;*---------------------------------------------------------------------*/
;; The default back-end used for generating HTML
(hop-xml-backend-set! 'html-4.01)
;(hop-xml-backend-set! 'xhtml-1.0)

;*---------------------------------------------------------------------*/
;*    no root ...                                                      */
;*---------------------------------------------------------------------*/
(when (equal? (getenv "USER") "root")
   (error 'hop
	  "Hop is not allowed to be executed as `root',
Create a dedicated Hop user and run Hop on behalf of him.\n"
	  "If you know what you are doing and want to run Hop with the
`root' permissions, edit the Hop configuration file."))
    
;*---------------------------------------------------------------------*/
;*    welcome message ...                                              */
;*---------------------------------------------------------------------*/
;; only install the welcome message is the configuration file does not exist
(unless (file-exists? (make-file-name (hop-rc-directory) (hop-rc-file)))
   (hop-filter-add!
    (lambda (req)
       (if (and (string=? (http-request-path req) "/")
		(not (file-exists?
		      (make-file-name (hop-rc-directory) (hop-rc-file)))))
	   (http-warning [You have reached this page because you
have started Hop without any configuration file and without any user
account. At that stage, the only services that you are allowed to run are:
the Hop
,(<A> :href (format "http://~a:~a/hop/wizard" (hostname) (hop-port))
   "wizard"),
the Hop
,(<A> :href (format "http://~a:~a/hop/doc" (hostname) (hop-port))
   "documentation")
application, and the Hop passwords
,(<A> :href (format "http://~a:~a/hop/epassword" (hostname) (hop-port))
   "encryption")
weblet.

,(<P>)
You must fix that in order to be able to use Hop. New comers are
encouraged to use the Hop
,(<A> :href (format "http://~a:~a/hop/wizard" (hostname) (hop-port))
    "wizard") for creating a simple Hop configuration file.]
		      
		      [
Alternatively, for those that feel more confident, you can generate
the configuration file by hand. The Hop
,(<A> :href (format "http://~a:~a/hop/doc" (hostname) (hop-port))
"documentation") teaches how to proceed.
,(<P>)
A good starting point is probably to copy the file
,(<BR>)
,(<TT> :style "color: #4adc38"
   (make-file-name (hop-etc-directory) "hoprc.hop"))
,(<BR>)
to
,(<BR>)
,(<TT> :style "color: #ff881c"
    (make-file-path (hop-rc-directory) "hop" ".config" (hop-rc-file)))
,(<BR>)
and customize it for your own needs.])))))

