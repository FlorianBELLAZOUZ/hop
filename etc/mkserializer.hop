;*=====================================================================*/
;*    serrano/prgm/project/hop/3.0.x/etc/mkserializer.hop              */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Thu Jul 16 07:56:29 2015                          */
;*    Last change :  Tue Nov 17 14:41:51 2015 (serrano)                */
;*    Copyright   :  2015 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    A tool to produce the client-side HopScript class serializers    */
;*    -------------------------------------------------------------    */
;*    This has to be generated by Hop as the hash number of the        */
;*    classes are known only when the libs are fully built.            */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module mkserializer
   (library hop hopwidget hopscript)
   (main main))

;*---------------------------------------------------------------------*/
;*    main ...                                                         */
;*---------------------------------------------------------------------*/
(define (main argv)
   (display "\n\nvar hop_class_serializers = {\n")
   ;; JsArguments
   (printf "  ~a: { unserializer: function( a ) { return a } },\n"
      (class-hash JsArguments))
   ;; JsArray
   (printf "  ~a: { unserializer: function( a ) { return a } },\n"
      (class-hash JsArray))
   ;; JsBoolean
   (printf "  ~a: { unserializer: function( b ) { return b } },\n"
      (class-hash JsBoolean))
   ;; JsArrayBuffer
   (printf "  ~a: { unserializer: function( a ) { return a.buffer } },\n"
      (class-hash JsArrayBuffer))
   ;; JsDataView
   (printf "  ~a: { unserializer: function( a ) { return new DataView( a.buffer ) } },\n"
      (class-hash JsDataView))
   ;; JsDate
   (printf "  ~a: { unserializer: function( d ) { return d } },\n"
      (class-hash JsDate))
   ;; JsFastBuffer
   (printf "  ~a: { unserializer: function( b ) { return b } },\n"
      (class-hash JsFastBuffer))
   (printf "  ~a: { unserializer: function( a ) { return a.buffer } },\n"
      (class-hash JsSlowBuffer))
   ;; JsFloat32Array
   (printf "  ~a: { unserializer: function( a ) { return new Float32Array( a.buffer ) } },\n"
      (class-hash JsFloat32Array))
   (printf "  ~a: { unserializer: function( a ) { return new Float64Array( a.buffer ) } },\n"
      (class-hash JsFloat64Array))
   ;; JsFunction
   (printf "  ~a: { unserializer: function( a ) { return undefined } },\n"
      (class-hash JsFunction))
   ;; JsInt8Array
   (printf "  ~a: { unserializer: function( a ) { return new Int8Array( a ) } },\n"
      (class-hash JsInt8Array))
   (printf "  ~a: { unserializer: function( a ) { return new Uint8Array( a ) } },\n"
      (class-hash JsUint8Array))
   ;; JsInt16Array
   (printf "  ~a: { unserializer: function( a ) { return new Int16Array( a.buffer ) } },\n"
      (class-hash JsInt16Array))
   (printf "  ~a: { unserializer: function( a ) { return new Uint16Array( a.buffer ) } },\n"
      (class-hash JsUint16Array))
   ;; JsInt32Array
   (printf "  ~a: { unserializer: function( a ) { return new Int32Array( a.buffer ) } },\n"
      (class-hash JsInt32Array))
   (printf "  ~a: { unserializer: function( a ) { return new Uint32Array( a.buffer ) } },\n"
      (class-hash JsUint32Array))
   ;; JsNumber
   (printf "  ~a: { unserializer: function( n ) { return n } },\n"
      (class-hash JsNumber))
   ;; JsObject
   (printf "  ~a: { unserializer: hop_plist2jsobject },\n"
      (class-hash JsObject))
   ;; JsRegExp
   (printf "  ~a: { unserializer: function( r ) { return r } },\n"
      (class-hash JsRegExp))
   ;; JsString
   (printf "  ~a: { unserializer: function( s ) { return s } },\n"
      (class-hash JsString))
   ;; JsStringLiteral
   (printf "  ~a: { unserializer: function( s ) { return s } },\n"
      (class-hash JsStringLiteral))
   ;; JsHopFrame
   (printf "  ~a: { unserializer: function( u ) { console.log( 'glop' ); return new HopFrame( u ) } },\n"
      (class-hash JsHopFrame))
   (display "};\n")
   (printf "\nHopFrame.prototype.hash = ~a;\n" (class-hash JsHopFrame))
   )

;*---------------------------------------------------------------------*/
;*    run                                                              */
;*---------------------------------------------------------------------*/
(main (command-line))
