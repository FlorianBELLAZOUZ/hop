(<HTML>
   (<HEAD> :css "hop-tree.css" :jscript "hop-tree.js")
 (<BODY>
  (<H3> "a static tree")
  (<TREE> :id "tree1"
	  (<TRHEAD> "bar")
	  (<TRBODY>
	     (<TRLEAF> "bar1" :value "bar1")
	     (<TRLEAF> "bar2" :value "bar2")
	     (<TREE>
		(<TRHEAD> "gee")
		(<TRBODY>
		   (<TREE>
		      (<TRHEAD> "hux")
		      (<TRBODY>
			 (<TRLEAF> "glop1")
			 (<TRLEAF> "glop2")
			 (<TRLEAF> "glop3")
			 (<TRLEAF> "glop4")
			 (<TRLEAF> "glop5")))
		   (<TREE> :foldero "img.png"
			   :folderc "img.png"
			   (<TRHEAD> "yep")
			   (<TRBODY>
			      (<TRLEAF> "glup")
			      (<TREE>
				 (<TRHEAD> "pas glop")
				 (<TRBODY>
				    (<TRLEAF> "pas glop.1")
				    (<TRLEAF> "pas glop.2")))
			      (<TRLEAF> "glap")
			      (<TRLEAF> "glip")))
		   (<TRLEAF> "yipi")))))

  (<H3> "a dynamic tree")
  (letrec ((d (dirname (dirname (dirname (the-loading-file)))))
	   (directory->tree
	    (lambda (id dir shape)
	       (<TREE> :multiselect #t
		       :id id
		       (<TRHEAD> :value dir shape)
		       (<TRBODY>
			(<DELAY>
			 (lambda ()
			    (map (lambda (f)
				    (let ((qf (make-file-name dir f)))
				       (if (directory? qf)
					   (directory->tree (xml-make-id)
							    qf
							    (make-file-name shape f))
					   (<TRLEAF>
					    :value qf
					    (<A> :href qf f)))))
				 (directory->list dir)))))))))
     (let ((tree (directory->tree "t" d (basename d))))
	(list tree
	      (<BR>)
	      (<B> :onclick { alert("selection=" + hop_tree_selection($tree));
		              hop_tree_reset($tree) }
		   "Show selection"))))))

	
