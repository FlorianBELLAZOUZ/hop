(library-load 'calendar)

(define (<CALENDAR> dt nextm nexty prevm prevy)
   (<TABLE>
      :class "calendar"
      (<COLGROUP> 
	 (<COL> :class "day1" :width "1*")
	 (<COL> :class "day2" :width "1*")
	 (<COL> :class "day3" :width "1*")
	 (<COL> :class "day4" :width "1*")
	 (<COL> :class "day5" :width "1*")
	 (<COL> :class "day6" :width "1*")
	 (<COL> :class "day7" :width "1*"))
      (<TR> :class "browse"
	    (<TD> :colspan 7
		  (<TABLE> :class "browse"
		     (<TR>
			(<TD> :class "button1" (<DIV> "<<"
						      :title "previous year"
						      :onclick prevy))
			(<TD> :class "button2" (<DIV> "<"
						      :title "previous month"
						      :onclick prevm))
			(<TH> (<DIV> (month-name (date-month dt)) " " (date-year dt)))
			(<TD> :class "button2" (<DIV> ">"
						      :title "next month"
						      :onclick nextm))
			(<TD> :class "button1" (<DIV> ">>"
						      :title "next year"
						      :onclick nexty))))))
      (<TR> :class "head"
	    (map (lambda (d)
		    (<TH> :class "day" (substring (day-aname d) 0 2)))
		 (iota 7 1)))
      (map (lambda (row)
	      (<TR> (map (lambda (d) 
			    (let* ((dtd (date-day dt))
				   (dd (date-day d))
				   (cla (cond
					   ((not (= (date-month dt)
						    (date-month d)))
					    "outmonth")
					   ((< dtd dd) "future")
					   ((> dtd dd) "past")
					   (else "now"))))
			       (<TD> :class cla
				     (<DIV> (date-day d)))))
			 row)))
	   (calendar->list dt))))

(define (next-month dt)
   (let ((m (date-month dt))
	 (y (date-year dt)))
      (if (= m 12)
	  (make-date :year (+ y 1))
	  (make-date :month (+ m 1) :year y))))

(define (prev-month dt)
   (let ((m (date-month dt))
	 (y (date-year dt)))
      (if (= m 1)
	  (make-date :year (- y 1) :month 12)
	  (make-date :month (- m 1) :year y))))

(define (next-year dt)
   (date-copy dt :year (+fx (date-year dt) 1) :day 1))

(define (prev-year dt)
   (date-copy dt :year (-fx (date-year dt) 1) :day 1))

(<HTML>
   (<HEAD>
      (<HOP-HEAD> :css "calendar.hss"))
   (<BODY>
      (<H3> "An example of calendar")
      (<DIV>
	 :class "calendar"
	 :id "the-calendar"
	 (letrec ((rec (lambda (dt)
			  (let ((nextm {hop( $(service () (rec (next-month dt)))(),
					      hop_replace_inner_id( "the-calendar"))})
				(nexty {hop( $(service () (rec (next-year dt)))(),
					      hop_replace_inner_id( "the-calendar"))})
				(prevm {hop( $(service () (rec (prev-month dt)))(),
					      hop_replace_inner_id( "the-calendar"))}) 
				(prevy {hop( $(service () (rec (prev-year dt)))(),
					      hop_replace_inner_id( "the-calendar"))})) 
			     (<CALENDAR> dt nextm nexty prevm prevy)))))
	    (rec (current-date))))))
