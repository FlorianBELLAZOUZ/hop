;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/hopc/parseargs.scm                  */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Nov 12 13:32:52 2004                          */
;*    Copyright   :  2004-23 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Hop command line parsing                                         */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module hopc_parseargs

   (library hop js2scheme)
   
   (import  hopc_param
	    hopc_driver
	    hopc_libdir)
   
   (export  (parse-args ::pair-nil)))

;*---------------------------------------------------------------------*/
;*    ecmascript-support ...                                           */
;*---------------------------------------------------------------------*/
(define ecmascript-es6
   '(es6-let: es6-const: es6-arrow-function: es6-default-value:
     es6-rest-argument: es6-module-client:))

(define ecmascript-es2017
   (append ecmascript-es6 '(es2017-async:)))
      
;*---------------------------------------------------------------------*/
;*    usage ...                                                        */
;*---------------------------------------------------------------------*/
(define (usage args-parse-usage)
   (print "Hopc v" (hop-version))
   (print "usage: hopc [options] -- [bigloo-options]")
   (args-parse-usage #f)
   (newline)
   (print "Shell Variables:")
   (print "   - HOPHZREPOSITORY: repository of hz files")
   (print "   - HOPTRACE: hop internal trace [HOPTRACE=\"key1, key2, ...\"]")
   (print "      j2s:stage, j2s:type, j2s:type+, j2s:hint, j2s:range, j2s:usage, j2s:key,")
   (print "      j2s:loc, j2s:cache, j2s:dump, j2s:info, j2s:size, j2s:tail")
   (print "      j2s:profid, nodejs:compile,")
   (print "      hopscript:cache[num] (*), hopscript:uncache,")
   (print "      hopscript:alloc[num], hopscript:call, hopscript:hint[num] (*)")
   (print "      hopscript:function[num] hopscript:symtable hopscript:pmap")
   (print "      hopscript:fprofile (alias of \"hopscript:cache hopscript:call format:fprofile\")")
   (print "      format:json, format:fprofile, format:memviz, srcfile=path, logfile=path")
   (print "   - HOPCFLAGS: hopc compilation flags")
   (print " (*) Need both compile and runtime variable and need to be compiled")
   (print " in profile mode: --profile")
   (newline))

;*---------------------------------------------------------------------*/
;*    parse-args ...                                                   */
;*---------------------------------------------------------------------*/
(define (parse-args args)
   (let ((rc-file #unspecified)
	 (loadp #t)
	 (exprs '())
	 (h "localhost")
	 (p (hop-port))
	 (login #f)
	 (command-string #f)
	 (ecmascriptv 2017)
	 (source-map #t)
	 (lib-dir (make-file-path (hop-lib-directory) "hop" (hop-version)))
	 (configs '())
	 (commonjs-export #t))
      (bind-exit (stop)
	 (args-parse (cdr args)
	    ((("-h" "--help") (help "This message"))
	     (usage args-parse-usage)
	     (exit 0))
	    (("--version" (help "Print the version and exit"))
	     (print (hop-name)"c-" (hop-version))
	     (exit 0))
	    (("--buildtag" (help "Print the buildtag and exit"))
	     (print (hop-build-tag))
	     (exit 0))
	    (("-q" (help "Do not load an init file"))
	     (set! loadp #f))
	    (("--rc-file" ?file (help "Load alternate rc file"))
	     (set! rc-file file))
	    (("--rc-dir" ?dir (help "Set rc directory"))
	     (hop-rc-directory-set! dir))
	    (("--lib-dir=?dir" (help "Set hop lib-dir"))
	     (set! lib-dir dir))
	    (("-L" ?dir (help "Add Hop library path"))
	     (bigloo-library-path-set! (cons dir (bigloo-library-path))))
	    (("--share-dir" ?dir (help "Set hopc share directory"))
	     (hopc-share-directory-set! dir))
	    (("-v?level" (help "Increase/set verbosity level (-v0 crystal silence)"))
	     (if (string=? level "")
		 (if (=fx (hop-verbose) 0)
		     (hop-verbose-set! 2)
		     (hop-verbose-set! (+fx 1 (hop-verbose))))
		 (hop-verbose-set! (+fx 1 (string->integer level)))))
	    (("-O?level" (help "Optimization level"))
	     (cond
		((string=? level "")
		 (hopc-optim-level-set! 1))
		((string=? level "x")
		 (hopc-optim-level-set! 1000)
		 (hopc-j2s-flags-set! (cons* :optim-ccall #t (hopc-j2s-flags))))
		((string=? level "s")
		 (hopc-optim-level-set! 2)
		 (hopc-j2s-flags-set! (cons* :optim-size 1 (hopc-j2s-flags))))
		((string=? level "2s")
		 (hopc-optim-level-set! 2)
		 (hopc-j2s-flags-set! (cons* :optim-size 2 (hopc-j2s-flags))))
		(else
		 (hopc-optim-level-set! (string->integer level))))
	     (hopc-bigloo-options-set!
		(cons (format "-O~a" (min (hopc-optim-level) 6))
		   (hopc-bigloo-options))))
	    (("-g?level" (help "Increase or set debug level"))
	     (when source-map
		(hopc-clientc-source-map-set! #t))
	     (hopc-clientc-arity-check-set! #t)
	     (hopc-clientc-type-check-set! #t)
	     (bigloo-warning-set! (string->integer level))
	     (if (string=? level "")
		 (bigloo-debug-set! (+fx 1 (bigloo-debug)))
		 (bigloo-debug-set! (string->integer level)))
	     (cond-expand
		((library libbacktrace)
		 (hopc-bigloo-options-set!
		    (append '("-library" "libbacktrace" "-glines" "-fno-user-inlining")
		       (hopc-bigloo-options))))
		(else
		 (hopc-bigloo-options-set!
		    (cons (format "-g~a" level)
		       (hopc-bigloo-options))))))
	    (("-cg" (help "C debug compilation"))
	     (hopc-bigloo-options-set! (cons "-cg" (hopc-bigloo-options))))
	    (("-w?level" (help "Increase or set warning level (-w0 no warning)"))
	     (if (string=? level "")
		 (bigloo-warning-set! (+fx 1 (bigloo-warning)))
		 (bigloo-warning-set! (string->integer level))))
	    (("--source-mapping-url" ?file (help "Read source-map file for JS compilation"))
	     (j2s-compile-options-set!
		(cons* :source-mapping-url file (j2s-compile-options))))
	    (("--no-color" (help "Disable colored traces"))
	     (bigloo-trace-color-set! #f))
	    (("--eval" ?string (help "Evaluate STRING"))
	     (set! exprs (cons string exprs)))
	    (("-o" ?string (help "Name the output FILE"))
	     (hopc-destination-set! string))
	    (("-t" ?string (help "Name the temporary FILE"))
	     (hopc-temp-set! string))
	    (("-s" (help "Stop after Bigloo code generation"))
	     (hopc-pass-set! 'bigloo))
	    (("-n" (help "Stop after .ast.json generation"))
	     (hopc-pass-set! 'ast.json))
	    (("-c" (help "Stop after code object generation"))
	     (hopc-pass-set! 'object)
	     (hopc-bigloo-options-set!
		(append (hopc-bigloo-options) (list "-c"))))
	    (("-y" (help "Generate a shared library"))
	     (hopc-js-module-main-set! #f)
	     (hopc-pass-set! 'so))
	    ((("-j" "--client-js") (help "Generate a client-side JavaScript file"))
	     (hopc-pass-set! 'client-js))
	    (("--ast" ?ast (help "The source is an abstract syntax tree"))
	     (hopc-source-ast-set! ast))
	    (("--ast-file" ?ast (help "The source is an abstract syntax tree in a file"))
	     (hopc-source-ast-file-set! ast))
	    (section "Configuration and devkit")
	    (("--safe" (help "Compile and link in safe mode"))
	     (hopc-bigloo-safe-option-set! '("-unsafe" "-safel")))
	    (("--safe-debug" (help "Compile and link in safe mode"))
	     (hopc-bigloo-safe-option-set! '("-safe")))
	    (("--unsafe" (help "Compile and link in safe mode"))
	     (hopc-bigloo-safe-option-set! '("-unsafe")))
	    (("--bigloo=?bigloo" (help "Set the Bigloo binary file path"))
	     (hopc-bigloo-set! bigloo))
	    (("--bigloo-lib-dir=?dir" (help "Set the Bigloo library path"))
	     (bigloo-override-config! dir)
	     (hopc-bigloo-options-set!
		(cons* "-lib-dir" dir (hopc-bigloo-options))))
	    (("--hop-lib-dir=?dir" (help "Set the Hop library path (for bootstrapping)"))
	     (hopc-hop-lib-dir-set! dir))
	    (("--reset-bigloo-options" (help "Reset all Bigloo options"))
	     (hopc-bigloo-options-set! '()))
	    ((("-a" "--afile") ?file (help "Set access file"))
	     (hopc-access-file-set! file))
	    (("--mkheap" (help "Build a js heap file"))
	     (hopc-jsheap-set! #t))
	    (("--configure" ?config (help "Report hopc configuration"))
	     (set! configs (cons config configs)))
	    (section "Code generation")
	    (("-m32" (help "Generate 32-bit code"))
	     (hopc-long-size-set! 32))
	    (("-m64" (help "Generate 64-bit code"))
	     (hopc-long-size-set! 64))
	    (("--source-map" (help "Enable source-map table generation"))
	     (hopc-clientc-source-map-set! #t))
	    (("--no-source-map" (help "Disable source-map table generation"))
	     (set! source-map #f)
	     (hopc-clientc-source-map-set! #f))
	    (("--use-strict" (help "Enable use-strict annotation"))
	     (hopc-clientc-use-strict-set! #t))
	    (("--no-use-strict" (help "Disable use-strict annotation"))
	     (hopc-clientc-use-strict-set! #f))
	    (("--arity-check" (help "Enable arity-check annotation"))
	     (hopc-clientc-arity-check-set! #t))
	    (("--no-arity-check" (help "Disable arity-check annotation"))
	     (hopc-clientc-arity-check-set! #f))
	    (("--type-check" (help "Enable type-check annotation"))
	     (hopc-clientc-type-check-set! #t))
	    (("--no-type-check" (help "Disable type-check annotation"))
	     (hopc-clientc-type-check-set! #f))
	    (("--meta" (help "Enable meta annotation"))
	     (hopc-clientc-meta-set! #t))
	    (("--no-meta" (help "Disable meta annotation"))
	     (hopc-clientc-type-check-set! #f))
	    ((("-l" "--language") ?lang (help "Set the source language (\"auto\", \"hop\", or \"hopscript\")"))
	     (unless (member lang '("hop" "hopscript"))
		(error "hopc" "Unknown language, see --help" lang))
	     (hopc-source-language-set! (string->symbol lang)))
	    (("--bootstrap-mode" (help "Bootstrap mode (no library preload"))
	     (hopc-bootstrap-mode-set! #t))
	    (("--sofile-dir" ?DIR (help "Generate sofile-dir directive (main only)"))
	     (hopc-sofile-dir-set! DIR))
	    (("--sobase" ?DIR (help "Set the base directory for shared libs (default (pwd))"))
	     (hopc-sobase-set! DIR))
	    (section "JavaScript dialect and features")
	    (("--js-node-modules-dir" ?dir
		(help (format "Set default node_modules dir [~a]"
			 (hopc-node-modules-directory))))
	     (hopc-node-modules-directory-set! dir))
	    (("--js-worker" (help "Enable JavaScript workers"))
	     (hopc-js-worker-set! #t))
	    (("--js-no-worker" (help "Disable JavaScript workers"))
	     (hopc-js-worker-set! #f))
	    (("--js-worker-slave" (help "Compile a worker slave code"))
	     (hopc-js-worker-slave-set! #t))
	    (("--js-no-worker-slave" (help "Compile a worker master code"))
	     (hopc-js-worker-slave-set! #f))
	    (("--js-module-name" ?name (help "Set Bigloo module name"))
	     (hopc-js-module-name-set! name))
	    (("--js-module-path" ?path (help "Set Bigloo module path"))
	     (hopc-js-module-path-set! path))
	    (("--js-module-main" (help "Force generate a main clause"))
	     (hopc-js-module-main-set! #t))
	    (("--js-no-module-main" (help "Force not generate a main clause"))
	     (hopc-js-module-main-set! #f))
	    (("--js-no-header" (help "Don't generate hopscript header"))
	     (hopc-js-header-set! #f))
	    (("--js-ignore-unresolved-modules" (help "Ignore unresolved modules"))
	     (hopc-j2s-flags-set!
		(cons* :ignore-unresolved-modules #t (hopc-j2s-flags))))
	    (("--js-header" (help "Generate hopscript header"))
	     (hopc-js-header-set! #t))
	    (("--js-require-hop" (help "Force an explicit hop require"))
	     (hopc-j2s-flags-set! (cons* :hop-require #t (hopc-j2s-flags))))
	    (("--js-return-as-exit" (help "Consider top level returns as exit"))
	     (hopc-js-return-as-exit-set! #t))
	    (("--js-no-return-as-exit" (help "Consider top level returns as error"))
	     (hopc-js-return-as-exit-set! #f))
	    (("--js-type-annotations" (help "Enable type annotations"))
	     (hopc-js-type-annotations-set! #t))
	    (("--js-no-type-annotations" (help "Disable type annotations"))
	     (hopc-js-type-annotations-set! #f))
	    (("--js-driver" ?driver (help "Set j2s compiler driver"))
	     (hopc-js-driver-set! driver))
	    (("--js-show-driver" (help "Set j2s compiler driver"))
	     (print (js-driver->string))
	     (exit 0))
	    (("--js-drivers-list" (help "Show j2s builtin compiler drivers"))
	     (for-each print (js-drivers-list))
	     (exit 0))
	    (("--js-target-es5" (help "Generate a client-side JavaScript 1.5 file"))
	     (hopc-js-target-set! 'es5)
	     (j2s-compile-options-set!
		(cons* :target 'es5 (j2s-compile-options)))
	     (hopc-pass-set! 'client-js))
	    (("--js-es5" (help "Enable all EcmaScript 5 support"))
	     (set! ecmascriptv 5))
	    (("--js-es6" (help "Enable all EcmaScript 6 support"))
	     (set! ecmascriptv 6))
	    (("--js-es2017" (help "Enable all EcmaScript 2017 support (default)"))
	     (set! ecmascriptv 2017))
	    (("--js-commonjs-export" (help "Automatic commonjs modules export"))
	     (set! commonjs-export #t))
	    (("--js-no-commonjs-export" (help "Automatic commonjs modules export"))
	     (set! commonjs-export #f))
	    (("--js-sealed-decorator" (help "Enable record decorator"))
	     (j2s-compile-options-set!
		(cons* :sealed-decorator #t (j2s-compile-options))))
	    (("--js-no-sealed-decorator" (help "Disable record decorator"))
	     (j2s-compile-options-set!
		(cons* :sealed-decorator #f (j2s-compile-options))))
	    (("--js-option" ?opt ?val (help "Add JavaScript compilation option"))
	     (j2s-compile-options-set!
		(cons* (string->keyword opt)
		   (cond
		      ((or (string=? val "true") (string=? val "#t")) #t)
		      ((or (string=? val "false") (string=? val "#f")) #f)
		      ((string->number val) => (lambda (val) val))
		      (else val))
		   (j2s-compile-options))))
	    (("--js-config" ?conf (help "Use JavaScript compilation config"))
	     (j2s-compile-options-set!
		(append (call-with-input-string conf read)
		   (j2s-compile-options))))
	    (("--js-plugins" (help "Enables JavaScript plugins"))
	     (hopc-j2s-plugins-set! #t))
	    (("--js-no-plugins" (help "Disables JavaScript plugins"))
	     (hopc-j2s-plugins-set! #f))
	    (("--js-preprocessor" ?pp (help "Enables JavaScript preprocessor"))
	     (hopc-j2s-preprocessor-set! pp))
	    
	    (section "Optimization")
	    (("-ftyflow" (help "Enable tyflow typing (-O)"))
	     (hopc-j2s-flags-set! (cons* :optim-tyflow #t (hopc-j2s-flags))))
	    (("-fno-tyflow" (help "Disable tyflow typing"))
	     (hopc-j2s-flags-set! (cons* :optim-tyflow #f (hopc-j2s-flags))))
	    (("-ftyflow-resolve" (help "Enable tyflow-resolve typing (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-tyflow-resolve #t (hopc-j2s-flags))))
	    (("-fno-tyflow-resolve" (help "Disable tyflow-resolve typing"))
	     (hopc-j2s-flags-set! (cons* :optim-tyflow-resolve #f (hopc-j2s-flags))))
	    (("-fccall" (help "Enable call caches (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-ccall #t (hopc-j2s-flags))))
	    (("-fno-ccall" (help "Disable call caches"))
	     (hopc-j2s-flags-set! (cons* :optim-ccall #f (hopc-j2s-flags))))
	    (("-fhint" (help "Enable hint typing (-O3)"))
	     (hopc-j2s-flags-set! (cons* :optim-hint #t (hopc-j2s-flags))))
	    (("-fno-hint" (help "Disable hint typing"))
	     (hopc-j2s-flags-set! (cons* :optim-hint #f (hopc-j2s-flags))))
	    (("-floop-spec" (help "Enable loop specialization (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-loopspec #t (hopc-j2s-flags))))
	    (("-fno-loop-spec" (help "Disable loop specialization"))
	     (hopc-j2s-flags-set! (cons* :optim-loopspec #f (hopc-j2s-flags))))
	    (("-floop-cnst" (help "Enable loop constant lifting (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-loopcnst #t (hopc-j2s-flags))))
	    (("-fno-loop-cnst" (help "Disable loop constant lifting"))
	     (hopc-j2s-flags-set! (cons* :optim-loopcnst #f (hopc-j2s-flags))))
	    (("-fhintfun" (help "Enable function hint typing (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-hintfun #t (hopc-j2s-flags))))
	    (("-fno-hintfun" (help "Disable hintfun typing"))
	     (hopc-j2s-flags-set! (cons* :optim-hintfun #f (hopc-j2s-flags))))
	    (("-fhintnum" (help "Enable hintnum typing (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-hintnum #t (hopc-j2s-flags))))
	    (("-fno-hintnum" (help "Disable hintnum typing"))
	     (hopc-j2s-flags-set! (cons* :optim-hintnum #f (hopc-j2s-flags))))
	    (("-fhintblock" (help "Enable hintblock typing (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-hintblock #t (hopc-j2s-flags))))
	    (("-fno-hintblock" (help "Disable hintblock typing"))
	     (hopc-j2s-flags-set! (cons* :optim-hintblock #f (hopc-j2s-flags))))
	    (("-fmultivar" (help "Enable multivar split"))
	     (hopc-j2s-flags-set! (cons* :optim-multivar #t (hopc-j2s-flags))))
	    (("-fno-multivar" (help "Disable multivar split"))
	     (hopc-j2s-flags-set! (cons* :optim-multivar #f (hopc-j2s-flags))))
	    (("-frange" (help "Enable range optimization (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-range #t (hopc-j2s-flags))))
	    (("-fno-range" (help "Disable range optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-range #f (hopc-j2s-flags))))
	    (("-finteger" (help "Enable integer optimization (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-integer #t (hopc-j2s-flags))))
	    (("-fno-integer" (help "Disable integer optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-integer #f (hopc-j2s-flags))))
	    (("-finlining" (help "Enable function inlining (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-inline #t (hopc-j2s-flags))))
	    (("-fno-inlining" (help "Disable function inlining"))
	     (hopc-j2s-flags-set! (cons* :optim-inline #f (hopc-j2s-flags))))
	    (("-funinit" (help "Enable function uninit (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-uninit #t (hopc-j2s-flags))))
	    (("-fno-uninit" (help "Disable function uninit"))
	     (hopc-j2s-flags-set! (cons* :optim-uninit #f (hopc-j2s-flags))))
	    (("-fvarpreinit" (help "Enable function varpreinit (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-varpreinit #t (hopc-j2s-flags))))
	    (("-fno-varpreinit" (help "Disable function varpreinit"))
	     (hopc-j2s-flags-set! (cons* :optim-varpreinit #f (hopc-j2s-flags))))
	    (("-ftopfun" (help "Enable top-level function reordering (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-topfun #t (hopc-j2s-flags))))
	    (("-fno-topfun" (help "Disable top-level function reordering (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-topfun #f (hopc-j2s-flags))))
	    (("-finlining-method" (help "Enable method inlining (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-inline-method #t (hopc-j2s-flags))))
	    (("-fno-inlining-method" (help "Disable method inlining"))
	     (hopc-j2s-flags-set! (cons* :optim-inline-method #f (hopc-j2s-flags))))
	    (("-fshared-pcache" (help "Share pcaches (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :shared-pcache #t (hopc-j2s-flags))))
	    (("-fno-shared-pcache" (help "Disable share pcaches"))
	     (hopc-j2s-flags-set! (cons* :shared-pcache #f (hopc-j2s-flags))))
	    (("-fthis" (help "Enable fast this access"))
	     (hopc-j2s-flags-set! (cons* :optim-this #t (hopc-j2s-flags))))
	    (("-fno-this" (help "Enable fast this access"))
	     (hopc-j2s-flags-set! (cons* :optim-this #f (hopc-j2s-flags))))
	    (("-fctor" (help "Enable fast constructor init sequences (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-ctor #t (hopc-j2s-flags))))
	    (("-fno-ctor" (help "Disable fast constructor init sequences"))
	     (hopc-j2s-flags-set! (cons* :optim-ctor #f (hopc-j2s-flags))))
	    (("-farguments" (help "Enable arguments optimization (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-arguments #t (hopc-j2s-flags))))
	    (("-fno-arguments" (help "Disable arguments optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-arguments #f (hopc-j2s-flags))))
	    (("-fstack-alloc" (help "Enable stack-alloc optimization (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-stack-alloc #t (hopc-j2s-flags))))
	    (("-fno-stack-alloc" (help "Disable stack-alloc optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-stack-alloc #f (hopc-j2s-flags))))
	    (("-fprocedure" (help "Enable procedure optimization (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-procedure #t (hopc-j2s-flags))))
	    (("-fno-procedure" (help "Disable procedure optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-procedure #f (hopc-j2s-flags))))
	    (("-fcce" (help "Enable common inline caching (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-cce #t (hopc-j2s-flags))))
	    (("-fno-cce" (help "Disable common inline caching"))
	     (hopc-j2s-flags-set! (cons* :optim-cce #f (hopc-j2s-flags))))
	    (("-fsweep" (help "Enable sweep cleanup (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-sweep #t (hopc-j2s-flags))))
	    (("-fno-sweep" (help "Disable sweep cleanup"))
	     (hopc-j2s-flags-set! (cons* :optim-sweep #f (hopc-j2s-flags))))
	    (("-fpce" (help "Enable property cache elimination (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-pce #t (hopc-j2s-flags))))
	    (("-fno-pce" (help "Disable property cache elimination"))
	     (hopc-j2s-flags-set! (cons* :optim-pce #f (hopc-j2s-flags))))
	    (("-fpropcache" (help "Enable property cache elimination (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-propcache #t (hopc-j2s-flags))))
	    (("-fno-propcache" (help "Disable property cache elimination"))
	     (hopc-j2s-flags-set! (cons* :optim-propcache #f (hopc-j2s-flags))))
	    (("-funletrec" (help "Enable unletrec optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-unletrec #t (hopc-j2s-flags))))
	    (("-fno-unletrec" (help "Disable unletrec optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-unletrec #f (hopc-j2s-flags))))
	    (("-fletopt" (help "Enable letopt optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-letopt #t (hopc-j2s-flags))))
	    (("-fno-letopt" (help "Disable letopt optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-letopt #f (hopc-j2s-flags))))
	    (("-fletfun" (help "Enable letfun optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-letfun #t (hopc-j2s-flags))))
	    (("-fno-letfun" (help "Disable letfun optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-letfun #f (hopc-j2s-flags))))
	    (("-fletclass" (help "Enable letclass optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-letclass #t (hopc-j2s-flags))))
	    (("-fno-letclass" (help "Disable letclass optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-letclass #f (hopc-j2s-flags))))
	    (("-fvar2let" (help "Enable var2let optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-var2let #t (hopc-j2s-flags))))
	    (("-fno-var2let" (help "Disable var2let optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-var2let #f (hopc-j2s-flags))))
	    (("-fglobprop" (help "Enable globprop optimization (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-globprop #t (hopc-j2s-flags))))
	    (("-fno-globprop" (help "Disable globprop optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-globprop #f (hopc-j2s-flags))))
	    (("-fcse" (help "Enable cse optimization (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-cse #t (hopc-j2s-flags))))
	    (("-fno-cse" (help "Disable cse optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-cse #f (hopc-j2s-flags))))
	    (("-fglobvar" (help "Enable globvar optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-globvar #t (hopc-j2s-flags))))
	    (("-fno-globvar" (help "Disable globvar optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-globvar #f (hopc-j2s-flags))))
	    (("-fcnstlift" (help "Enable constant lifting optimization (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-cnstlift #t (hopc-j2s-flags))))
	    (("-fno-cnstlift" (help "Disable constant lifting optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-cnstlift #f (hopc-j2s-flags))))
	    (("-fstrbuffer" (help "Enable string-buffer optimization (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-strbuffer #t (hopc-j2s-flags))))
	    (("-fno-strbuffer" (help "Disable string-buffer optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-strbuffer #f (hopc-j2s-flags))))
	    (("-fcspecs" (help "Enable property cache level optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-cspecs #t (hopc-j2s-flags))))
	    (("-fno-cspecs" (help "Disable property cache level optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-cspecs #f (hopc-j2s-flags))))
	    (("-fcallapply" (help "Enable CALL/APPLY optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-callapply #t (hopc-j2s-flags))))
	    (("-fno-callapply" (help "Disable CALL/APPLY optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-callapply #f (hopc-j2s-flags))))
	    (("-frecstatic" (help "Enable record static methods optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-recstatic #t (hopc-j2s-flags))))
	    (("-fno-recstatic" (help "Disable record static methods optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-recstatic #f (hopc-j2s-flags))))
	    (("-fliterals" (help "Enable literals optimization (-O3)"))
	     (hopc-j2s-flags-set! (cons* :optim-literals #t (hopc-j2s-flags))))
	    (("-fno-literals" (help "Disable literals optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-literals #f (hopc-j2s-flags))))
	    (("-fcache-instanceof" (help "Enable instanceof caching (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-cinstanceof #t (hopc-j2s-flags))))
	    (("-fno-cache-instanceof" (help "Enable instanceof caching"))
	     (hopc-j2s-flags-set! (cons* :optim-cinstanceof #f (hopc-j2s-flags))))
	    (("-fcps-closure-alloc" (help "Enable cps closure optimization (-O3)"))
	     (hopc-j2s-flags-set! (cons* :optim-cps-closure-alloc #t (hopc-j2s-flags))))
	    (("-fno-cps-closure-alloc" (help "Disable cps closure optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-cps-closure-alloc #f (hopc-j2s-flags))))
	    (("-fvector" (help "Enable array-to-vector optimization (-O3)"))
	     (hopc-j2s-flags-set! (cons* :optim-vector #t (hopc-j2s-flags))))
	    (("-fno-vector" (help "Disable array-to-vector optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-vector #f (hopc-j2s-flags))))
	    (("-funthis" (help "Enable this removal optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-unthis #t (hopc-j2s-flags))))
	    (("-fno-unthis" (help "Disable this removal optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-unthis #f (hopc-j2s-flags))))
	    (("-fmethod" (help "Enable method optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-method #t (hopc-j2s-flags))))
	    (("-fno-method" (help "Disable method optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-method #f (hopc-j2s-flags))))
	    (("-ftestreduce" (help "Enable test reduction optimization (-O2)"))
	     (hopc-j2s-flags-set! (cons* :optim-testreduce #t (hopc-j2s-flags))))
	    (("-fno-testreduce" (help "Disable test reduction optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-testreduce #f (hopc-j2s-flags))))
	    (("-fproxy" (help "Enable proxy optimization (-Ox)"))
	     (hopc-j2s-flags-set! (cons* :optim-proxy #t (hopc-j2s-flags))))
	    (("-fno-proxy" (help "Disable proxy optimization"))
	     (hopc-j2s-flags-set! (cons* :optim-proxy #f (hopc-j2s-flags))))
	    (section "Profiling")
	    (("-fprofile" ?log (help "Profile log file optimization"))
	     (hopc-j2s-flags-set! (cons* :profile-log log (hopc-j2s-flags)))
	     (hopc-j2s-flags-set! (cons* :optim-cspecs #t (hopc-j2s-flags))))
	    (("--profile" (help "Profiling mode (see HOPTRACE)"))
	     (hopc-bigloo-profile-options-set! '("-srfi" "profile"))
	     (hopc-j2s-flags-set! (cons* :profile #t (hopc-j2s-flags))))
	    (("--profile-cache" (help "Cache profiling mode (see HOPTRACE)"))
	     (hopc-bigloo-profile-options-set! '("-srfi" "profile"))
	     (hopc-j2s-flags-set! (cons* :profile-cache #t (hopc-j2s-flags))))
	    (("--profile-location" (help "Location profiling mode"))
	     (hopc-j2s-flags-set! (cons* :profile-location #t (hopc-j2s-flags))))
	    (("--profile-hint" (help "Hint profiling mode (see HOPTRACE)"))
	     (hopc-j2s-flags-set! (cons* :profile-hint #t (hopc-j2s-flags))))
	    (("--profile-call" (help "Call profiling mode (see HOPTRACE)"))
	     (hopc-j2s-flags-set! (cons* :profile-call #t (hopc-j2s-flags))))
	    (("--profile-method" (help "Method profiling mode (see HOPTRACE)"))
	     (hopc-j2s-flags-set! (cons* :profile-method #t (hopc-j2s-flags))))
	    (("--profile-alloc" (help "Alloc profiling mode (see HOPTRACE)"))
	     (hopc-bigloo-profile-options-set! '("-srfi" "profile"))
	     (hopc-j2s-flags-set! (cons* :profile-alloc #t (hopc-j2s-flags))))
	    (("--profile-symbols" (help "Profile with a symbol table"))
	     (hopc-j2s-flags-set! (cons* :profile-symbols #t (hopc-j2s-flags))))
	    (("--profile-mem?level" (help "Memory profiling mode [23] (see bmem)"))
	     (hopc-j2s-flags-set! (cons* :profile-mem level (hopc-j2s-flags)))
	     (cond
		((string=? level "")
		 (hopc-bigloo-profile-options-set! '("-pmem" "-glines" "-copt" "-g")))
		((string=? level "2")
		 (hopc-bigloo-profile-options-set! '("-pmem2" "-glines" "-copt" "-g")))
		((string=? level "3")
		 (hopc-bigloo-profile-options-set! '("-pmem3" "-glines" "-copt" "-g")))
		(else
		 (error "hopc" "Illegal option"
		    (string-append "--profile-mem" level)))))
	    (section "Dummy option for Hop command line similarity")
	    (("--no-server" (help "Hop compatibility, ignored"))
	     #unspecified)
	    (("-p" ?port (help "Hop compatibility, ignored"))
	     #unspecified)
	    (section "Experimental features")
	    (("--js-cspecs" ?cspecs (help "force default cache specs"))
	     (call-with-input-string cspecs
		(lambda (ip)
		   (hopc-j2s-flags-set!
		      (cons* :cspecs (read ip) (hopc-j2s-flags))))))
	    (("--js-cspecs-get" ?cspecs (help "Use get specs"))
	     (call-with-input-string cspecs
		(lambda (ip)
		   (hopc-j2s-flags-set!
		      (cons* :cspecs-get
			 (check-cspecs "--js-cspecs-get" (read ip))
			 (hopc-j2s-flags))))))
	    (("--js-cspecs-put" ?cspecs (help "Use put specs"))
	     (call-with-input-string cspecs
		(lambda (ip)
		   (hopc-j2s-flags-set!
		      (cons* :cspecs-put
			 (check-cspecs "--js-cspecs-put" (read ip))
			 (hopc-j2s-flags))))))
	    (("--js-cspecs-assigop" ?cspecs (help "Use assigop specs"))
	     (call-with-input-string cspecs
		(lambda (ip)
		   (hopc-j2s-flags-set!
		      (cons* :cspecs-assigop
			 (check-cspecs "--js-cspecs-assigop" (read ip))
			 (hopc-j2s-flags))))))
	    (("--js-cspecs-assignew" ?cspecs (help "Use assignew specs"))
	     (call-with-input-string cspecs
		(lambda (ip)
		   (hopc-j2s-flags-set!
		      (cons* :cspecs-assignew
			 (check-cspecs "--js-cspecs-assignew" (read ip))
			 (hopc-j2s-flags))))))
	    (("--js-cspecs-call" ?cspecs (help "Use call specs"))
	     (call-with-input-string cspecs
		(lambda (ip)
		   (hopc-j2s-flags-set!
		      (cons* :cspecs-call
			 (check-cspecs "--js-cspecs-call" (read ip))
			 (hopc-j2s-flags))))))
	    (("--tls" (help "Thread local storage"))
	     (cond-expand
		(enable-tls
		 (hopc-j2s-flags-set!
		    (cons* :tls #t (hopc-j2s-flags))))
		(else
		 (error "hopc"
		    "thread local storage not supported by architecture"
		    #f))))
	    (else
	     (if (string=? else "--")
		 (begin
		    (hopc-bigloo-options-set!
		       (append (hopc-bigloo-options) (cdr rest)))
		    (stop #t))
		 (hopc-sources-set! (append (hopc-sources) (list else)))))))
      ;; hop-lib-dir
      (hopc-bigloo-options-set!
	 (append `("-L" ,lib-dir) (hopc-bigloo-options)))
      ;; ecmascript version
      (j2s-compile-options-set!
	 (append
	    (apply append
	       (map (lambda (f) (list f #t))
		  (case ecmascriptv
		     ((5) '())
		     ((6) ecmascript-es6)
		     ((2017) ecmascript-es2017))))
	    (j2s-compile-options)))
      (when loadp
	 (hopc-load-rc
	    (if (string? rc-file)
		rc-file
		(let ((path (make-file-name (hop-rc-directory) (hopc-rc-file))))
		   (if (file-exists? path)
		       path
		       (make-file-name (hop-etc-directory) (hopc-rc-file)))))))
      ;; commonjs modules
      (hopc-j2s-flags-set!
	 (cons* :commonjs-export commonjs-export (hopc-j2s-flags)))
      ;; long-size
      (unless (fixnum? (hopc-long-size))
	 (hopc-long-size-set! (bigloo-config 'elong-size)))
      (unless (fixnum? (hopc-int-size))
	 (hopc-int-size-set! (bigloo-config 'int-size)))

      ;; pp-width
      (set! *pp-width* (hopc-pp-width))

      ;; config report
      (when (pair? configs)
	 (hopc-configure configs lib-dir)
	 (exit 0))
      
      exprs))

;*---------------------------------------------------------------------*/
;*    hopc-load-rc ...                                                 */
;*---------------------------------------------------------------------*/
(define (hopc-load-rc path)
   (if (string? path)
       (when (file-exists? path)
	  (hop-verb 2 "Loading `" path "'...\n")
	  (hop-load path :menv #unspecified))))      


;*---------------------------------------------------------------------*/
;*    hopc-configure ...                                               */
;*---------------------------------------------------------------------*/
(define (hopc-configure keys lib-dir)
   (call-with-input-file (make-file-name lib-dir "hopc_config.sch")
      (lambda (ip)
	 (let ((version (eval (read ip)))
	       (configs (eval (read ip))))
	    (for-each (lambda (s)
			 (let* ((k (string->symbol s))
				(c (assq k configs)))
			    (cond
			       ((pair? c)
				(print (cdr c)))
			       ((eq? k '--so-dirname)
				(print
				   (make-file-path
				      (cdr (assq '--version configs))
				      (cdr (assq '--build-id configs))
				      (cdr (assq '--build-arch configs)))))
			       (else
				(error "hopc"
				   (format "Unknown key \"~a\"" k)
				   configs)))))
	       keys)))))

;*---------------------------------------------------------------------*/
;*    check-cspecs ...                                                 */
;*---------------------------------------------------------------------*/
(define (check-cspecs opt val)
   (cond
      ((not (pair? val))
       (error "hopc" (format "Illegal `~a' option value" opt) val))
      ((not (every (lambda (v)
		      (memq v '(imap emap cmap vtable nmap amap pmap)))
	       val))
       (error "hopc" (format "Illegal `~a' option value" opt) val))
      (else
       val)))
