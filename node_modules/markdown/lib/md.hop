;*=====================================================================*/
;*    .../prgm/project/hop/3.0.x/node_modules/markdown/lib/md.hop      */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Tue Jul 14 06:14:57 2015                          */
;*    Last change :  Tue Jul 14 07:44:44 2015 (serrano)                */
;*    Copyright   :  2015 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    Markdown generator                                               */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module markdown_md
   
   (library hop web)
   
   (static (class xml-element-mdt::xml-element
	      node))
   
   (export (generic xml->md ::obj css p)))

;*---------------------------------------------------------------------*/
;*    md-string ...                                                    */
;*---------------------------------------------------------------------*/
(define (md-string str)
   str)

;*---------------------------------------------------------------------*/
;*    xml->md ::obj ...                                                */
;*---------------------------------------------------------------------*/
(define-generic (xml->md obj::obj css::obj p::output-port)
   
   (define (text-transform obj)
      (let loop ((transforms (filter-map
				(lambda (p)
				   (when (and (pair? p) (eq? (car p) 'text-transform))
				      (cdr p)))
				css))
		 (obj obj))
	 (if (null? transforms)
	     obj
	     (loop (cdr transforms) ((car transforms) obj)))))
   
   (let loop ((obj obj))
      (cond
	 ((string? obj)
	  (display (md-string (text-transform obj)) p))
	 ((number? obj)
	  (display obj p))
	 ((symbol? obj)
	  #unspecified)
	 ((pair? obj)
	  (for-each loop obj))
	 ((date? obj)
	  (display obj p))
	 ((null? obj)
	  #unspecified)
	 ((eq? obj #unspecified)
	  #unspecified)
	 ((eq? obj #f)
	  #unspecified)
	 ((eq? obj #t)
	  #unspecified)
	 (else
	  #unspecified))))

