/*=====================================================================*/
/*    .../project/hop/3.2.x/node_modules/markdown/lib/markdown.js      */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Sun Jul  6 06:11:11 2014                          */
/*    Last change :  Thu Sep 27 12:00:35 2018 (serrano)                */
/*    Copyright   :  2014-18 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    HOP markdown parser/generator                                    */
/*=====================================================================*/
"use hopscript"

/*---------------------------------------------------------------------*/
/*    Bigloo module clause to spawn hopjs MARKDOWN initialization      */
/*---------------------------------------------------------------------*/
const path = require( "path" );
const markdown = require( "./_markdown.hop" );

/*---------------------------------------------------------------------*/
/*    XML tags                                                         */
/*---------------------------------------------------------------------*/
exports.H1 = markdown[ "MARKDOWN:H1" ];
exports.H2 = markdown[ "MARKDOWN:H2" ];
exports.H3 = markdown[ "MARKDOWN:H3" ];
exports.H4 = markdown[ "MARKDOWN:H4" ];
exports.H5 = markdown[ "MARKDOWN:H5" ];
exports.CODE = markdown[ "MARKDOWN:CODE" ];
exports.PRE = markdown[ "MARKDOWN:PRE" ];
exports.LI = markdown[ "MARKDOWN:LI" ];
exports.UL = markdown[ "MARKDOWN:UL" ];
exports.OL = markdown[ "MARKDOWN:OL" ];
exports.HR = markdown[ "MARKDOWN:HR" ];
exports.P = markdown[ "MARKDOWN:P" ];
exports.A = markdown[ "MARKDOWN:A" ];
exports.STRONG = markdown[ "MARKDOWN:STRONG" ];
exports.BLOCKQUOTE = markdown[ "MARKDOWN:BLOCKQUOTE" ];
exports.IMG = markdown[ "MARKDOWN:IMG" ];

/*---------------------------------------------------------------------*/
/*    parser ...                                                       */
/*---------------------------------------------------------------------*/
exports.load = markdown.load;
exports.eval = markdown.eval;

/*---------------------------------------------------------------------*/
/*    include characters                                               */
/*---------------------------------------------------------------------*/
exports.include = markdown.include;

/*---------------------------------------------------------------------*/
/*    generators                                                       */
/*---------------------------------------------------------------------*/
exports.css = path.join( path.dirname( __dirname ), "hss/markdown.hss" );

/*---------------------------------------------------------------------*/
/*    tag                                                              */
/*---------------------------------------------------------------------*/
exports.MARKDOWN = function glop( attr, ... body ) {
   if( attr ) {
      if( ("src" in attr) ) {
	 return markdown.load( attr.src , attr.charset, attr.fontifier ).XML;
      } else {
	 var str = String.prototype.concat.apply( "", body );
	 return markdown.eval( str, attr.charset, attr.fontifier ).XML;
      }
   } else {
      var str = String.prototype.concat.apply( "", body );
      return markdown.eval( str ).XML;
   }
}

/*---------------------------------------------------------------------*/
/*    language compiler (pre-processor)                                */
/*---------------------------------------------------------------------*/
function compiler( ifile, ofile=undefined ) {
   return {
      type: "value",
      value: markdown.loadDocument( ifile )
   }
}

exports[ Symbol.compiler ] = compiler;
