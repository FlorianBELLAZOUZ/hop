;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/node_modules/text/lib/_text.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Thu Sep  6 15:19:35 2018                          */
;*    Last change :  Sat Mar  5 12:47:48 2022 (serrano)                */
;*    Copyright   :  2018-22 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    TEXT library bindings                                            */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _csv
   (library hopscript hop hopwidget nodejs web text)
   (export (hopscript %this this %scope %module)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*    -------------------------------------------------------------    */
;*    This is the function called by JavaScript when the Hop module    */
;*    is required. It binds the exports field of the newly             */
;*    allocated module                                                 */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)

   (define (to-javascript item)
      (cond
	 ((number? item)
	  item)
	 ((string? item)
	  (js-string->jsstring item))
	 ((pair? item)
	  (js-vector->jsarray (list->vector (map to-javascript item)) %this))
	 ((vector? item)
	  (js-vector->jsarray (vector-map to-javascript item) %this))
	 (else
	  item)))
      
   (define (bibtex->js lentry)
      (js-alist->jsobject
	 `((id . ,(car lentry))
	   (type . ,(cadr lentry))
	   ,@(map (lambda (c)
		     (cons (car c) (to-javascript (cdr c))))
		(cddr lentry)))
	 %this))

   (define (promise this obj producer consumer)
      (with-access::JsGlobalObject %this (js-promise)
	 (letrec ((p (js-new %this js-promise
			(js-make-function %this
			   (lambda (_ resolve reject)
			      (thread-start!
				 (instantiate::hopthread
				    (name "xmlParsePromise")
				    (body (lambda ()
					     (js-worker-exec (js-current-worker) "parse" #t
						(lambda ()
						   (with-handler
						      (lambda (e)
							 (js-promise-async p
							    (lambda ()
							       (js-promise-reject p e))))
						      (let ((x (consumer obj)))
							 (js-promise-async p
							    (lambda ()
							       (let ((v (producer x)))
								  (js-promise-resolve p v)))))))))))))
			   (js-function-arity 2 0)
			   (js-function-info :name "executor" :len 2)))))
	    p)))
   
   (define (callback this obj producer consumer cb)
      (let ((w (js-current-worker)))
	 (with-access::WorkerHopThread w (%loop)
	    (let ((h (instantiate::UvIdle
			(loop %loop)
			(cb list))))
	       (uv-idle-start h)
	       (thread-start!
		  (instantiate::hopthread
		     (name "xmlParse")
		     (body (lambda ()
			      (with-handler
				 (lambda (e)
				    (js-worker-push-thunk! w "parse"
				       (lambda ()
					  (uv-idle-stop h)
					  (js-call2-jsprocedure %this cb %this e #f))))
				 (let ((x (producer obj)))
				    (js-worker-push-thunk! w "parse"
				       (lambda ()
					  (let ((v (consumer x)))
					     (uv-idle-stop h)
					     (js-call2-jsprocedure %this cb %this #f v))))))))))))))

   (define (async this obj cb producer consumer)
      (if (js-procedure? cb)
	  (callback this obj cb producer consumer)
	  (promise this obj producer consumer)))

   (define (sync this obj producer consumer)
      (consumer (producer obj)))

   (define (bibtexParseProducer fd)
      (let ((p (open-input-descriptor fd)))
	 (unwind-protect
	    (bibtex-port p)
	    (close-input-port p))))

   (define (bibtexParseProducerFile file)
      (let ((p (open-input-file file)))
	 (unwind-protect
	    (bibtex-port p)
	    (close-input-port p))))

   (define (bibtexParseConsumer v)
      (js-vector->jsarray (list->vector (map bibtex->js v)) %this))
   
   (with-access::JsGlobalObject %this (js-object)
      (let ((exports (js-new0 %this js-object)))
         (js-put! %module (& "exports") exports #f %this)
         ;; bibtexParse
         (js-put! exports (& "bibtexParseSync")
            (js-make-function %this
               (lambda (this fd cb)
		  (async this (js-tonumber fd %this) cb
		     bibtexParseProducer
		     bibtexParseConsumer))
	       (js-function-arity 1 0)
	       (js-function-info :name "bibtexParseSync" :len 1))
	    #f %this)
         ;; bibtexParseSync
         (js-put! exports (& "bibtexParseSync")
            (js-make-function %this
               (lambda (this fd)
		  (sync this (js-tonumber fd %this)
		     bibtexParseProducer
		     bibtexParseConsumer))
	       (js-function-arity 1 0)
	       (js-function-info :name "bibtexParseSync" :len 2))
	    #f %this)
         ;; bibtexParseFile
         (js-put! exports (& "bibtexParseFile")
            (js-make-function %this
               (lambda (this file cb)
		  (async this (js-tostring file %this) cb
		     bibtexParseProducerFile
		     bibtexParseConsumer))
	       (js-function-arity 1 0)
	       (js-function-info :name "bibtexParseFile" :len 2))
	    #f %this)
         ;; bibtexParseFileSync
         (js-put! exports (& "bibtexParseFileSync")
            (js-make-function %this
	       (lambda (this file cb)
		  (sync this (js-tostring file %this)
		     bibtexParseProducerFile
		     bibtexParseConsumer))
	       (js-function-arity 1 0)
	       (js-function-info :name "bibtexParseFileSync" :len 2))
	    #f %this)
         ;; bibtexParseString
         (js-put! exports (& "bibtexParseString")
            (js-make-function %this
               (lambda (this entry enc)
		  (bibtexParseConsumer (bibtex-string (js-tostring entry %this))))
	       (js-function-arity 1 0)
	       (js-function-info :name "bibtexParseString" :len 2))
	    #f %this)
	 )))
