/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/xml/lib/xml.js         */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Tue Mar 13 07:37:34 2018                          */
/*    Last change :  Thu Sep  6 16:06:30 2018 (serrano)                */
/*    Copyright   :  2018-21 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    XML dynamic element creation                                     */
/*=====================================================================*/
"use hopscript";

/*---------------------------------------------------------------------*/
/*    imports                                                          */
/*---------------------------------------------------------------------*/
const fs = require( "fs" );
const _vcf = require( "./_vcf.hop" );

/*---------------------------------------------------------------------*/
/*    load ...                                                         */
/*---------------------------------------------------------------------*/
export function load( file, options ) {
   return _vcf.load( file ).map( vc => new VCard( vc ) );
}

exports.load = load;

/*---------------------------------------------------------------------*/
/*    constants                                                        */
/*---------------------------------------------------------------------*/
const addrProps = 
   [ "pobox", "ext", "street", "city", "region", "zip", "country" ];

/*---------------------------------------------------------------------*/
/*    splitLines ...                                                   */
/*---------------------------------------------------------------------*/
function splitLines( prelude, data ) {
   const dlen = data.length;
   let i = 74 - prelude.length;
   let str = data.substring( 0, i );
   
   for( ; i < dlen; i += 73 ) {
      str += "\n ";
      str += data.substring( i, i + 73 );
   }
   
   return str;
}

/*---------------------------------------------------------------------*/
/*    photoToString ...                                                */
/*---------------------------------------------------------------------*/
function photoToString( photo ) {
   let str = "PHOTO;ENCODING=";
   const data = photo.data;

   str += photo.encoding;
   str += ";";
   str += photo.format;       
   str += ":";
   
   str += splitLines( str, data );
   
   return str + "\n";
}

/*---------------------------------------------------------------------*/
/*    VCard ...                                                        */
/*---------------------------------------------------------------------*/
export class VCard {
   
   constructor( vcard ) {
      if( _vcf.isVCard.call( vcard ) ) {
      	 this.version = _vcf.version.call( vcard );
      	 this.uid = _vcf.uid.call( vcard );
      	 this.familyname = _vcf.familyname.call( vcard );
      	 this.firstname = _vcf.firstname.call( vcard );
      	 this.nickname = _vcf.nickname.call( vcard );
      	 this.emails = _vcf.emails.call( vcard );
      	 this.phones = _vcf.phones.call( vcard );
      	 this.addresses = _vcf.addresses.call( vcard );
      	 this.photo = _vcf.photo.call( vcard );
      	 this.url = _vcf.url.call( vcard );
      	 this.birthday = _vcf.birthday.call( vcard );
      	 this.sound = _vcf.sound.call( vcard );
      	 this.lang = _vcf.lang.call( vcard );
      	 this.related = _vcf.related.call( vcard );
      	 this.color = _vcf.color.call( vcard );
      	 this.thumbnail = _vcf.thumbnail.call( vcard );
      	 this.key = _vcf.key.call( vcard );
      	 this.notes = _vcf.notes.call( vcard );
      	 this.extras = _vcf.extras.call( vcard );
      } else {
	 this.version = "2.1";
      	 this.uid = undefined;
      	 this.familyname = undefined;
      	 this.firstname = undefined;
      	 this.nickname = undefined;
      	 this.emails = [];
      	 this.phones = [];
      	 this.addresses = [];
      	 this.photo = undefined;
      	 this.url = undefined;
      	 this.birthday = undefined;
      	 this.sound = undefined;
      	 this.lang = undefined;
      	 this.related = undefined;
      	 this.color = undefined;
      	 this.thumbnail = undefined;
      	 this.key = undefined;
      	 this.notes = [];
      	 this.extras = {};
      }
   }
   
   toString() {
      let str = "BEGIN:VCARD\n";

      // VERSION:
      if( this.url ) {
	 str += "VERSION:";
	 str += this.version;
	 str += ";\n";
      } else {
	 str += "VERSION:2.1\n";
      }
      
      // UID:
      if( this.uid ) {
      	 str += "UID:";
      	 str += this.uid;
      	 str += "\n";
      }
      
      // FN: & N:
      if( this.familyname || this.firstname ) {
      	 str += "FN:";
      	 if( this.familyname ) {
	    str += this.familyname;
	    str += " "
      	 }
      	 if( this.firstname ) {
	    str += this.firstname;
      	 }
      	 str += "\n";
      	 
      	 str += "N:;";
      	 if( this.familyname ) {
	    str += this.familyname;
	    str += ";"
      	 }
      	 if( this.firstname ) {
	    str += this.firstname;
	    str += ";"
      	 }
      	 str += ";;\n"
      }
      
      // NICKNAME:
      if( this.nickname ) {
      	 str += "NICKNAME:";
      	 str += this.nickname;
      	 str += "\n";
      }
      
      // TEL:
      for( let i = 0; i < this.phones.length; i++ ) {
	 if( this.phones[ i ].number ) {
	    str += "TEL;";
	    str += this.phones[ i ].label;
	    str += ":";
	    str += this.phones[ i ].number;
	    str += "\n";
	 }
      }
      
      // EMAIL:
      for( let i = 0; i < this.emails.length; i++ ) {
	 const email = this.emails[ i ];
	 if( email.email ) {
	    str += "EMAIL;";
	    str += email.label;
	    str += ":";
	    str += email.email;
	    str += "\n";
	 }
      }
      
      // ADR:
      for( let i = 0; i < this.addresses.length; i++ ) {
	 const addr = this.addresses[ i ];
	 if( addr.street ) {
	    str += "ADR;";
	    str += addr.label;
	    str += ":";
	    for( let p of addrProps ) {
	       if( addr[ p ] ) {
	       	  str += addr[ p ];
	       }
	       str += ";";
	    }
	    
	    str += "\n";
	 }
      }

      // URL:
      if( this.url ) {
	 str += "URL:";
	 str += this.url;
	 str += ";\n";
      }
      
      // LANG:
      if( this.lang ) {
	 str += "LANG:";
	 str += this.lang;
	 str += ";\n";
      }
      
      // PHOTO:
      if( this.photo ) {
	 str += photoToString( this.photo );
      }
      
      // RELATED:
      if( this.related ) {
	 str += "RELATED:";
	 str += this.related;
	 str += ";\n";
      }
      
      // KEY:
      if( this.key ) {
	 str += "KEY:";
	 str += this.key;
	 str += ";\n";
      }
      
      // X-COLOR:
      if( this.color ) {
	 str += "X-COLOR:";
	 str += this.color;
	 str += ";\n";
      }
      
      // X-THUMBNAIL:
      if( this.thumbnail ) {
	 str += photoToString( this.thumbnail );
      }
      
      // XX-EXTRAS:
      for( let k in this.extras ) {
	 str += k.toUpperCase();
	 str += ":";
	 str += this.extras[ k ];
	 str += "\n";
      }
      
      str += "END:VCARD\n";
      
      return str;
   }
}

exports.VCard = VCard;

/*---------------------------------------------------------------------*/
/*    Symbol.compiler ...                                              */
/*---------------------------------------------------------------------*/
exports[ Symbol.compiler ] = (file, options) => {
   const val = load( file, options );
   
   if( options && options.target ) {
      var fd = fs.openSync( options.target, "w" );
      try {
	 var buf = JSON.stringify( val );
	 fs.write( fd, buf, 0, buf.length );
	 
	 return {
	    type: "filename",
	    value: target,
	 }
      } finally {
	 fs.closeSync( options.target );
      }
   } else {
      return {
	 type: "value",
	 value: val,
      }
   }
}


