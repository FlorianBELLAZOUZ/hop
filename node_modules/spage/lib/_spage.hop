;*=====================================================================*/
;*    /tmp/HOPNEW/hop/node_modules/spage/lib/_spage.hop                */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Jul  6 06:15:53 2014                          */
;*    Last change :  Sun Feb 23 15:49:30 2020 (serrano)                */
;*    Copyright   :  2014-20 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    SPAGE Hop wrapper                                                */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _spage

   (library hopscript hop hopwidget nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    xml-node? ...                                                    */
;*---------------------------------------------------------------------*/
(define (xml-node? x)
   (or (isa? x xml-element) (service? x)))

;*---------------------------------------------------------------------*/
;*    js-bind-tag! ...                                                 */
;*---------------------------------------------------------------------*/
(define-macro (js-bind-tag! %this obj tag)
   `(js-bind! ,%this ,obj (& ,(symbol->string tag))
       :value (js-make-function ,%this
		 (lambda (this attrs . nodes)
		    (if (isa? attrs JsObject)
			(if (null? nodes)
			    (apply ,(symbol-append '< tag '>)
			       :%context %this
			       (js-jsobject->keyword-plist attrs ,%this))
			    (apply ,(symbol-append '< tag '>)
			       :%context %this
			       (append
				  (js-jsobject->keyword-plist attrs ,%this)
				  nodes)))
			(apply ,(symbol-append '< tag '>)
			   nodes)))
		 (js-function-arity 1 -1 'scheme)
		 (js-function-info :name ,(symbol->string tag) :len 2))
       :writable #f
       :enumerable #f))

;*---------------------------------------------------------------------*/
;*    js-bind-xml-tag! ...                                             */
;*---------------------------------------------------------------------*/
(define-macro (js-bind-xml-tag! %this obj tag)
   `(js-bind! ,%this ,obj (& ,(symbol->string tag))
       :value (js-make-function ,%this
		 (lambda (this attrs . nodes)
		    (if (isa? attrs JsObject)
			(if (null? nodes)
			    (apply ,(symbol-append '< tag '>)
			       :%context %this
			       (js-jsobject->keyword-plist attrs ,%this))
			    (apply ,(symbol-append '< tag '>)
			       :%context %this
			       (append
				  (js-jsobject->keyword-plist attrs ,%this)
				  (filter xml-node? nodes))))
			(apply ,(symbol-append '< tag '>)
			   (filter xml-node? nodes))))
		 (js-function-arity 1 -1 'scheme)
		 (js-function-info :name ,(symbol->string tag) :len 2))
       :writable #f
       :enumerable #f))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (&with!
      (let ((exports (js-get module (& "exports") %this)))
	 (js-bind-tag! %this exports SPAGE)
	 (js-bind-tag! %this exports SPHEAD)
	 (js-bind-tag! %this exports SPTABHEAD)
	 (js-bind-xml-tag! %this exports SPTAB))))
	 

