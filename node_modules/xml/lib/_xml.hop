;*=====================================================================*/
;*    serrano/prgm/project/hop/3.5.x/node_modules/xml/lib/_xml.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Thu Sep  6 15:19:35 2018                          */
;*    Last change :  Wed Jan 26 15:53:31 2022 (serrano)                */
;*    Copyright   :  2018-22 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    FEED Hop parser                                                  */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _feedn

   (library hopscript hop hopwidget nodejs web)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    alist->kplist ...                                                */
;*---------------------------------------------------------------------*/
(define (alist->kplist alist)
   (append-map (lambda (a) (list (symbol->keyword (car a)) (cdr a))) alist))

;*---------------------------------------------------------------------*/
;*    make-xml-element ...                                             */
;*---------------------------------------------------------------------*/
(define (make-xml-element tag attrs nodes)
   (instantiate::xml-element
      (tag tag)
      (attributes (alist->kplist attrs))
      (body nodes)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (with-access::JsGlobalObject %this (__proto__)
      
      (define exports (js-get module (& "exports") %this))

      (define xml-cmap (js-strings->cmap '#("tag" "attributes" "children")))

      (define (to-javascript item)
	 (if (string? item)
	     (js-string->jsstring item)
	     item))
      
      (define (js-list->jsarray items %this)
	 (let ((v (list->vector (map! to-javascript items))))
	    (js-vector->jsarray v %this)))
      
      (define (make-xml-jsobject tag attrs children)
	 (instantiateJsObject
	    (cmap xml-cmap)
	    (__proto__ (js-object-proto %this))
	    (elements (vector
			 (js-string->jsstring (symbol->string! tag))
			 (js-alist->jsobject attrs %this)
			 (js-list->jsarray children %this)))))

      (define (xml-decl item)
	 (js-alist->jsobject (cons '(tag . xml-decl) (cdr item)) %this))
      
      (define (xml-document items %this)
	 (cond
	    ((null? items)
	     (js-list->jsarray '() %this))
	    ((and (pair? (car items)) (eq? (caar items) 'xml-decl))
	     (js-list->jsarray (cons (xml-decl (car items)) (cdr items)) %this))
	    (else
	     (js-list->jsarray items %this))))
      
      (js-bind! %this exports (& "createElement")
	 :value (js-make-function %this
		   (lambda (this tag attrs nodes)
		      (instantiate::xml-element
			 (tag (string->symbol (js-tostring tag %this)))
			 (attributes (js-jsobject->keyword-plist attrs %this))
			 (body (xml-unpack nodes %this))))
		   (js-function-arity 3 0)
		   (js-function-info :name "createElement" :len 3))
	 :writable #f
	 :enumerable #f)
      
      (js-bind! %this exports (& "load")
	 :value (js-make-function %this
		   (lambda (this file encoding)
		      (let ((path (js-tostring file %this))
			    (enc (if (eq? encoding (js-undefined))
				     'UTF-8
				     (string->symbol
					(js-tostring encoding %this)))))
			 (let ((xml (call-with-input-file path
				       (lambda (in)
					  (xml-parse in
					     :encoding enc
					     :procedure make-xml-element)))))
			    (if (pair? xml)
				(if (string? (car xml))
				    (js-string->jsstring (car xml))
				    (car xml))
				(js-undefined)))))
		   (js-function-arity 2 0)
		   (js-function-info :name "parse" :len 2))
	 :writable #f
	 :enumerable #f)
      
      (js-bind! %this exports (& "parse")
	 :value (js-make-function %this
		   (lambda (this str reviver)
		      (xml-document
			 (call-with-input-string (js-tostring str %this)
			    (lambda (ip)
			       (xml-parse ip
				  :strict #f
				  :procedure
				  (if (js-procedure? reviver)
				      (lambda (tag attrs children)
					 (js-call3 %this reviver (js-undefined)
					    (js-string->jsstring
					       (symbol->string! tag))
					    (js-alist->jsobject attrs %this)
					    (js-list->jsarray children %this)))
				      make-xml-jsobject))))
			 %this))
		   (js-function-arity 2 -1 'scheme)
		   (js-function-info :name "parse" :len 3))
	 :writable #f
	 :enumerable #f)
      
      ))

      

