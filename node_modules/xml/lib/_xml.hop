;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/node_modules/xml/lib/_xml.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Thu Sep  6 15:19:35 2018                          */
;*    Last change :  Mon Feb 13 17:47:59 2023 (serrano)                */
;*    Copyright   :  2018-23 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    FEED Hop parser                                                  */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _feedn

   (library hopscript hop hopwidget nodejs web)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    alist->kplist ...                                                */
;*---------------------------------------------------------------------*/
(define (alist->kplist alist)
   (append-map (lambda (a) (list (symbol->keyword (car a)) (cdr a))) alist))

;*---------------------------------------------------------------------*/
;*    make-xml-element ...                                             */
;*---------------------------------------------------------------------*/
(define (make-xml-element tag attrs nodes pos)
   (instantiate::xml-element
      (tag tag)
      (attributes (alist->kplist attrs))
      (body nodes)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (with-access::JsGlobalObject %this (__proto__)
      
      (define exports (js-get module (& "exports") %this))

      (define xml-cmap
	 (js-strings->cmap '#("tag" "attributes" "children" "pos")))

      (define (to-javascript item)
	 (if (string? item)
	     (js-string->jsstring item)
	     item))
      
      (define (js-list->jsarray items %this)
	 (let ((v (list->vector (map! to-javascript items))))
	    (js-vector->jsarray v %this)))
      
      (define (make-xml-jsobject tag attrs children pos)
	 (instantiateJsObject
	    (cmap xml-cmap)
	    (__proto__ (js-object-proto %this))
	    (elements (vector
			 (js-string->jsstring (symbol->string! tag))
			 (js-alist->jsobject attrs %this)
			 (js-list->jsarray children %this)
			 pos))))

      (define (xml-decl item)
	 (make-xml-jsobject 'xml-decl (cdr item) '() 0))
      
      (define (xml-document items %this)
	 (cond
	    ((null? items)
	     (js-list->jsarray '() %this))
	    ((and (pair? (car items)) (eq? (caar items) 'xml-decl))
	     (js-list->jsarray (cons (xml-decl (car items)) (cdr items)) %this))
	    (else
	     (js-list->jsarray items %this))))

      (define (xml-parse-sync this in)
	 (let ((ip (if (fixnum? in)
		       (open-input-descriptor in)
		       (open-input-string (js-tostring in %this)))))
	    (unwind-protect
	       (xml-parse ip
		  :strict #f
		  :make-element make-xml-jsobject)
	       (close-input-port ip))))

      (define (xml-parse-promise this in)
	 (with-access::JsGlobalObject %this (js-promise)
	    (letrec ((p (js-new %this js-promise
			   (js-make-function %this
			      (lambda (_ resolve reject)
				 (thread-start!
				    (instantiate::hopthread
				       (name "xmlParsePromise")
				       (body (lambda ()
						(js-worker-exec (js-current-worker) "parse" #t
						   (lambda (%this)
						      (with-handler
							 (lambda (e)
							    (js-promise-async p
							       (lambda (%this)
								  (js-promise-reject p e))))
							 (let ((x (xml-parse-sync this in)))
							    (js-promise-async p
							       (lambda (%this)
								  (let ((v (xml-document x %this)))
								     (js-promise-resolve p v)))))))))))))
			      (js-function-arity 2 0)
			      (js-function-info :name "executor" :len 2)))))
	       p)))

      (define (xml-parse-callback this in cb)
	 (let ((w (js-current-worker)))
	    (with-access::WorkerHopThread w (%loop)
	       (let ((h (instantiate::UvIdle
			   (loop %loop)
			   (cb list))))
		  (uv-idle-start h)
		  (thread-start!
		     (instantiate::hopthread
			(name "xmlParse")
			(body (lambda ()
				 (with-handler
				    (lambda (e)
				       (js-worker-push! w "parse"
					  (lambda (%this)
					     (uv-idle-stop h)
					     (js-call2-jsprocedure %this cb %this e #f))))
				    (let ((x (xml-parse-sync this in)))
				       (js-worker-push! w "parse"
					  (lambda (%this)
					     (let ((v (xml-document x %this)))
						(uv-idle-stop h)
						(js-call2-jsprocedure %this cb %this #f v))))))))))))))

      (define (xml-parse-async this in cb)
	 (if (js-procedure? cb)
	     (xml-parse-callback this in cb)
	     (xml-parse-promise this in)))
      
      
      (js-bind! %this exports (& "createElement")
	 :value (js-make-function %this
		   (lambda (this tag attrs nodes)
		      (instantiate::xml-element
			 (tag (string->symbol (js-tostring tag %this)))
			 (attributes (js-jsobject->keyword-plist attrs %this))
			 (body (xml-unpack nodes %this))))
		   (js-function-arity 3 0)
		   (js-function-info :name "createElement" :len 3))
	 :writable #f
	 :enumerable #f)
      
      (js-bind! %this exports (& "load")
	 :value (js-make-function %this
		   (lambda (this file encoding)
		      (let ((path (js-tostring file %this))
			    (enc (if (eq? encoding (js-undefined))
				     'UTF-8
				     (string->symbol
					(js-tostring encoding %this)))))
			 (let ((xml (call-with-input-file path
				       (lambda (in)
					  (xml-parse in
					     :encoding enc
					     :make-element make-xml-element)))))
			    (if (pair? xml)
				(if (string? (car xml))
				    (js-string->jsstring (car xml))
				    (car xml))
				(js-undefined)))))
		   (js-function-arity 2 0)
		   (js-function-info :name "parse" :len 2))
	 :writable #f
	 :enumerable #f)
      
      (js-bind! %this exports (& "parseSync")
	 :value (js-make-function %this
		   xml-parse-sync
		   (js-function-arity xml-parse-sync)
		   (js-function-info :name "parseSync" :len 2))
	 :writable #f
	 :enumerable #f)

      (js-bind! %this exports (& "parse")
	 :value (js-make-function %this
		   xml-parse-async
		   (js-function-arity xml-parse-async)
		   (js-function-info :name "parse" :len 3))
	 :writable #f
	 :enumerable #f)
	 
      ))

      

