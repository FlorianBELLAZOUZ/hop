;*=====================================================================*/
;*    .../prgm/project/hop/hop/node_modules/syslog/lib/_syslog.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Jul  6 06:15:53 2014                          */
;*    Last change :  Tue Apr 26 08:53:34 2022 (serrano)                */
;*    Copyright   :  2014-22 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Exif JS bindings                                                 */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _syslog

   (library hopscript hop hopwidget nodejs multimedia)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    js-pair->rational ...                                            */
;*---------------------------------------------------------------------*/
(define (js-pair->rational n::long d::long %this)
   (let ((arr (js-array-construct-alloc-small-sans-init %this #u32:2)))
      (with-access::JsArray arr (vec ilen length)
	 (set! ilen #u32:2)
	 (set! length #u32:2)
	 (vector-set! vec 0 n)
	 (vector-set! vec 1 d)
	 arr)))

;*---------------------------------------------------------------------*/
;*    js-prop->name ...                                                */
;*---------------------------------------------------------------------*/
(define (js-prop->name name)
   ;; performance does not matter because this function is only
   ;; invoked at initialization time
   
   (define (loop i)
      (let ((j (string-index name #\- i)))
	 (if (not j)
	     (if (=fx i 0)
		 name
		 (substring name i))
	     (string-append (substring name i j)
		(string (char-upcase (string-ref name (+fx j 1))))
		(loop (+fx j 2))))))

   (js-string->name (loop 0)))


;*---------------------------------------------------------------------*/
;*    make-class-elements ...                                          */
;*---------------------------------------------------------------------*/
(define (make-class-elements clazz %this)
   (vector-map (lambda (k)
		  (let ((name (symbol->string! (class-field-name k)))
			(get (class-field-accessor k)))
		     (instantiate::JsWrapperDescriptor
			(name (js-prop->name name))
			(enumerable #t)
			(configurable #f)
			(writable #f)
			(%get (lambda (obj owner propname %this)
				 (with-access::JsWrapper obj (obj)
				    (let ((v (get obj)))
				       (match-case v
					  (((and ?a (? fixnum?)) . (and ?d (? fixnum?)))
					   ;; a rational number
					   (js-pair->rational a d %this))
					  (((and ?a (? elong?)) . (and ?d (? elong?)))
					   ;; a rational number
					   (js-pair->rational (elong->fixnum a) (elong->fixnum d) %this))
					  (else
					   (js-obj->jsobject v %this)))))))
			(%set (lambda (obj v owner propname %this)
				 #unspecified)))))
      (class-all-fields clazz)))

;*---------------------------------------------------------------------*/
;*    make-class-cmap ...                                              */
;*---------------------------------------------------------------------*/
(define (make-class-cmap clazz %this)
   (js-names->cmap 
      (vector-map (lambda (k)
		     (js-prop->name (symbol->string! (class-field-name k))))
	 (class-all-fields clazz))
      :accessor #t :writable #f :enumerable #t :configurable #f :inline #f))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   
   (js-export (Exif)

      (define exif-prototype
	 (instantiateJsObject
	    (__proto__ (js-null))
	    (cmap (make-class-cmap exif %this))
	    (elements (make-class-elements exif %this))))
	 
      (define (js-exif this filename)
	 (with-access::JsWrapper this (obj)
	    (set! obj (jpeg-exif (js-jsstring->string filename)))
	    (js-bind! %this this (& "filename")
	       :value filename
	       :writable #f
	       :enumerable #t
	       :configurable #f)))

      (define (js-exif-alloc %this constructor::JsFunction)
	 (with-access::JsGlobalObject %this (js-new-target js-number-pcache)
	    (set! js-new-target constructor)
	    (with-access::JsFunction constructor (constrmap)
	       (unless constrmap
		  (set! constrmap
		     (js-make-jsconstructmap :ctor constructor)))
	       (instantiateJsWrapper
		  (__proto__ exif-prototype)
		  (obj #unspecified)
		  (cmap (js-make-jsconstructmap))
		  (data '())))))
      
      ;; Exif
      (define Exif
	 (js-make-function %this
	    js-exif
	    (js-function-arity 1 0)
	    (js-function-info :name "Exif" :len 1)
	    :prototype exif-prototype
	    :size 1
	    :alloc js-exif-alloc))
      
      Exif))

;*---------------------------------------------------------------------*/
;*    The return value for dynamic-load                                */
;*---------------------------------------------------------------------*/
hopscript

