;*=====================================================================*/
;*    .../prgm/project/hop/hop/node_modules/system/lib/_system.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Jan 17 07:28:50 2021                          */
;*    Last change :                                                    */
;*    Copyright   :  2021 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    Hop native JS system implementation                              */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _systime

   (library hopscript hop hopwidget nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   

   (define (str-array->list array)
      ...)
   
   (define (process-sync this array resolve reject)
      (let* ((p (run-process (str-array->list array)
		   :wait #t :output :pipe :error :pipe))
	     (o (process-output-port p)))
	 (let loop ((lines '()))
	    (let ((l (read-line o)))
	       (if (eof-object? line)
		   (begin
		      (close-input-port o)
		      (process-wait o)
		      (let ((status  (process-exit-status p))
			    (data (js-stringlist->jsstring (reverse! lines))))
			 (if (=fx status 0)
			     (resolve data)
			     (reject (js-plist->jsobject
					`(:status ,status :data ,data)
					%this)))))
		   (loop (cons l lines)))))))
   
   (&with!
      (with-access::JsGlobalObject %this (__proto__ worker)
	 
	 (define exports (js-get module (& "exports") %this))
	 
	 ;; bind the module in the systime scope
	 (js-put! scope (& "module") module #f %this)
	 
	 ;; system
	 (js-bind! %this exports (& "system")
	    :value (js-make-function %this
		      (lambda (this array resolve reject)
			 (thread-start!
			    (instantiate::hop-thread
			       (body (lambda ()
					(process-sync this array
					   (lambda (x)
					      (js-worker-push-thunk! worker
						 (lambda ()
						    (resolve x))))
					   (lambda (y)
					      (js-worker-push-thunk! worker
						 (lambda ()
						    (resolve y))))))))))
		      (js-function-arity 1 0)
		      (js-function-info :name "system" :len 3))
	    :writable #f
	    :enumerable #f)

	 ;; systemSync
	 (js-bind! %this exports (& "systemSync")
	    :value (js-make-function %this
		      (lambda (this array)
			 (process-sync (lambda (x) x) (lambda (x) x)))
		      (js-function-arity 1 0)
		      (js-function-info :name "systemSync" :len 1))
	    :writable #f
	    :enumerable #f))))

;*---------------------------------------------------------------------*/
;*    The return value for dynamic-load                                */
;*---------------------------------------------------------------------*/
hopscript

