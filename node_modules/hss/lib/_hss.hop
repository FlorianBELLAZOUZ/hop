;*=====================================================================*/
;*    serrano/prgm/project/hop/3.0.x/node_modules/hss/lib/_hss.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Jun 19 13:21:01 2015                          */
;*    Last change :  Wed Oct  7 15:11:10 2015 (serrano)                */
;*    Copyright   :  2015 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    Hop hss manager                                                 */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _hss
   
   (library hopscript hop hopwidget nodejs web)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))
	   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   
   (let ((exports (js-get module 'exports %this)))
      
      (js-bind! %this exports 'parseWebColor
	 :value (js-make-function %this
		   (lambda (this color)
		      (hopjs-parse-web-color (js-tostring color %this) %this))
		   1 "parseWeColor"))
      
      (js-bind! %this exports 'makeWebColor
	 :value (js-make-function %this
		   (lambda (this r g b)
		      (make-hex-color r g b))
		   3 "makeWebColor"))
      
      (js-bind! %this exports 'load
	 :value (js-make-function %this
		   (lambda (this file media)
		      (hss-load file
			 (when (js-totest media) (js-tostring media %this))
			 module %this))
		   2 'load)
	 :writable #f
	 :enumerable #f)
      (js-bind! %this exports 'eval
	 :value (js-make-function %this
		   (lambda (this obj media)
		      (let ((file (js-get module 'filename %this)))
			 (hss-read obj
			    (when (js-totest media) (js-tostring media %this))
			    (js-tostring file %this)
			    module %this)))
		   2 'eval)
	 :writable #f
	 :enumerable #f)
      
      exports))

;*---------------------------------------------------------------------*/
;*    hopjs-parse-web-color ...                                        */
;*---------------------------------------------------------------------*/
(define (hopjs-parse-web-color color %this)
   (with-access::JsGlobalObject %this (js-object)
      (multiple-value-bind (r g b)
	 (parse-web-color color)
	 (let ((obj (js-new %this js-object)))
	    (js-put! obj 'red r #f %this)
	    (js-put! obj 'green g #f %this)
	    (js-put! obj 'blue b #f %this)
	    obj))))

;*---------------------------------------------------------------------*/
;*    hss-read-and-compile ...                                         */
;*---------------------------------------------------------------------*/
(define (hss-read-and-compile ip::input-port path::bstring media::obj module %this)
   
   (define (url->filename name)
      (let ((i (string-index name #\?)))
	 (if i
	     (substring name 1 i)
	     (substring name 1 (-fx (string-length name) 1)))))
   
   (define (css-media? medium* media)
      (when media
	 (let loop ((m medium*))
	    (when (pair? m)
	       (with-access::css-media-query (car m) (operator type)
		  (if (equal? type media)
		      (not (eq? operator 'not))
		      (loop (cdr m))))))))
   
   (define (import-hss import)
      (with-access::css-import (car import) (value medium*)
	 (if (or (null? medium*) (css-media? medium*))
	     (let ((url (make-file-name (dirname path) (url->filename value))))
		(let ((ss (hss-load url media module %this)))
		   (if (isa? ss css-stylesheet)
		       (with-access::css-stylesheet ss (rule*) rule*)
		       '()))))))

   
   (let ((ss (let ((mod (eval-module)))
		(unwind-protect
		   (begin
		      ;; each hss file is read inside a dummy empty module
		      (eval `(module ,(gensym)))
		      (with-handler
			 (lambda (e)
			    (when (isa? e &exception)
			       (exception-notify e))
			    (with-error-to-string
			       (lambda ()
				  (exception-notify e))))
			 (hss-compile (hop-read-hss ip))))
		   (begin
		      (when mod (eval-module-set! mod))
		      (close-input-port ip))))))
      (when (isa? ss css-stylesheet)
	 (with-access::css-stylesheet ss (import* rule*)
	    (duplicate::css-stylesheet ss
	       (rule* (append! (append-map! import-hss import*) rule*)))))))
   
;*---------------------------------------------------------------------*/
;*    hss-load ...                                                     */
;*---------------------------------------------------------------------*/
(define (hss-load path media module %this)
   
   (define (hss-load-file path media scope)
      (let ((loadingf (the-loading-file)))
	 (loading-file-set! path)
	 (unwind-protect
	    (let loop ((path path))
	       (let ((ss (with-handler
			    (lambda (e)
			       (if (isa? e &io-file-not-found-error)
				   (let ((i (string-index-right path #\?)))
				      (when i
					 (loop (substring path 0 i))))
				   (raise e))))))
		  (call-with-input-file path
		     (lambda (ip)
			(hss-read-and-compile ip path media module %this)))))
	    (loading-file-set! loadingf))))
   
   (let ((scope (nodejs-new-scope-object %this)))
      ;; bind global properties in the hss scope
      (js-put! scope 'file path #f %this)
      (js-put! scope 'module module #f %this)
      ;; parse the markdown file
      (hss-load-file (js-tostring path %this) media scope)))

;*---------------------------------------------------------------------*/
;*    hss-read ...                                                     */
;*---------------------------------------------------------------------*/
(define (hss-read obj media path module %this)
   (if (eq? obj (js-undefined))
       (js-undefined)
       (let ((str (cond
		     ((isa? obj JsStringLiteral)
		      (js-jsstring->string obj))
		     ((isa? obj JsFastBuffer)
		      (js-jsfastbuffer->string obj))
		     ((isa? obj JsSlowBuffer)
		      (js-jsslowbuffer->string obj))
		     (else
		      (js-tostring obj %this)))))
	  (call-with-input-string str
	     (lambda (ip)
		(hss-read-and-compile ip path media module %this))))))

;*---------------------------------------------------------------------*/
;*    js-cast-object ::css-stylesheet ...                              */
;*---------------------------------------------------------------------*/
(define-method (js-cast-object o::css-stylesheet %this name)
   o)

;*---------------------------------------------------------------------*/
;*    js-inspect ::css-stylesheet ...                                  */
;*---------------------------------------------------------------------*/
(define-method (js-inspect o::css-stylesheet cnt)
   (js-string->jsstring
      (call-with-output-string
	 (lambda (op) (css-write o op)))))

;*---------------------------------------------------------------------*/
;*    js-get ::css-stylesheet ...                                      */
;*---------------------------------------------------------------------*/
(define-method (js-get o::css-stylesheet prop %this::JsGlobalObject)
   (let loop ((pname (js-toname prop %this)))
      (case pname
	 ((inspect)
	  (js-make-function %this js-inspect 1 'inspect))
	 ((toString)
	  (js-make-function %this js-inspect 1 'toString))
	 ((getComputedStyle)
	  (js-make-function %this
	     (lambda (this node pseudo)
		(css-get-computed-style this node))
	     2 'getComputedStyle))
	 (else
	  (js-undefined)))))

;*---------------------------------------------------------------------*/
;*    js-put! ::css-stylesheet ...                                     */
;*---------------------------------------------------------------------*/
(define-method (js-put! o::css-stylesheet p v throw::bool %this::JsGlobalObject)
   #f)

;*---------------------------------------------------------------------*/
;*    js-has-property ::css-stylesheet ...                             */
;*---------------------------------------------------------------------*/
(define-method (js-has-property o::css-stylesheet name %this)
   (memq name '(getComputedStyle)))

;*---------------------------------------------------------------------*/
;*    js-properties-name ::css-stylesheet ...                          */
;*---------------------------------------------------------------------*/
(define-method (js-properties-name o::css-stylesheet e::bool %this::JsGlobalObject)
   (with-access::css-stylesheet o (attributes)
      `#(,(js-string->jsstring "getComputedStyle"))))

;*---------------------------------------------------------------------*/
;*    js-cast-object ::css-style ...                                   */
;*---------------------------------------------------------------------*/
(define-method (js-cast-object o::css-style %this name)
   o)

;*---------------------------------------------------------------------*/
;*    js-inspect ::css-style ...                                       */
;*---------------------------------------------------------------------*/
(define-method (js-inspect o::css-style cnt)
   (js-string->jsstring
      (call-with-output-string
	 (lambda (op)
	    (css-write o op)))))

;*---------------------------------------------------------------------*/
;*    js-get ::css-style ...                                           */
;*---------------------------------------------------------------------*/
(define-method (js-get o::css-style prop %this::JsGlobalObject)
   (let loop ((pname (js-toname prop %this)))
      (case pname
	 ((inspect)
	  (js-make-function %this js-inspect 1 'inspect))
	 ((toString)
	  (js-make-function %this js-inspect 1 'toString))
	 ((after)
	  (with-access::css-style o (after)
	     (if after
		 (js-obj->jsobject after %this)
		 (js-undefined))))
	 ((before)
	  (with-access::css-style o (before)
	     (if before
		 (js-obj->jsobject before %this)
		 (js-undefined))))
	 ((content)
	  (if (css-style-has-attribute? o 'content)
	      (let ((v (css-style-get-attribute o 'content)))
		 (if (string? v)
		     (js-string->jsstring
			(string-as-read
			   (substring v 1 (-fx (string-length v) 1))))
		     v))
	      (js-undefined)))
	 (else
	  (if (css-style-has-attribute? o pname)
	      (js-obj->jsobject (css-style-get-attribute o pname) %this)
	      (js-undefined))))))

;*---------------------------------------------------------------------*/
;*    js-put! ::css-style ...                                          */
;*---------------------------------------------------------------------*/
(define-method (js-put! o::css-style p v throw::bool %this::JsGlobalObject)
   #f)

;*---------------------------------------------------------------------*/
;*    js-has-property ::css-style ...                                  */
;*---------------------------------------------------------------------*/
(define-method (js-has-property o::css-style name %this)
   (with-access::css-style o (attributes)
      (css-style-has-attribute? css name)))

;*---------------------------------------------------------------------*/
;*    js-properties-name ::css-style ...                               */
;*---------------------------------------------------------------------*/
(define-method (js-properties-name o::css-style e::bool %this::JsGlobalObject)
   (with-access::css-style o (attributes)
      (list->vector
	 (map (lambda (k) (js-string->jsstring (symbol->string k)))
	    attributes))))

