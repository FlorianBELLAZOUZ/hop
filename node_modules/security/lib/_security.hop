;*=====================================================================*/
;*    /tmp/HOPNEW/hop/node_modules/security/lib/_security.hop          */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Jun 19 13:21:01 2015                          */
;*    Last change :  Sun Feb 23 15:49:16 2020 (serrano)                */
;*    Copyright   :  2015-20 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Hop security manager                                             */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _security
   
   (library hopscript hop hopwidget nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))
	   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (let ((exports (js-get module 'exports %this)))
      (js-bind! %this exports 'setGlobalSecurityManager
	 :value (js-make-function %this
		   (lambda (this secm)
		      (hop-security-manager-set!
			 (when (isa? secm JsObject)
			    (js-security-manager->hop secm %this))))
		   (js-function-arity 1 0)
		   (js-function-info :name "setGlobalSecurityManager" :len 1))
	 :writable #f
	 :enumerable #f)
      (js-bind! %this exports 'xmlAttributeSanitize
	 :value (js-make-function %this
		   (lambda (this attr id)
		      (xml-attribute-sanitize attr id))
		   (js-function-arity 2 0)
		   (js-function-info :name "xmlAttributeSanitize" :len 2))
	 :writable #f
	 :enumerable #f)
      (js-bind! %this exports 'xmlTreeCompare
	 :value (js-make-function %this
		   (lambda (this node be req)
		      (xml-tree-compare node
			 (if (eq? be (js-undefined))
			     (hop-xml-backend)
			     (hop-get-xml-backend
				(string->symbol (js-jsstring->string be))))
			 req))
		   (js-function-arity 3 0)
		   (js-function-info :name "xmlTreeCompare" :len 3))
	 :writable #f
	 :enumerable #f)
      (js-bind! %this exports 'xmlStringSanitize
	 :value (js-make-function %this
		   (lambda (this str)
		      (js-string->jsstring
			 (xml-string-sanitize (js-jsstring->string str))))
		   (js-function-arity 1 0)
		   (js-function-info :name "xmlStringSanitize" :len 1))
	 :writable #f
	 :enumerable #f)
      exports))

;*---------------------------------------------------------------------*/
;*    is-frozen? ...                                                   */
;*---------------------------------------------------------------------*/
(define (is-frozen? secm %this::JsGlobalObject)
   (with-access::JsGlobalObject %this (js-object)
      (let ((frozen (js-get js-object 'isFrozen %this)))
	 (js-call1 %this frozen js-object secm))))

;*---------------------------------------------------------------------*/
;*    js-security-manager->hop ...                                     */
;*---------------------------------------------------------------------*/
(define (js-security-manager->hop secm::JsObject %this)
   (if (not (is-frozen? secm %this))
       (error "security-manager" "security manager should be frozen" secm)
       (let* ((name (js-get secm 'name %this))
	      (xml-sanitize (js-get secm 'xmlSanitize %this))
	      (string-sanitize (js-get secm 'stringSanitize %this))
	      (inl-sanitize (js-get secm 'inlineSanitize %this))
	      (script-sanitize (js-get secm 'scriptSanitize %this))
	      (attr-sanitize (js-get secm 'attributeSanitize %this))
	      (runtime (js-get secm 'runtime %this))
	      (id (if (isa? name JsStringLiteral)
		      (js-jsstring->string name)
		      "security manager")))
	  (instantiate::security-manager
	     (name id)
	     (xml-sanitize (if (isa? xml-sanitize JsFunction)
			       (lambda (node be req)
				  (js-worker-exec (js-current-worker) id
				     (lambda ()
					(js-call3 %this xml-sanitize secm node be req))))
			       (lambda (node be req) node)))
	     (string-sanitize (if (isa? string-sanitize JsFunction)
				  (lambda (str)
				     (js-worker-exec (js-current-worker) id
					(lambda ()
					   (js-jsstring->string
					      (js-call1 %this string-sanitize secm
						 (js-string->jsstring str))))))
				  (lambda (str) str)))
	     (inline-sanitize (if (isa? inl-sanitize JsFunction)
				  (lambda (node)
				     (js-worker-exec (js-current-worker) id
					(lambda ()
					   (js-call1 %this inl-sanitize secm node))))
				  (lambda (node) node)))
	     (script-sanitize (if (isa? script-sanitize JsFunction)
				  (lambda (node)
				     (js-worker-exec (js-current-worker) id
					(lambda ()
					   (js-call1 %this script-sanitize secm node))))
				  (lambda (node) node)))
	     (attribute-sanitize (if (isa? attr-sanitize JsFunction)
				     (lambda (attr id)
					(js-worker-exec (js-current-worker) id
					   (lambda ()
					      (js-call2 %this script-sanitize secm attr id))))
				     (lambda (attr id) id)))
	     (runtime (if (isa? runtime JsArray)
			  (map! (lambda (el)
				   (if (isa? el JsStringLiteral)
				       (js-jsstring->string el)
				       (error "security-manager"
					  "wrong runtime" el)))
			     (jsarray->list runtime %this))
			  '()))))))
