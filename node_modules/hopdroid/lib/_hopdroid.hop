;*=====================================================================*/
;*    .../hop-3.4.0-pre1/node_modules/hopdroid/lib/_hopdroid.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Jul  6 06:15:53 2014                          */
;*    Last change :  Sun Nov 15 06:40:51 2020 (serrano)                */
;*    Copyright   :  2014-20 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    hopdroid bindings                                                */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _hopdroid

   (library hopscript hop hopwidget nodejs mail phone)

   (import (_simulator "_simulator.hop"))
   
   (cond-expand ((library hopdroid) (library phone)))
   (cond-expand ((library hopdroid) (library hopdroid)))

   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    pre-init-androidphone ...                                        */
;*---------------------------------------------------------------------*/
(define pre-init-androidphone
   (cons 'pre-init 'androidphone))

;*---------------------------------------------------------------------*/
;*    phone? ...                                                       */
;*---------------------------------------------------------------------*/
(define (phone? o)
   (when (isa? o JsWrapper)
      (with-access::JsWrapper o (obj)
	 (or (isa? obj phone) (eq? obj pre-init-androidphone)))))

;*---------------------------------------------------------------------*/
;*    wifi? ...                                                        */
;*---------------------------------------------------------------------*/
(define (wifi? o)
   (when (isa? o JsWrapper)
      (with-access::JsWrapper o (obj)
	 (isa? obj androidwifi))))

;*---------------------------------------------------------------------*/
;*    number->int64 ...                                                */
;*---------------------------------------------------------------------*/
(define (number->int64 n)
   (cond
      ((fixnum? n) (fixnum->llong n))
      ((flonum? n) (flonum->llong n))
      (else #l0)))

;*---------------------------------------------------------------------*/
;*    phones ...                                                       */
;*---------------------------------------------------------------------*/
(define phones '())

;*---------------------------------------------------------------------*/
;*    get-androidphone ...                                             */
;*---------------------------------------------------------------------*/
(define (get-androidphone app)
   (or (find (lambda (p)
		(with-access::androidphone p ((papp app) state)
		   (and (not (eq? state 'close)) (string=? papp app))))
	  phones)
       (let ((np (instantiate::androidphone (app app))))
	  (set! phones (cons np phones))
	  np)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (&with!
      
      (define (js-phone-alloc::JsWrapper %this constructor::JsFunction)
	 (with-access::JsGlobalObject %this (js-object)
	    (instantiateJsWrapper
	       (__proto__ phone-prototype)
	       (obj pre-init-androidphone)
	       (data (vector (js-current-worker) %this module #unspecified)))))

      (define (js-wifi-alloc::JsWrapper %this constructor::JsFunction)
	 (with-access::JsGlobalObject %this (js-object js-new-target)
	    (set! js-new-target constructor)
	    (instantiateJsWrapper
	       (__proto__ wifi-prototype)
	       (data #unspecified)
	       (obj #unspecified))))
      
      (define (not-a-phone this)
	 (js-raise-type-error %this
	    (format "not a phone (~a)" (typeof this)) this))

      (define (not-a-wifi this)
	 (js-raise-type-error %this
	    (format "not a wifi (~a)" (typeof this)) this))

      (define (bind-phone-getter! obj name getter)
	 (js-bind! %this obj name
	    :get (js-make-function %this
		    (lambda (this)
		       (if (phone? this)
			   (with-access::JsWrapper this (obj)
			      (js-string->jsstring (getter obj)))
			   (not-a-phone this)))
		    (js-function-arity 0 0)
		    (js-function-info :name (js-jsstring->string name) :len 0))
	    :writable #f
	    :enumerable #t))

      (define (phone-event->jsobject this evt e)
	 (with-access::event e (value)
	    (js-alist->jsobject
	       `((target . ,this)
		 (name . ,evt)
		 (value . ,(if (pair? value)
			       (js-vector->jsarray
				  (list->vector
				     (map (lambda (v)
					     (js-obj->jsobject v %this))
					value))
				  %this)
			       value)))
	       %this)))
      
      (define (add-phone-listener! this evt ltn)
	 (if (phone? this)
	     (with-access::JsWrapper this (obj)
		(let ((w (js-current-worker)))
		   (add-event-listener! obj (js-tostring evt %this)
		      (lambda (e)
			 (js-worker-push-thunk! w "listener"
			    (lambda ()
			       (with-handler
				  (lambda (exn)
				     (exception-notify exn)
				     (raise exn))
				  (let ((o (phone-event->jsobject this evt e)))
				     (js-call1 %this ltn this o)))))))))
	     (not-a-phone this)))

      (define vcard-cmap #f)

      (define photo-cmap #f)
      
      (define (get-vcard-cmap %this)
	 (unless vcard-cmap
	    (set! vcard-cmap
	       (js-strings->cmap
		  '#("familyname" "firstname" "emails" "phones" "addresses"
		     "id" "photo" "url" "color" "thumbnail")
		  %this)))
	 vcard-cmap)
      
      ;; phone-prototype
      (define phone-prototype
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((obj (js-new0 %this js-object)))
	       ;; plugin
	       (js-bind! %this obj (& "loadPlugin")
		  :value (js-make-function %this
			    (lambda (this plugin)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj data)
				      (cond-expand
					 ((library hopdroid)
					  (android-load-plugin obj
					     (js-tostring plugin %this)))
					 (else
					  (android-load-plugin obj
					     (js-tostring plugin %this)
					     data))))
				   (not-a-phone this)))
			    (js-function-arity 1 0)
			    (js-function-info :name "loadPlugin" :len 1))
		  :writable #f
		  :enumerable #t)
	       ;; sendCommand
	       (js-bind! %this obj (& "sendCommand")
		  :value (js-make-function %this
			    (lambda (this plugin cmd . args)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (apply android-send-command obj
					 plugin
					 (string-ref (js-tostring cmd %this) 0)
					 (map (lambda (o)
						 (js-jsobject->obj o %this))
					    args)))
				   (not-a-phone this)))
			    (js-function-arity 2 -1 'scheme)
			    (js-function-info :name "sendCommand" :len 2))
		  :writable #f
		  :enumerable #t)
	       ;; sendCommandForResult
	       (js-bind! %this obj (& "sendCommandForResult")
		  :value (js-make-function %this
			    (lambda (this plugin cmd . args)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (js-obj->jsobject
					 (apply android-send-command/result obj
					    plugin
					    (string-ref (js-tostring cmd %this) 0)
					    (map (lambda (o)
						    (js-jsobject->obj o %this))
					       args))
					 %this))
				   (not-a-phone this)))
			    (js-function-arity 2 -1 'scheme)
			    (js-function-info :name "sendCommandForResult" :len 2))
		  :writable #f
		  :enumerable #t)
	       ;; toString
	       (js-bind! %this obj (& "toString")
		  :value (js-make-function %this
			    (lambda (this)
			       (& "[Object Phone]"))
			    (js-function-arity 0 0)
			    (js-function-info :name "toString" :len 0)))
	       ;; reboot
	       (js-bind! %this obj (& "reboot")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (phone-reboot obj))
				   (not-a-phone this)))
			    (js-function-arity 0 0)
			    (js-function-info :name "reboot" :len 0))
		  :writable #f
		  :enumerable #t)
	       ;; name
	       (bind-phone-getter! obj (& "name")
		  (lambda (obj)
		     (with-access::androidphone obj (name) name)))
	       ;; sdk
	       (bind-phone-getter! obj (& "sdk")
		  (lambda (obj)
		     (with-access::androidphone obj (sdk) sdk)))
	       ;; sdkVersion
	       (bind-phone-getter! obj (& "sdkVersion")
		  (lambda (obj)
		     (with-access::androidphone obj (sdk-version) sdk-version)))
	       ;; model
	       (bind-phone-getter! obj (& "model")
		  (lambda (obj)
		     (with-access::androidphone obj (model) model)))
	       ;; product
	       (bind-phone-getter! obj (& "product")
		  (lambda (obj)
		     (with-access::androidphone obj (product) product)))
	       ;; home
	       (bind-phone-getter! obj (& "home")
		  (lambda (obj)
		     (with-access::androidphone obj (home) home)))
	       ;; externalStorageDirectory
	       (bind-phone-getter! obj (& "externalStorageDirectory")
		  (lambda (obj)
		     (with-access::androidphone obj (external-storage)
			external-storage)))
	       ;; applicationInfo
	       (js-bind! %this obj (& "applicationInfo")
		  :get (js-make-function %this
			    (lambda (this)
			       (with-access::JsWrapper this (obj)
				  (with-access::androidphone obj (application-info)
				     (js-plist->jsobject
					application-info %this))))
			    (js-function-arity 0 0)
			    (js-function-info :name "applicationInfo" :len 0))
		  :writable #t
		  :enumerable #t)
	       ;; config
	       (js-bind! %this obj (& "config")
		  :get (js-make-function %this
			    (lambda (this)
			       (with-access::JsWrapper this (obj)
				  (with-access::androidphone obj (configuration)
				     (js-plist->jsobject
					configuration %this))))
			    (js-function-arity 0 0)
			    (js-function-info :name "config" :len 0))
		  :writable #t
		  :enumerable #t)
	       ;; addEventListener
	       (js-bind! %this obj (& "addEventListener")
		  :value (js-make-function %this
			    add-phone-listener!
			    (js-function-arity 2 0)
			    (js-function-info :name "addEventListener" :len 2))
		  :writable #f
		  :enumerable #t)
	       ;; sms
	       (js-bind! %this obj (& "sendSms")
		  :value (js-make-function %this
			    (lambda (this no text)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (phone-sms-send obj
					 (js-tostring no %this)
					 (js-tostring text %this)))
				   (not-a-phone this)))
			    (js-function-arity 2 0)
			    (js-function-info :name "sendSms" :len 2))
		  :writable #f
		  :enumerable #t)
	       ;; dial
	       (js-bind! %this obj (& "dial")
		  :value (js-make-function %this
			    (lambda (this no)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (phone-call-dial obj
					 (js-tostring no %this)))
				   (not-a-phone this)))
			    (js-function-arity 1 0)
			    (js-function-info :name "dial" :len 1))
		  :writable #f
		  :enumerable #t)
	       ;; call
	       (js-bind! %this obj (& "placeCall")
		  :value (js-make-function %this
			    (lambda (this no window)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (phone-call-start obj
					 (js-tostring no %this)
					 (if (eq? window (js-undefined)) #t window)))
				   (not-a-phone this)))
			    (js-function-arity 2 0)
			    (js-function-info :name "placeCall" :len 2))
		  :writable #f
		  :enumerable #t)
	       ;; stopCall
	       (js-bind! %this obj (& "stopCall")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (phone-call-stop obj))
				   (not-a-phone this)))
			    (js-function-arity 0 0)
			    (js-function-info :name "stopCall" :len 0))
		  :writable #f
		  :enumerable #t)
	       ;; vibrate
	       (js-bind! %this obj (& "vibrate")
		  :value (js-make-function %this
			    (lambda (this frequency repetition)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (cond
					 ((js-array? frequency)
					  (if (and (fixnum? repetition)
						   (integer? repetition))
					      (phone-vibrate obj
						 (vector-map number->int64
						    (jsarray->vector frequency %this))
						 repetition)
					      (phone-vibrate obj
						 (vector-map number->int64
						    (jsarray->vector frequency %this))
						 1)))
					 ((integer? frequency)
					  (if (and (fixnum? repetition)
						   (integer? repetition))
					      (phone-vibrate obj
						 (number->int64 frequency)
						 repetition)
					      (phone-vibrate obj
						 frequency #s32:1)))
					 ((eq? frequency (js-undefined))
					  (phone-vibrate obj #unspecified 1))))
				   (not-a-phone this)))
			    (js-function-arity 2 0)
			    (js-function-info :name "vibrate" :len 2))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "vibrateStop")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (phone-vibrate-stop obj))
				   (not-a-phone this)))
			    (js-function-arity 0 0)
			    (js-function-info :name "vibrateStop" :len 0))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "contacts")
		  :value (js-make-function %this
			    (lambda (this projection selection)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (js-phone-contact-list obj
					 projection selection
					 (get-vcard-cmap %this) %this))
				   (not-a-phone this)))
			    (js-function-arity 2 0)
			    (js-function-info :name "contacts" :len 2))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "contact")
		  :value (js-make-function %this
			    (lambda (this id)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (js-phone-contact obj id
					 (get-vcard-cmap %this) %this))
				   (not-a-phone this)))
			    (js-function-arity 1 0)
			    (js-function-info :name "contact" :len 1))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "removeContact")
		  :value (js-make-function %this
			    (lambda (this id)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (phone-contact-remove! obj
					 (js-tostring id %this)))
				   (not-a-phone this)))
			    (js-function-arity 1 0)
			    (js-function-info :name "removeContact" :len 1))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "startIntent")
		  :value (js-make-function %this
			    (lambda (this action uri)
			       (if (phone? this)
				   (with-access::JsWrapper this (obj)
				      (android-start-intent obj
					 (js-tostring action %this)
					 (js-tostring uri %this)))
				   (not-a-phone this)))
			    (js-function-arity 2 0)
			    (js-function-info :name "startIntent" :len 2))
		  :writable #f
		  :enumerable #t)
	       ;; the prototype
	       obj)))

      ;; wifi-prototype
      (define wifi-prototype
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((obj (js-new0 %this js-object)))
	       ;; toString
	       (js-bind! %this obj (& "toString")
		  :value (js-make-function %this
			    (lambda (this)
			       (& "[Object Wifi]"))
			    (js-function-arity 0 0)
			    (js-function-info :name "toString" :len 0)))
	       ;; info
	       (js-bind! %this obj (& "info")
		  :get (js-make-function %this
			  (lambda (this)
			     (if (wifi? this)
				 (with-access::JsWrapper this (obj)
				    (with-access::androidwifi obj (info)
				       (js-plist->jsobject (cdr info) %this)))
				 (not-a-wifi this)))
			  (js-function-arity 0 0)
			  (js-function-info :name "info" :len 0))
		  :writable #f
		  :enumerable #t)
	       obj)))
      
      (define exports (js-get module (& "exports") %this))

      ;; js-phone-init
      (define (js-phone-init this opts)
	 ;; androidphone
	 (with-access::JsWrapper this (obj)
	    (if (js-object? opts)
		(let* ((app (js-get opts (& "app") %this))
		       (and (get-androidphone
			       (if (eq? app (js-undefined))
				   "hop"
				   (js-tostring app %this)))))
		   (set! obj and)
		   ;; plugin dir
		   (let ((plugdir (js-get opts (& "pluginDirectory") %this)))
		      (unless (eq? plugdir (js-undefined))
			 (with-access::JsWrapper this (data)
			    (vector-set! data 3 (js-tostring plugdir %this))))))
		(set! obj (get-androidphone "hop"))))
	 ;; simulator specific
	 (cond-expand
	    ((not (library hopdroid))
	     (set-simulated-phone! this)))
	 this)
	 
      ;; bind the module in the hopdroid scope
      (js-put! scope (& "module") module #f %this)
      
      ;; phone
      (letrec* ((js-phone-construct (lambda (this opts)
				       (js-phone-init
					  (if (phone? this)
					      this
					      (js-phone-alloc %this js-phone))
					  opts)))
		(js-phone (js-make-function %this
			     js-phone-construct
			     (js-function-arity 1 0)
			     (js-function-info :name "phone" :len 1)
			     :prototype phone-prototype
			     :alloc js-phone-alloc)))
	 (js-bind! %this exports (& "phone")
	    :value js-phone
	    :writable #f
	    :enumerable #t))

      ;; wifi
      (letrec* ((js-wifi-construct (lambda (this phone)
				      (with-access::JsGlobalObject %this (js-new-target)
					 (cond
					    ((not (phone? phone))
					     (not-a-phone phone))
					    ((eq? js-new-target (js-undefined))
					     (js-raise-type-error %this
						"hopdroid.wifi must be used as a constructor"
						this))
					    (else
					     (set! js-new-target (js-undefined))
					     (with-access::JsWrapper this (obj)
						(with-access::JsWrapper phone ((p obj))
						   (set! obj
						      (instantiate::androidwifi
							 (phone p))))))))))
		(js-wifi (js-make-function %this
			    js-wifi-construct
			    (js-function-arity 1 0)
			    (js-function-info :name "wifi" :len 1)
			    :prototype wifi-prototype
			    :alloc js-wifi-alloc)))
	 (js-bind! %this exports (& "wifi")
	    :value js-wifi
	    :writable #f
	    :enumerable #t))))

;*---------------------------------------------------------------------*/
;*    js-phone-contact-list ...                                        */
;*---------------------------------------------------------------------*/
(define (js-phone-contact-list::JsArray phone::phone projection selection
	   cmap %this::JsGlobalObject)
   (js-vector->jsarray
      (vector-map! (lambda (vcard)
		      (vcard->jsobject vcard cmap %this))
	 (list->vector
	    (phone-contact-list phone
	       (if (eq? projection (js-undefined))
		   ""
		   (js-tostring projection %this))
	       (if (eq? selection (js-undefined))
		   ""
		   (js-tostring selection %this)))))
      %this))

;*---------------------------------------------------------------------*/
;*    js-phone-contact ...                                             */
;*---------------------------------------------------------------------*/
(define (js-phone-contact phone::phone id cmap %this::JsGlobalObject)
   (let ((vc (phone-contact phone (js-tostring id %this))))
      (if vc (vcard->jsobject vc cmap %this) (js-undefined))))
   
;*---------------------------------------------------------------------*/
;*    vcard->jsobject ...                                              */
;*---------------------------------------------------------------------*/
(define (vcard->jsobject vcard cmap %this)
   
   (define (get-note key notes %this)
      (if (pair? notes)
	  (let ((c (assq key notes)))
	     (if (pair? c)
		 (js-obj->jsobject (cdr c) %this)
		 (js-undefined)))
	  (js-undefined)))

   (define (js-photo->jsobject photo %this)
      (if (pair? photo)
	  (js-plist->jsobject photo %this)
	  photo))

   (define (bbdb-addr->addr addr)
      (match-case addr
	 (#(?lbl (and (? pair?) ?addr) ?city ?pobox ?zip ?country)
	  `(label: ,lbl
	      address: ,(list->vector addr)
	      city: ,city
	      pobox: ,pobox
	      zip: ,zip
	      counter: ,country))
	 ((?lbl (and (? pair?) ?addr) ?city ?pobox ?zip ?country)
	  `(label: ,lbl
	      address: ,(list->vector addr)
	      city: ,city
	      pobox: ,pobox
	      zip: ,zip
	      counter: ,country))
	 (else
	  #f)))

   (define (plist-addr? addr)
      (and (pair? addr) (keyword? (car addr))))

   (define (js-addresses->jsobject addresses %this)
      (js-vector->jsarray
	 (list->vector
	    (map (lambda (addr)
		    (cond
		       ((plist-addr? addr)
			(js-plist->jsobject addr %this))
		       ((bbdb-addr->addr addr)
			=>
			(lambda (l) (js-plist->jsobject l %this)))
		       ((string? addr)
			(js-plist->jsobject
			   `(label: "default" :address ,(vector addr))
			   %this))
		       (else
			(js-undefined))))
	       addresses))
	 %this))
   
   (define (js-emails->jsobject emails %this)
      (js-vector->jsarray
	 (list->vector
	    (map (lambda (v)
		    (js-plist->jsobject
		       (if (string? v)
			   `(label: "default" :email ,v)
			   v)
		       %this))
	       emails))
	 %this))
   
   (define (js-phones->jsobject phones %this)
      (js-vector->jsarray
	 (list->vector
	    (map (lambda (v)
		    (js-plist->jsobject
		       (if (string? v)
			   `(label: "default" :number ,v)
			   v)
		       %this))
	       phones))
	 %this))
   
   (with-access::vcard vcard (id familyname firstname emails phones addresses photo notes x-thumbnail x-color)
      (js-object-literal-init!
	 (instantiateJsObject
	    (cmap cmap)
	    (__proto__ (js-object-proto %this))
	    (elements (vector
			 ;; familyname
			 (js-obj->jsobject familyname %this)
			 ;; firstname
			 (js-obj->jsobject firstname %this)
			 ;; emails
			 (js-emails->jsobject emails %this)
			 ;; phones
			 (js-phones->jsobject phones %this)
			 ;; addresses
			 (js-addresses->jsobject addresses %this)
			 ;; id
			 (js-obj->jsobject id %this)
			 ;; photo
			 (js-photo->jsobject photo %this)
			 ;; url
			 (get-note 'url notes %this)
			 ;; color
			 (js-obj->jsobject x-color %this)
			 ;; thumbnail
			 (js-photo->jsobject x-thumbnail %this)
			 ))))))

;*---------------------------------------------------------------------*/
;*    The module value                                                 */
;*---------------------------------------------------------------------*/
hopscript


