;*=====================================================================*/
;*    .../hop-3.4.0-pre1/node_modules/hopdroid/lib/_hopdroid.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Jul  6 06:15:53 2014                          */
;*    Last change :  Sun Nov 15 06:40:51 2020 (serrano)                */
;*    Copyright   :  2014-20 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    hopdroid bindings                                                */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _hopdroid

   (library hopscript hop hopwidget nodejs mail phone)

   (import (_simulator "_simulator.hop"))
   
   (cond-expand ((library hopdroid) (library phone)))
   (cond-expand ((library hopdroid) (library hopdroid)))

   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    phone? ...                                                       */
;*---------------------------------------------------------------------*/
(define (phone? o)
   (when (isa? o JsWrapper)
      (with-access::JsWrapper o (data)
	 (isa? data phone))))

;*---------------------------------------------------------------------*/
;*    wifi? ...                                                        */
;*---------------------------------------------------------------------*/
(define (wifi? o)
   (when (isa? o JsWrapper)
      (with-access::JsWrapper o (data)
	 (cond-expand
	    ((library hopdroid)
	     (isa? data androidwifi))
	    (else
	     (isa? data simulatedwifi))))))

;*---------------------------------------------------------------------*/
;*    number->int64 ...                                                */
;*---------------------------------------------------------------------*/
(define (number->int64 n)
   (cond
      ((fixnum? n) (fixnum->llong n))
      ((flonum? n) (flonum->llong n))
      (else #l0)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (&with!
      
      (define (js-phone-alloc::JsWrapper %this constructor::JsFunction)
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((phone (instantiateJsWrapper
			    (__proto__ phone-prototype)
			    (data (cond-expand
				     ((library hopdroid)
				      (instantiate::androidphone))
				     (else
				      (instantiate::simulatedphone
					 (%worker (js-current-worker))
					 (%this %this)))))
			    (obj #unspecified))))
	       (cond-expand
		  ((not (library hopdroid))
		   (set-simulated-phone! phone)))
	       phone)))

      (define (js-wifi-alloc::JsWrapper %this constructor::JsFunction)
	 (with-access::JsGlobalObject %this (js-object js-new-target)
	    (set! js-new-target constructor)
	    (instantiateJsWrapper
	       (__proto__ wifi-prototype)
	       (data #unspecified)
	       (obj #unspecified))))
      
      (define (not-a-phone this)
	 (js-raise-type-error %this
	    (format "not a phone (~a)" (typeof this)) this))

      (define (not-a-wifi this)
	 (js-raise-type-error %this
	    (format "not a wifi (~a)" (typeof this)) this))

      (define (bind-phone-getter! obj name getter)
	 (js-bind! %this obj name
	    :get (js-make-function %this
		    (lambda (this)
		       (if (phone? this)
			   (with-access::JsWrapper this (data)
			      (js-string->jsstring (getter data)))
			   (not-a-phone this)))
		    (js-function-arity 0 0)
		    (js-function-info :name (js-jsstring->string name) :len 0))
	    :writable #f
	    :enumerable #t))

      (define (phone-event->jsobject this evt e)
	 (with-access::event e (value)
	    (js-alist->jsobject
	       `((target . ,this)
		 (name . ,evt)
		 (value . ,(if (pair? value)
			       (js-vector->jsarray
				  (list->vector
				     (map (lambda (v)
					     (js-obj->jsobject v %this))
					value))
				  %this)
			       value)))
	       %this)))
      
      (define (add-phone-listener! this evt ltn)
	 (if (phone? this)
	     (with-access::JsWrapper this (data)
		(let ((w (js-current-worker)))
		   (add-event-listener! data (js-tostring evt %this)
		      (lambda (e)
			 (js-worker-push-thunk! w "listener"
			    (lambda ()
			       (with-handler
				  (lambda (exn)
				     (exception-notify exn)
				     (raise exn))
				  (let ((o (phone-event->jsobject this evt e)))
				     (js-call1 %this ltn this o)))))))))
	     (not-a-phone this)))

      (define vcard-cmap #f)

      (define (get-vcard-cmap %this)
	 (unless vcard-cmap
	    (set! vcard-cmap
	       (js-strings->cmap
		  '#("familyname" "firstname" "emails" "phones" "addresses"
		     "id" "url" "face")
		  %this)))
	 vcard-cmap)
      
      ;; phone-prototype
      (define phone-prototype
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((obj (js-new0 %this js-object)))
	       ;; toString
	       (js-bind! %this obj (& "toString")
		  :value (js-make-function %this
			    (lambda (this)
			       (& "[Object Phone]"))
			    (js-function-arity 0 0)
			    (js-function-info :name "toString" :len 0)))
	       ;; reboot
	       (js-bind! %this obj (& "reboot")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (phone? this)
				   (with-access::JsWrapper this (data)
				      (tprint "invoking reboot..."
					 (typeof data))
				      (phone-reboot data))
				   (not-a-phone this)))
			    (js-function-arity 0 0)
			    (js-function-info :name "reboot" :len 0))
		  :writable #f
		  :enumerable #t)
	       ;; sdk
	       (bind-phone-getter! obj (& "sdk")
		  (lambda (data)
		     (cond-expand
			((library hopdroid)
			 (with-access::androidphone data (sdk) sdk))
			(else
			 (with-access::simulatedphone data (sdk) sdk)))))
	       ;; model
	       (bind-phone-getter! obj (& "model")
		  (lambda (data)
		     (cond-expand
			((library hopdroid)
			 (with-access::androidphone data (model) model))
			(else
			 (with-access::simulatedphone data (model) model)))))
	       ;; product
	       (bind-phone-getter! obj (& "product")
		  (lambda (data)
		     (cond-expand
			((library hopdroid)
			 (with-access::androidphone data (product) product))
			(else
			 (with-access::simulatedphone data (product) product)))))
	       ;; home
	       (bind-phone-getter! obj (& "home")
		  (lambda (data)
		     (cond-expand
			((library hopdroid)
			 (with-access::androidphone data (home) home))
			(else
			 (with-access::simulatedphone data (home) home)))))
	       ;; externalStorageDirectory
	       (bind-phone-getter! obj (& "externalStorageDirectory")
		  (lambda (data)
		     (cond-expand
			((library hopdroid)
			 (with-access::androidphone data (external-storage)
			    external-storage))
			(else
			 (with-access::simulatedphone data (external-storage)
			    external-storage)))))
	       ;; applicationInfo
	       (js-bind! %this obj (& "applicationInfo")
		  :value (js-make-function %this
			    (lambda (data)
			       (js-plist->jsobject
				  (cond-expand
				     ((library hopdroid)
				      (with-access::androidphone data (application-info)
					 application-info))
				     (else
				      (with-access::simulatedphone data (application-info)
					 application-info)))
				  %this))
			    (js-function-arity 0 0)
			    (js-function-info :name "applicationInfo" :len 0))
		  :writable #t
		  :enumerable #t)
	       ;; addEventListener
	       (js-bind! %this obj (& "addEventListener")
		  :value (js-make-function %this
			    add-phone-listener!
			    (js-function-arity 2 0)
			    (js-function-info :name "addEventListener" :len 2))
		  :writable #f
		  :enumerable #t)
	       ;; sms
	       (js-bind! %this obj (& "sendSms")
		  :value (js-make-function %this
			    (lambda (this no text)
			       (if (phone? this)
				   (with-access::JsWrapper this (data)
				      (phone-sms-send data
					 (js-tostring no %this)
					 (js-tostring text %this)))
				   (not-a-phone this)))
			    (js-function-arity 2 0)
			    (js-function-info :name "sendSms" :len 2))
		  :writable #f
		  :enumerable #t)
	       ;; call
	       (js-bind! %this obj (& "placeCall")
		  :value (js-make-function %this
			    (lambda (this no window)
			       (if (phone? this)
				   (with-access::JsWrapper this (data)
				      (phone-call-start data
					 (js-tostring no %this)
					 (if (eq? window (js-undefined)) #f window)))
				   (not-a-phone this)))
			    (js-function-arity 2 0)
			    (js-function-info :name "placeCall" :len 2))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "stopCall")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (phone? this)
				   (with-access::JsWrapper this (data)
				      (phone-call-stop data))
				   (not-a-phone this)))
			    (js-function-arity 0 0)
			    (js-function-info :name "stopCall" :len 0))
		  :writable #f
		  :enumerable #t)
	       ;; vibrate
	       (js-bind! %this obj (& "vibrate")
		  :value (js-make-function %this
			    (lambda (this frequency repetition)
			       (if (phone? this)
				   (with-access::JsWrapper this (data)
				      (cond
					 ((js-array? frequency)
					  (if (and (fixnum? repetition)
						   (integer? repetition))
					      (phone-vibrate data
						 (vector-map number->int64
						    (jsarray->vector frequency %this))
						 repetition)
					      (phone-vibrate data
						 (vector-map number->int64
						    (jsarray->vector frequency %this))
						 1)))
					 ((integer? frequency)
					  (if (and (fixnum? repetition)
						   (integer? repetition))
					      (phone-vibrate data
						 (number->int64 frequency)
						 repetition)
					      (phone-vibrate data
						 frequency #s32:1)))
					 ((eq? frequency (js-undefined))
					  (phone-vibrate data #unspecified 1))))
				   (not-a-phone this)))
			    (js-function-arity 2 0)
			    (js-function-info :name "vibrate" :len 2))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "vibrateStop")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (phone? this)
				   (with-access::JsWrapper this (data)
				      (phone-vibrate-stop data))
				   (not-a-phone this)))
			    (js-function-arity 0 0)
			    (js-function-info :name "vibrateStop" :len 0))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "contacts")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (phone? this)
				   (with-access::JsWrapper this (data)
				      (js-phone-contact data
					 (get-vcard-cmap %this) %this))
				   (not-a-phone this)))
			    (js-function-arity 0 0)
			    (js-function-info :name "contacts" :len 0))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "removeContact")
		  :value (js-make-function %this
			    (lambda (this id)
			       (if (phone? this)
				   (with-access::JsWrapper this (data)
				      (phone-contact-remove! data
					 (js-tostring id %this)))
				   (not-a-phone this)))
			    (js-function-arity 1 0)
			    (js-function-info :name "removeContact" :len 1))
		  :writable #f
		  :enumerable #t)
	       ;; the prototype
	       obj)))

      ;; wifi-prototype
      (define wifi-prototype
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((obj (js-new0 %this js-object)))
	       ;; toString
	       (js-bind! %this obj (& "toString")
		  :value (js-make-function %this
			    (lambda (this)
			       (& "[Object Wifi]"))
			    (js-function-arity 0 0)
			    (js-function-info :name "toString" :len 0)))
	       ;; info
	       (js-bind! %this obj (& "info")
		  :get (js-make-function %this
			  (lambda (this)
			     (if (wifi? this)
				 (with-access::JsWrapper this (data)
				    (js-plist->jsobject
				       (cond-expand
					  ((library hopdroid)
					   (with-access::androidwifi data (info)
					      (cdr info)))
					  (else
					   (with-access::simulatedwifi data (info)
					      (cdr info))))
				       %this))
				 (not-a-wifi this)))
			  (js-function-arity 0 0)
			  (js-function-info :name "info" :len 0))
		  :writable #f
		  :enumerable #t)
	       obj)))
      
      (define exports (js-get module (& "exports") %this))
      
      ;; bind the module in the texinfo scope
      (js-put! scope (& "module") module #f %this)
      
      ;; phone
      (letrec* ((js-phone-construct (lambda (this)
				       (if (phone? this)
					   this
					   (js-phone-alloc %this js-phone))))
		(js-phone (js-make-function %this
			     js-phone-construct
			     (js-function-arity 0 0)
			     (js-function-info :name "phone" :len 0)
			     :prototype phone-prototype
			     :alloc js-phone-alloc)))
	 (js-bind! %this exports (& "phone")
	    :value js-phone
	    :writable #f
	    :enumerable #t))

      ;; wifi
      (letrec* ((js-wifi-construct (lambda (this phone)
				      (with-access::JsGlobalObject %this (js-new-target)
					 (cond
					    ((not (phone? phone))
					     (not-a-phone phone))
					    ((eq? js-new-target (js-undefined))
					     (js-raise-type-error %this
						"hopdroid.wifi must be used as a constructor"
						this))
					    (else
					     (set! js-new-target (js-undefined))
					     (with-access::JsWrapper this (data)
						(with-access::JsWrapper phone ((p data))
						   (set! data
						      (cond-expand
							 ((library hopdroid)
							  (instantiate::androidwifi
							     (phone p)))
							 (else
							  (instantiate::simulatedwifi
							     (phone p))))))))))))
		(js-wifi (js-make-function %this
			    js-wifi-construct
			    (js-function-arity 1 0)
			    (js-function-info :name "wifi" :len 1)
			    :prototype wifi-prototype
			    :alloc js-wifi-alloc)))
	 (js-bind! %this exports (& "wifi")
	    :value js-wifi
	    :writable #f
	    :enumerable #t))))

;*---------------------------------------------------------------------*/
;*    js-phone-contact ...                                             */
;*---------------------------------------------------------------------*/
(define (js-phone-contact::JsArray phone::phone vcard-cmap %this::JsGlobalObject)

   (define (get-note key notes)
      (if (pair? notes)
	  (let ((c (assq key notes)))
	     (if (pair? c)
		 (js-obj->jsobject (cdr c) %this)
		 (js-undefined)))
	  (js-undefined)))
   
   (define (vcard->jsobject vcard)
      (with-access::vcard vcard (familyname firstname emails phones addresses notes)
	 (js-object-literal-init!
	    (instantiateJsObject
	       (cmap vcard-cmap)
	       (__proto__ (js-object-proto %this))
	       (elements (vector
			    ;; familyname
			    (js-obj->jsobject familyname %this)
			    ;; firstname
			    (js-obj->jsobject firstname %this)
			    ;; emails
			    (js-vector->jsarray
			       (vector-map! (lambda (o)
					       (js-obj->jsobject o %this))
				  (list->vector emails))
			       %this)
			    ;; phones
			    (js-alist->jsobject phones %this)
			    ;; addresses
			    (js-alist->jsobject addresses %this)
			    ;; id
			    (get-note 'android-id notes)
			    ;; url
			    (get-note 'url notes)))))))

   (js-vector->jsarray
      (vector-map! vcard->jsobject (list->vector (phone-contact phone)))
      %this))

;*---------------------------------------------------------------------*/
;*    The module value                                                 */
;*---------------------------------------------------------------------*/
hopscript


