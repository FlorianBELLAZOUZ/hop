;*=====================================================================*/
;*    .../project/hop/hop/node_modules/hopdroid/lib/_hopdroid.hop      */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Jul  6 06:15:53 2014                          */
;*    Last change :  Wed May 20 17:13:26 2020 (serrano)                */
;*    Copyright   :  2014-20 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    hopdroid bindings                                                */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _texinfo

   (library hopscript hop hopwidget nodejs phone)

   (cond-expand ((library hopdroid) (library hopdroid)))
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    phone-sig ...                                                    */
;*---------------------------------------------------------------------*/
(define phone-sig (cons 1 2))

;*---------------------------------------------------------------------*/
;*    phone? ...                                                       */
;*---------------------------------------------------------------------*/
(define (phone? o)
   (cond-expand
      ((library hopdroid)
       (when (isa? o JsWrapper)
	  (with-access::JsWrapper o (data)
	     (isa? data androidphone))))
      (else
       #f)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (&with!
      
      (define exports (js-get module (& "exports") %this))
      
      ;; bind the module in the texinfo scope
      (js-put! scope (& "module") module #f %this)
      
      (define (bind-phone-getter! obj name getter)
	 (js-bind! %this obj name
	    :get (js-make-function %this
		    (lambda (this)
		       (if (phone? this)
			   (with-access::JsWrapper this (data)
			      (js-string->jsstring (getter data)))
			   (js-undefined)))
		    0 name)
	    :writable #f
	    :enumerable #t))
      
      ;; phone-prototype
      (define phone-prototype
	 (with-access::JsGlobalObject %this (js-object)
	    (cond-expand
	       ((library hopdroid)
		(let ((obj (js-new0 %this js-object)))
		   ;; toString
		   (js-bind! %this obj (& "toString")
		      :value (js-make-function %this
				(lambda (this)
				   (& "[Object Phone]"))
				0 (& "toString")))
		   ;; sdk
		   (bind-phone-getter! obj (& "sdk")
		      (lambda (data)
			 (with-access::androidphone data (sdk) sdk)))
		   ;; model
		   (bind-phone-getter! obj (& "model")
		      (lambda (data)
			 (with-access::androidphone data (model) model)))
		   ;; product
		   (bind-phone-getter! obj (& "product")
		      (lambda (data)
			 (with-access::androidphone data (product) product)))
		   ;; addEventListener
		   (js-bind! %this obj (& "addEventListener")
		      :value (js-make-function %this
				(lambda (this evt ltn)
				   (when (phone? this)
				      (with-access::JsWrapper this (data)
					 (let ((w (js-current-worker)))
					    (add-event-listener! data
						  (js-tostring evt %this)
					       (lambda (e)
						  (with-access::event e (value)
						     (js-worker-push-thunk! w "listener"
							(lambda ()
							   (with-handler
							      (lambda (exn)
								 (exception-notify exn)
								 (raise exn))
							      (let ((o (js-alist->jsobject
									  `((target . ,this)
									    (name . ,evt)
									    (value . ,(if (pair? value)
											  (js-vector->jsarray
											     (list->vector
												(map (lambda (v)
													(js-obj->jsobject v %this))
												   value))
											     %this)
											  value)))
									  %this)))
								 (js-call1 %this ltn this o))))))))))))
				2 (& "addEventListener"))
		      :writable #f
		      :enumerable #t)
		   ;; sms
		   (js-bind! %this obj (& "smsSend")
		      :value (js-make-function %this
				(lambda (this no text)
				   (if (phone? this)
				       (with-access::JsWrapper this (data)
					  (phone-sms-send data
					     (js-tostring no %this)
					     (js-tostring text %this)))))
				2 (& "smsSend"))
		      :writable #f
		      :enumerable #t)
		   ;; the prototype
		   obj))
	       (else
		(js-new0 %this js-object)))))

      (define (js-phone-alloc::JsWrapper %this constructor::JsFunction)
	 (with-access::JsGlobalObject %this (js-object)
	    (instantiateJsWrapper
	       (__proto__ phone-prototype)
	       (data (cond-expand
			((library hopdroid)
			 (instantiate::androidphone))
			(else
			 (js-undefined))))
	       (obj phone-sig))))

      ;; phone
      (letrec* ((js-phone-construct (lambda (this)
				       (if (phone? this)
					   this
					   (js-phone-alloc %this js-phone))))
		(js-phone (js-make-function %this
			     js-phone-construct
			     0 (& "phone")
			     :prototype phone-prototype
			     :alloc js-phone-alloc
			     :construct js-phone-construct)))
	 (js-bind! %this exports (& "phone")
	    :value js-phone
	    :writable #f
	    :enumerable #t))))

hopscript
