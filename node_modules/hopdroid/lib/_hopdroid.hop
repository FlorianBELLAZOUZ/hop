;*=====================================================================*/
;*    .../project/hop/hop/node_modules/hopdroid/lib/_hopdroid.hop      */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Jul  6 06:15:53 2014                          */
;*    Last change :  Fri May 22 06:35:33 2020 (serrano)                */
;*    Copyright   :  2014-20 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    hopdroid bindings                                                */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _texinfo

   (library hopscript hop hopwidget nodejs)

   (cond-expand ((library hopdroid) (library phone)))
   (cond-expand ((library hopdroid) (library hopdroid)))

   (static (class simulatedphone
	      (%this read-only)
	      (%worker read-only)
	      (events::pair-nil (default '()))
	      (listeners::pair-nil (default '()))))
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    phone-sig ...                                                    */
;*---------------------------------------------------------------------*/
(define phone-sig (cons 1 2))

;*---------------------------------------------------------------------*/
;*    phone-simulated ...                                              */
;*---------------------------------------------------------------------*/
(define phone-simulated #f)

;*---------------------------------------------------------------------*/
;*    phone? ...                                                       */
;*---------------------------------------------------------------------*/
(define (phone? o)
   (when (isa? o JsWrapper)
      (with-access::JsWrapper o (data)
	 (cond-expand
	    ((library hopdroid)
	     (isa? data androidphone))
	    (else
	     (isa? data simulatedphone))))))

;*---------------------------------------------------------------------*/
;*    number->int64 ...                                                */
;*---------------------------------------------------------------------*/
(define (number->int64 n)
   (cond
      ((fixnum? n) (fixnum->llong n))
      ((flonum? n) (flonum->llong n))
      (else #l0)))

;*---------------------------------------------------------------------*/
;*    simulator-trigger-event ...                                      */
;*---------------------------------------------------------------------*/
(define (simulator-trigger-event this::JsWrapper event . vals)
   (cond-expand
      ((library hopdroid)
       #unspecified)
      (else
       (with-access::JsWrapper this (data)
	  (with-access::simulatedphone data (events)
	     (set! events (cons (cons event vals) events)))))))

;*---------------------------------------------------------------------*/
;*    add-event-listener! ::simulatedphone ...                         */
;*---------------------------------------------------------------------*/
(define-method (add-event-listener! this::simulatedphone event proc . capture)
   (with-access::simulatedphone this (listeners)
      (set! listeners (cons (cons event proc) listeners))))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (&with!
      
      (define (js-phone-alloc::JsWrapper %this constructor::JsFunction)
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((phone (instantiateJsWrapper
			    (__proto__ phone-prototype)
			    (data (cond-expand
				     ((library hopdroid)
				      (instantiate::androidphone))
				     (else
				      (instantiate::simulatedphone
					 (%worker (js-current-worker))
					 (%this %this)))))
			    (obj phone-sig))))
	       (cond-expand
		  ((not (library hopdroid))
		   (set! phone-simulated phone)))
	       phone)))
      
      (define (not-a-phone this)
	 (js-raise-type-error %this "not a phone" this))
      
      (define (bind-phone-getter! obj name getter)
	 (js-bind! %this obj name
	    :get (js-make-function %this
		    (lambda (this)
		       (if (phone? this)
			   (with-access::JsWrapper this (data)
			      (js-string->jsstring (getter data)))
			   (not-a-phone this)))
		    0 name)
	    :writable #f
	    :enumerable #t))
      
      ;; phone-prototype
      (define phone-prototype
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((obj (js-new0 %this js-object)))
	       ;; toString
	       (js-bind! %this obj (& "toString")
		  :value (js-make-function %this
			    (lambda (this)
			       (& "[Object Phone]"))
			    0 (& "toString")))
	       ;; sdk
	       (bind-phone-getter! obj (& "sdk")
		  (lambda (data)
		     (cond-expand
			((library hopdroid)
			 (with-access::androidphone data (sdk) sdk))
			(else
			 "0"))))
	       ;; model
	       (bind-phone-getter! obj (& "model")
		  (lambda (data)
		     (cond-expand
			((library hopdroid)
			 (with-access::androidphone data (model) model))
			(else
			 "hop"))))
	       ;; product
	       (bind-phone-getter! obj (& "product")
		  (lambda (data)
		     (cond-expand
			((library hopdroid)
			 (with-access::androidphone data (product) product))
			(else
			 (string-append "hop " (hop-version))))))
	       ;; addEventListener
	       (js-bind! %this obj (& "addEventListener")
		  :value (js-make-function %this
			    (lambda (this evt ltn)
			       (if (phone? this)
				   (with-access::JsWrapper this (data)
				      (let ((w (js-current-worker)))
					 (add-event-listener! data
					       (js-tostring evt %this)
					    (lambda (e)
					       (with-access::event e (value)
						  (js-worker-push-thunk! w "listener"
						     (lambda ()
							(with-handler
							   (lambda (exn)
							      (exception-notify exn)
							      (raise exn))
							   (let ((o (js-alist->jsobject
								       `((target . ,this)
									 (name . ,evt)
									 (value . ,(if (pair? value)
										       (js-vector->jsarray
											  (list->vector
											     (map (lambda (v)
												     (js-obj->jsobject v %this))
												value))
											  %this)
										       value)))
								       %this)))
							      (js-call1 %this ltn this o))))))))))
				   (not-a-phone this)))
			    2 (& "addEventListener"))
		  :writable #f
		  :enumerable #t)
	       ;; sms
	       (js-bind! %this obj (& "sendSms")
		  :value (js-make-function %this
			    (lambda (this no text)
			       (if (phone? this)
				   (cond-expand
				      ((library hopdroid)
				       (with-access::JsWrapper this (data)
					  (phone-sms-send data
					     (js-tostring no %this)
					     (js-tostring text %this))))
				      (else
				       (simulator-trigger-event this
					  "sms-sent"
					  (js-tostring no %this)
					  (js-tostring text %this)
					  %this)))
				   (not-a-phone this)))
			    2 (& "sendSms"))
		  :writable #f
		  :enumerable #t)
	       ;; call
	       (js-bind! %this obj (& "placeCall")
		  :value (js-make-function %this
			    (lambda (this no window)
			       (if (phone? this)
				   (cond-expand
				      ((library hopdroid)
				       (with-access::JsWrapper this (data)
					  (phone-call-start data
					     (js-tostring no %this)
					     (if (eq? window (js-undefined)) #f window))))
				      (else
				       (js-undefined)))
				   (not-a-phone this)))
			    2 (& "placeCall"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "stopCall")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (phone? this)
				   (cond-expand
				      ((library hopdroid)
				       (with-access::JsWrapper this (data)
					  (phone-call-stop data)))
				      (else
				       (js-undefined)))
				   (not-a-phone this)))
			    0 (& "stopCall"))
		  :writable #f
		  :enumerable #t)
	       ;; vibrate
	       (js-bind! %this obj (& "vibrate")
		  :value (js-make-function %this
			    (lambda (this frequency repetition)
			       (if (phone? this)
				   (cond-expand
				      ((library hopdroid)
				       (with-access::JsWrapper this (data)
					  (cond
					     ((js-array? frequency)
					      (if (and (fixnum? repetition) (integer? repetition))
						  (phone-vibrate data
						     (vector-map number->int64
							(jsarray->vector frequency %this))
						     repetition)
						  (phone-vibrate data
						     (vector-map number->int64
							(jsarray->vector frequency %this))
						     1)))
					     ((integer? frequency)
					      (if (and (fixnum? repetition) (integer? repetition))
						  (phone-vibrate data (number->int64 frequency)
						     repetition)
						  (phone-vibrate data frequency #s32:1)))
					     ((eq? frequency (js-undefined))
					      (phone-vibrate data #unspecified 1)))))
				      (else
				       (js-undefined)))
				   (not-a-phone this)))
			    2 (& "vibrate"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "vibrateStop")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (phone? this)
				   (cond-expand
				      ((library hopdroid)
				       (with-access::JsWrapper this (data)
					  (phone-vibrate-stop data)))
				      (else
				       (js-undefined)))
				   (not-a-phone this)))
			    2 (& "vibrateStop"))
		  :writable #f
		  :enumerable #t)
	       ;; the prototype
	       obj)))
      
      (define exports (js-get module (& "exports") %this))
      
      ;; bind the module in the texinfo scope
      (js-put! scope (& "module") module #f %this)
      
      ;; phone
      (letrec* ((js-phone-construct (lambda (this)
				       (if (phone? this)
					   this
					   (js-phone-alloc %this js-phone))))
		(js-phone (js-make-function %this
			     js-phone-construct
			     0 (& "phone")
			     :prototype phone-prototype
			     :alloc js-phone-alloc
			     :construct js-phone-construct)))
	 (js-bind! %this exports (& "phone")
	    :value js-phone
	    :writable #f
	    :enumerable #t))))

;*---------------------------------------------------------------------*/
;*    hopdroid/simulator ...                                           */
;*---------------------------------------------------------------------*/
(define-service (hopdroid/simulator)
   (if phone-simulated
       (with-access::JsWrapper phone-simulated (data)
	  (with-access::simulatedphone data (%this %worker)
	     (js-worker-exec %worker "hopdroid/simulator" #t
		(lambda ()
		   (<HTML>
		      (<H1> (js-tostring (js-get phone-simulated (js-string->jsstring "product") %this) %this))
		      (js-tostring (js-get phone-simulated (js-string->jsstring "model") %this) %this)
		      " - "
		      (js-tostring (js-get phone-simulated (js-string->jsstring "sdk") %this) %this))))))
       (<HTML>
	  "no simulated phone")))
   

hopscript
