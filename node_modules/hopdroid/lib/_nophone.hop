;*=====================================================================*/
;*    .../project/hop/hop/node_modules/hopdroid/lib/_nophone.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  manuel serrano                                    */
;*    Creation    :  Mon Nov 30 07:29:00 2020                          */
;*    Last change :  Tue Jan 19 08:13:38 2021 (serrano)                */
;*    Copyright   :  2020-21 manuel serrano                            */
;*    -------------------------------------------------------------    */
;*    Nophone phone (fake phones for PC executions)                    */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _nophone
   
   (library hopscript hop hopwidget nodejs mail phone)
   
   (cond-expand ((library hopdroid) (library phone)))
   (cond-expand ((library hopdroid) (library hopdroid)))
   
   (cond-expand
      ((not (library hopdroid))
       (export
	  (class androidphone::phone
	     ;; this class should be kept as much as possible
	     ;; in sync with the definition of
	     ;;   arch/android/hopdroid/lib/phone.scm.in
	     (app::bstring read-only (default "simulation"))
	     (state (default 'running))
	     (name::bstring read-only (default "hop"))
	     (sdk::bstring read-only (default (hop-version)))
	     (sdk-version::long read-only (default 21))
	     (model::bstring read-only (default "simulator"))
	     (product::bstring read-only (default "hop"))
	     (protocol::byte read-only (default 0))
	     (home::bstring read-only (default (getenv "HOME")))
	     (external-storage::bstring read-only (default "/tmp"))
	     (application-info::pair read-only (default '(class-name: "simulator" data-dir: "/tmp")))
	     (configuration::pair read-only (default '(theme: "default")))
	     (initid::int read-only (default 0)))
	  
	  (class androidevent::event)
	  
	  (generic android-start-activity ::androidphone ::bstring ::bstring . opts)
	  (generic android-load-plugin::int ::androidphone ::bstring #!optional data)
	  
	  (generic android-send-command ::androidphone ::int . args)
	  (generic android-send-command/result ::androidphone ::int . args))))
   
   (export
      
      (class nophone::androidphone
	 (events::pair-nil (default '()))
	 (listeners::pair-nil (default '()))
	 (%plugins::vector (default '#()))
	 (%emit::procedure (default (lambda (event val) #f))))
      
      (class androidwifi
	 (phone read-only)
	 (info read-only
	    (get (lambda (o)
		    '(wifi
		      ssid: "dummy"
		      ip: "127.0.0.1"
		      mac: "20:12:34:34:32:00"
		      speed: "1Mbps"
		      rxspeed: 1)))))))

;*---------------------------------------------------------------------*/
;*    compatibility kit                                                */
;*---------------------------------------------------------------------*/
(cond-expand
   ((not (library hopdroid))
;;;
(define-generic (android-start-activity phone::androidphone action::bstring uri::bstring . opts))
(define-generic (android-load-plugin::int phone::androidphone name::bstring #!optional data))
(define-generic (android-send-command phone::androidphone plugin::int . args))
(define-generic (android-send-command/result phone::androidphone plugin::int . args))

))
    
;*---------------------------------------------------------------------*/
;*    phone-init ::nophone ...                                         */
;*---------------------------------------------------------------------*/
(define-method (phone-init p::nophone)
   p)

;*---------------------------------------------------------------------*/
;*    android-plugin ...                                               */
;*---------------------------------------------------------------------*/
(define-struct android-plugin in out pin pout)

;*---------------------------------------------------------------------*/
;*    android-load-plugin ...                                          */
;*---------------------------------------------------------------------*/
(define-method (android-load-plugin p::nophone name #!optional data)
   
   (define (load-plugin phone name)
      (multiple-value-bind (in out)
	 (open-pipes name)
	 (multiple-value-bind (pin pout)
	    (open-pipes name)
	    (let ((plugin (hop-load name)))
	       (with-access::nophone p (%emit)
		  (plugin phone in pout %emit)
		  (android-plugin in out pin pout))))))

   (define (load-plugin-js path)
      (let ((name (string-append path ".js")))
	 (when (file-exists? name)
	    (let ((%worker (vector-ref data 0))
		  (%this (vector-ref data 1))
		  (%module (vector-ref data 2)))
	       ((nodejs-require %worker %this %module "hopscript")
		(js-undefined)
		name)))))
   
   (define (load-plugin-hop path)
      (let ((name (string-append path ".hop")))
	 (when (file-exists? name)
	    (with-access::nophone p (%plugins)
	       (set! %plugins
		  (vector-append %plugins (vector (load-plugin p name))))
	       (-fx (vector-length %plugins) 1)))))

   (let ((plugindir (vector-ref data 3)))
      (if (eq? plugindir (js-undefined))
	  (error "android-load-plugin" "Not plugin dir for phone" p)
	  (let* ((path (make-file-name plugindir
			  (string-replace name #\. (file-separator)))))
	     (or (load-plugin-js path)
		 (load-plugin-hop path)
		 (error "android-load-plugin" (format "Cannot load plugin ~s" name) p))))))

;*---------------------------------------------------------------------*/
;*    android-start-activity ...                                       */
;*---------------------------------------------------------------------*/
(define-method (android-start-activity p::nophone action::bstring uri::bstring . opts)
   #f)

;*---------------------------------------------------------------------*/
;*    android-send-command ...                                         */
;*---------------------------------------------------------------------*/
(define-method (android-send-command p::nophone plugin::int . args)
   (with-access::nophone p (%plugins)
      (let* ((p (vector-ref %plugins plugin))
	     (out (android-plugin-out p)))
	 (display (car args) out)
	 (for-each (lambda (a) (write a out)) (cdr args))
	 (flush-output-port out))))

;*---------------------------------------------------------------------*/
;*    android-send-command/result ...                                  */
;*---------------------------------------------------------------------*/
(define-method (android-send-command/result p::nophone plugin::int . args)
   (with-access::nophone p (%plugins)
      (let* ((p (vector-ref %plugins plugin))
	     (out (android-plugin-out p))
	     (pin (android-plugin-pin p)))
	 (display (car args) out)
	 (for-each (lambda (a) (write a out)) (cdr args))
	 (flush-output-port out)
	 (read pin))))

;*---------------------------------------------------------------------*/
;*    phone-init ::nophone ...                                         */
;*---------------------------------------------------------------------*/
(define-method (phone-init o::nophone)
   o)

;*---------------------------------------------------------------------*/
;*    phone-reboot ::nophone ...                                       */
;*---------------------------------------------------------------------*/
(define-method (phone-reboot o::nophone)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-contact-list ::nophone ...                                 */
;*---------------------------------------------------------------------*/
(define-method (phone-contact-list::pair-nil this::nophone #!optional projection selection)
   '())

;*---------------------------------------------------------------------*/
;*    phone-contact ::nophone ...                                      */
;*---------------------------------------------------------------------*/
(define-method (phone-contact this::nophone id)
   #f)

;*---------------------------------------------------------------------*/
;*    phone-contact-remove! ::nophone ...                              */
;*---------------------------------------------------------------------*/
(define-method (phone-contact-remove! this::nophone id)
   #f)

;*---------------------------------------------------------------------*/
;*    phone-sms-send ::nophone ...                                     */
;*---------------------------------------------------------------------*/
(define-method (phone-sms-send this::nophone no text)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-call-dial ::nophone ...                                    */
;*---------------------------------------------------------------------*/
(define-method (phone-call-dial this::nophone no)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-call-start ::nophone ...                                   */
;*---------------------------------------------------------------------*/
(define-method (phone-call-start this::nophone no #!optional window)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-call-stop ::nophone ...                                    */
;*---------------------------------------------------------------------*/
(define-method (phone-call-stop this::nophone)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-vibrate ::nophone ...                                      */
;*---------------------------------------------------------------------*/
(define-method (phone-vibrate this::nophone freqs rep)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-vibrate-stop ::nophone ...                                 */
;*---------------------------------------------------------------------*/
(define-method (phone-vibrate-stop this::nophone)
   #t)

;*---------------------------------------------------------------------*/
;*    add-event-listener! ::nophone ...                                */
;*---------------------------------------------------------------------*/
(define-method (add-event-listener! p::nophone event proc . capture)
   #f)

;*---------------------------------------------------------------------*/
;*    remove-event-listener! ...                                       */
;*---------------------------------------------------------------------*/
(define-method (remove-event-listener! p::nophone event proc . capture)
   #f)
