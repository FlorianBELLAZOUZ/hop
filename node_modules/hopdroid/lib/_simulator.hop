;*=====================================================================*/
;*    .../project/hop/hop/node_modules/hopdroid/lib/_simulator.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  manuel serrano                                    */
;*    Creation    :  Mon Nov 30 07:29:00 2020                          */
;*    Last change :  Mon Nov 30 07:29:01 2020 (serrano)                */
;*    Copyright   :  2020 manuel serrano                               */
;*    -------------------------------------------------------------    */
;*    Simulated phone (for debug)                                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The directives                                                   */
;*---------------------------------------------------------------------*/
(directives
   
   (static (class simulatedphone::phone
	      (%this read-only)
	      (%worker read-only)
	      (events::pair-nil (default '()))
	      (listeners::pair-nil (default '()))
	      (sdk::bstring read-only (default (hop-version)))
	      (model::bstring read-only (default "simulator"))
	      (product::bstring read-only (default "hop")))
	   
	   (class simulatedwifi
	      (phone read-only)
	      (info read-only
		 (get (lambda (o)
			 (wifi ssid: "dummy" ip: "127.0.0.1")))))
	   
	   (get-simulated-phone)))

;*---------------------------------------------------------------------*/
;*    phone-simulated ...                                              */
;*---------------------------------------------------------------------*/
(define phone-simulated #f)

;*---------------------------------------------------------------------*/
;*    get-simulated-phone ...                                          */
;*---------------------------------------------------------------------*/
(define (get-simulated-phone)
   phone-simulated)

;*---------------------------------------------------------------------*/
;*    set-simulated-phone! ...                                         */
;*---------------------------------------------------------------------*/
(define (set-simulated-phone! phone)
   (set! phone-simulated phone))

;*---------------------------------------------------------------------*/
;*    phone-init ::simulatedphone ...                                  */
;*---------------------------------------------------------------------*/
(define-method (phone-init o::simulatedphone)
   o)

;*---------------------------------------------------------------------*/
;*    phone-reboot ::simulatedphone ...                                */
;*---------------------------------------------------------------------*/
(define-method (phone-reboot o::simulatedphone)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-contact ::simulatedphone ...                               */
;*---------------------------------------------------------------------*/
(define-method (phone-contact::pair-nil this::simulatedphone)
   simulated-contacts)

;*---------------------------------------------------------------------*/
;*    phone-contact-remove! ::simulatedphone ...                       */
;*---------------------------------------------------------------------*/
(define-method (phone-contact-remove! this::simulatedphone id)
   (set! simulated-contacts
      (filter! (lambda (vc)
		  (with-access::vcard vc (notes)
		     (let ((cid (assq 'android-id notes)))
			(or (not cid) (not (string=? (cdr cid) id))))))
	 simulated-contacts)))
   
;*---------------------------------------------------------------------*/
;*    phone-sms-send ::simulatedphone ...                              */
;*---------------------------------------------------------------------*/
(define-method (phone-sms-send this::simulatedphone no text)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-call-start ::simulatedphone ...                            */
;*---------------------------------------------------------------------*/
(define-method (phone-call-start this::simulatedphone no opt)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-call-stop ::simulatedphone ...                             */
;*---------------------------------------------------------------------*/
(define-method (phone-call-stop this::simulatedphone)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-vibrate ::simulatedphone ...                               */
;*---------------------------------------------------------------------*/
(define-method (phone-vibrate this::simulatedphone freqs rep)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-vibrate-stop ::simulatedphone ...                          */
;*---------------------------------------------------------------------*/
(define-method (phone-vibrate-stop this::simulatedphone)
   #t)

;*---------------------------------------------------------------------*/
;*    simulated-contacts ...                                           */
;*    -------------------------------------------------------------    */
;*    Must be a pre-allocated list to accomodate possible              */
;*    side effects and the dummy contact database.                     */
;*---------------------------------------------------------------------*/
(define simulated-contacts
   (list (instantiate::vcard
	    (familyname "Bar")
	    (firstname "Joe")
	    (emails '("joe@bar.org"))
	    (phones '((default "1111-111-11")))
	    (addresses '())
	    (notes '((android-id . "34"))))))

;*---------------------------------------------------------------------*/
;*    simulator-trigger-event ...                                      */
;*---------------------------------------------------------------------*/
(define (simulator-trigger-event this::JsWrapper event . vals)
   (cond-expand
      ((library hopdroid)
       #unspecified)
      (else
       (with-access::JsWrapper this (data)
	  (with-access::simulatedphone data (events)
	     (set! events (cons (cons event vals) events)))))))

;*---------------------------------------------------------------------*/
;*    add-event-listener! ::simulatedphone ...                         */
;*---------------------------------------------------------------------*/
(define-method (add-event-listener! this::simulatedphone event proc . capture)
   (with-access::simulatedphone this (listeners)
      (set! listeners (cons (cons event proc) listeners))))

