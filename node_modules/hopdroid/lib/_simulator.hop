;*=====================================================================*/
;*    .../project/hop/hop/node_modules/hopdroid/lib/_simulator.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  manuel serrano                                    */
;*    Creation    :  Mon Nov 30 07:29:00 2020                          */
;*    Last change :  Mon Nov 30 07:29:01 2020 (serrano)                */
;*    Copyright   :  2020 manuel serrano                               */
;*    -------------------------------------------------------------    */
;*    Simulated phone (for debug)                                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _simulator

   (library hopscript hop hopwidget nodejs mail phone)
   
   (cond-expand
      ((not (library hopdroid))
       (export

	  (class androidphone::phone
	     (events::pair-nil (default '()))
	     (listeners::pair-nil (default '()))
	     (name::bstring read-only (default "hop"))
	     (app::bstring read-only (default "simulation"))
	     (state (default 'running))
	     (sdk::bstring read-only (default (hop-version)))
	     (sdk-version::long read-only (default 21))
	     (model::bstring read-only (default "simulator"))
	     (product::bstring read-only (default "hop"))
	     (home::bstring read-only (default (getenv "HOME")))
	     (external-storage::bstring read-only (default "/tmp"))
	     (application-info::pair read-only (default '(class-name: "simulator" data-dir: "/tmp")))
	     (configuration::pair read-only (default '(theme: "default")))
	     (%plugins::vector (default '#())))
	  
	  (class androidwifi
	     (phone read-only)
	     (info read-only
		(get (lambda (o)
			'(wifi
			  ssid: "dummy"
			  ip: "127.0.0.1"
			  mac: "20:12:34:34:32:00"
			  speed: "1Mbps"
			  rxspeed: 1)))))

	  (android-load-plugin ::androidphone ::bstring ::vector)
	  (android-send-command ::androidphone ::int . args)
	  (android-send-command/result ::androidphone ::int . args)
	  
	  (get-simulated-phone)
	  (set-simulated-phone! ::obj)))))

(cond-expand
   ((not (library hopdroid))
;;;

;*---------------------------------------------------------------------*/
;*    phone-simulated ...                                              */
;*---------------------------------------------------------------------*/
(define phone-simulated #f)

;*---------------------------------------------------------------------*/
;*    android-plugin ...                                               */
;*---------------------------------------------------------------------*/
(define-struct android-plugin in out pin pout)

;*---------------------------------------------------------------------*/
;*    android-load-plugin ...                                          */
;*---------------------------------------------------------------------*/
(define (android-load-plugin p::androidphone name data)
   
   (define (load-plugin-js path)
      (let ((name (string-append path ".js")))
	 (when (file-exists? name)
	    (let ((%worker (vector-ref data 0))
		  (%this (vector-ref data 1))
		  (%module (vector-ref data 2)))
	       ((nodejs-require %worker %this %module "hopscript")
		(js-undefined)
		name)))))
   
   (define (load-plugin-hop path)
      (let ((name (string-append path ".hop")))
	 (when (file-exists? name)
	    (with-access::androidphone p (%plugins)
	       (set! %plugins
		  (vector-append %plugins (vector (load-plugin p name))))
	       (-fx (vector-length %plugins) 1)))))

   (let ((plugindir (vector-ref data 3)))
      (if (eq? plugindir (js-undefined))
	  (error "android-load-plugin" "Not plugin dir for phone" p)
	  (let* ((path (make-file-name plugindir
			  (string-replace name #\. (file-separator)))))
	     (or (load-plugin-js path)
		 (load-plugin-hop path)
		 (error "android-load-plugin" (format "Cannot load plugin ~s" name) p))))))

;*---------------------------------------------------------------------*/
;*    android-send-command ...                                         */
;*---------------------------------------------------------------------*/
(define (android-send-command p::androidphone plugin::int . args)
   (with-access::androidphone p (%plugins)
      (let* ((p (vector-ref %plugins plugin))
	     (out (android-plugin-out p)))
	 (display (car args) out)
	 (for-each (lambda (a) (write a out)) (cdr args))
	 (flush-output-port out))))

;*---------------------------------------------------------------------*/
;*    android-send-command/result ...                                  */
;*---------------------------------------------------------------------*/
(define (android-send-command/result p::androidphone plugin::int . args)
   (with-access::androidphone p (%plugins)
      (let* ((p (vector-ref %plugins plugin))
	     (out (android-plugin-out p))
	     (pin (android-plugin-pin p)))
	 (display (car args) out)
	 (for-each (lambda (a) (write a out)) (cdr args))
	 (flush-output-port out)
	 (read pin))))

;*---------------------------------------------------------------------*/
;*    load-plugin ...                                                  */
;*---------------------------------------------------------------------*/
(define (load-plugin phone name)
   (multiple-value-bind (in out)
      (open-pipes name)
      (multiple-value-bind (pin pout)
	 (open-pipes name)
	 (let ((plugin (hop-load name)))
	    (plugin phone in pout emit)
	    (android-plugin in out pin pout)))))

;*---------------------------------------------------------------------*/
;*    get-simulated-phone ...                                          */
;*---------------------------------------------------------------------*/
(define (get-simulated-phone)
   phone-simulated)

;*---------------------------------------------------------------------*/
;*    set-simulated-phone! ...                                         */
;*---------------------------------------------------------------------*/
(define (set-simulated-phone! phone)
   (set! phone-simulated phone))

;*---------------------------------------------------------------------*/
;*    phone-init ::androidphone ...                                    */
;*---------------------------------------------------------------------*/
(define-method (phone-init o::androidphone)
   o)

;*---------------------------------------------------------------------*/
;*    phone-reboot ::androidphone ...                                  */
;*---------------------------------------------------------------------*/
(define-method (phone-reboot o::androidphone)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-contact-list ::androidphone ...                            */
;*---------------------------------------------------------------------*/
(define-method (phone-contact-list::pair-nil this::androidphone #!optional projection filter)
   (let ((lst (if (equal? filter "phone")
		  (filter (lambda (vc)
			     (with-access::vcard vc (phones)
				(pair? phones)))
		     simulated-contacts)
		  simulated-contacts)))
      (if (equal? projection "summary")
	  (map (lambda (vc)
		  (duplicate::vcard vc
		     (photo #unspecified)))
	     lst)
	  lst)))

;*---------------------------------------------------------------------*/
;*    phone-contact ::androidphone ...                                 */
;*---------------------------------------------------------------------*/
(define-method (phone-contact this::androidphone id #!optional)
   (find (lambda (vc)
	    (with-access::vcard vc ((key id))
	       (string=? key id)))
      simulated-contacts))

;*---------------------------------------------------------------------*/
;*    phone-contact-remove! ::androidphone ...                         */
;*---------------------------------------------------------------------*/
(define-method (phone-contact-remove! this::androidphone id)
   (set! simulated-contacts
      (filter! (lambda (vc)
		  (with-access::vcard vc (notes)
		     (let ((cid (assq 'android-id notes)))
			(or (not cid) (not (string=? (cdr cid) id))))))
	 simulated-contacts)))

;*---------------------------------------------------------------------*/
;*    phone-sms-send ::androidphone ...                                */
;*---------------------------------------------------------------------*/
(define-method (phone-sms-send this::androidphone no text)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-call-dial ::androidphone ...                               */
;*---------------------------------------------------------------------*/
(define-method (phone-call-dial this::androidphone no)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-call-start ::androidphone ...                              */
;*---------------------------------------------------------------------*/
(define-method (phone-call-start this::androidphone no #!optional window)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-call-stop ::androidphone ...                               */
;*---------------------------------------------------------------------*/
(define-method (phone-call-stop this::androidphone)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-vibrate ::androidphone ...                                 */
;*---------------------------------------------------------------------*/
(define-method (phone-vibrate this::androidphone freqs rep)
   #t)

;*---------------------------------------------------------------------*/
;*    phone-vibrate-stop ::androidphone ...                            */
;*---------------------------------------------------------------------*/
(define-method (phone-vibrate-stop this::androidphone)
   #t)

;*---------------------------------------------------------------------*/
;*    simulated-contacts ...                                           */
;*    -------------------------------------------------------------    */
;*    Must be a pre-allocated list to accomodate possible              */
;*    side effects and the dummy contact database.                     */
;*---------------------------------------------------------------------*/
(define simulated-contacts
   (list (instantiate::vcard
	    (id "34")
	    (familyname "Dupont")
	    (firstname "Jean")
	    (emails '("jean@dupont.org"))
	    (phones '((default "1111-111-11")))
	    (addresses '()))
      (instantiate::vcard
	 (id "35")
	 (familyname "Dulac")
	 (firstname "Michel")
	 (emails '("Michel@dulac.org"))
	 (phones '((default "2222-222-22")))
	 (addresses '())
	 (x-color "#932"))
      (instantiate::vcard
	 (id "35")
	 (familyname "Durant")
	 (firstname "Paul")
	 (emails '("Paul@durant.org"))
	 (phones '())
	 (addresses '())
	 (x-color "#932"))))

;*---------------------------------------------------------------------*/
;*    simulator-trigger-event ...                                      */
;*---------------------------------------------------------------------*/
(define (simulator-trigger-event this::JsWrapper event . vals)
   (with-access::JsWrapper this (obj)
      (with-access::androidphone obj (events)
	 (set! events (cons (cons event vals) events)))))

;*---------------------------------------------------------------------*/
;*    add-event-listener! ::androidphone ...                           */
;*---------------------------------------------------------------------*/
(define-method (add-event-listener! this::androidphone event proc . capture)
   (with-access::androidphone this (listeners)
      (set! listeners (cons (cons event proc) listeners))))

;*---------------------------------------------------------------------*/
;*    hopdroid/simulator ...                                           */
;*---------------------------------------------------------------------*/
(define-service (hopdroid/simulator)
   (if phone-simulated
       (with-access::JsWrapper phone-simulated (obj data)
	  (let ((%this (vector-ref data 1))
		(%worker (vector-ref data 0)))
	     (js-worker-exec %worker "hopdroid/simulator" #t
		(lambda ()
		   (let ((conn (<DIV>)))
		      (<HTML>
			 (<H1> (js-tostring (js-get phone-simulated (js-string->jsstring "product") %this) %this))
			 (js-tostring (js-get phone-simulated (js-string->jsstring "model") %this) %this)
			 " - "
			 (js-tostring (js-get phone-simulated (js-string->jsstring "sdk") %this) %this)
			 (<H1> "Events")
			 (let ((smsno (<INPUT> type: "tel" :class "sms-number"))
			       (smstext (<TEXTAREA> :class "sms-text")))
			    (<H2> "smsreceived")
			    (<DIV>
			       (<BUTTON> :onclick ~(with-hop ($hopdroid/simulator/emit "smsreceived"
								(list $smsno.value $smstext.value))
						      (lambda ()
							 (innerHTML-set! $conn "smsreceived emitted")))
				  "emit smsreceived")
			       " no" smsno
			       " text" smstext))
			 (let ((smsno (<INPUT> type: "tel" :class "sms-number"))
			       (smstext (<TEXTAREA> :class "sms-text")))
			    (<H2> "smsdelivered")
			    (<DIV>
			       (<BUTTON> :onclick ~(with-hop ($hopdroid/simulator/emit "smsdelivered"
								(list $smsno.value $smstext.value))
						      (lambda ()
							 (innerHTML-set! $conn "smsdelivered sent")))
				  "emit smsdelivered")
			       " no" smsno
			       " text" smstext))
			 (<H1> "Console")
			 conn))))))
       (<HTML>
	  "no simulated phone")))

;*---------------------------------------------------------------------*/
;*    emit ...                                                         */
;*---------------------------------------------------------------------*/
(define (emit evt val)
   (with-access::JsWrapper phone-simulated (obj data)
      (let ((%worker (vector-ref data 0))
	    (%this (vector-ref data 1)))
	 (with-access::androidphone obj (listeners)
	    (js-worker-exec %worker "hopdroid/simulator" #t
	       (lambda ()
		  (for-each (lambda (listener)
			       (when (string=? (car listener) evt)
				  ((cdr listener)
				   (instantiate::event
				      (target phone-simulated)
				      (name evt)
				      (value val)))))
		     listeners)))))))

;*---------------------------------------------------------------------*/
;*    hopdroid/simulator/emit ...                                      */
;*---------------------------------------------------------------------*/
(define-service (hopdroid/simulator/emit evt val)
   (when phone-simulated
      (emit evt val)))

))
