;*=====================================================================*/
;*    .../project/hop/hop/node_modules/hopdroid/lib/_simulator.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  manuel serrano                                    */
;*    Creation    :  Mon Nov 30 07:29:00 2020                          */
;*    Last change :  Mon Nov 30 07:29:01 2020 (serrano)                */
;*    Copyright   :  2020-21 manuel serrano                            */
;*    -------------------------------------------------------------    */
;*    Simulated phone (for debug)                                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _simulator

   (library hopscript hop hopwidget nodejs mail phone)

   (cond-expand
      ((not (library hopdroid))
       (import (_nophone "_nophone.hop"))))
   
   (cond-expand
      ((not (library hopdroid))
       (export
	  (get-simulated-phone)
	  (set-simulated-phone! ::obj)))))

(cond-expand
   ((not (library hopdroid))
;;;

;*---------------------------------------------------------------------*/
;*    phone-simulated ...                                              */
;*---------------------------------------------------------------------*/
(define phone-simulated #f)

;*---------------------------------------------------------------------*/
;*    get-simulated-phone ...                                          */
;*---------------------------------------------------------------------*/
(define (get-simulated-phone)
   phone-simulated)

;*---------------------------------------------------------------------*/
;*    set-simulated-phone! ...                                         */
;*---------------------------------------------------------------------*/
(define (set-simulated-phone! phone)
   (set! phone-simulated phone))

;*---------------------------------------------------------------------*/
;*    simulated-contacts ...                                           */
;*    -------------------------------------------------------------    */
;*    Must be a pre-allocated list to accomodate possible              */
;*    side effects and the dummy contact database.                     */
;*---------------------------------------------------------------------*/
(define simulated-contacts
   (list (instantiate::vcard
	    (uid "34")
	    (familyname "Dupont")
	    (firstname "Jean")
	    (emails '((label: "work" email: "jean@dupont.org")))
	    (phones '((label: "default" number: "1111-111-11")
		      (label: "work" number: "4444-444-44")))
	    (x-color "#7227FF")
	    (addresses '()))
      (instantiate::vcard
	 (uid "35")
	 (familyname "Dulac")
	 (firstname "Michel")
	 (emails '((label: "home" email: "Michel@dulac.org")))
	 (phones '((label: "default" number: "2222-222-22")))
	 (addresses '((label: "work" address: #("2004 route des Lucioles")
			 :city "Sophia Antipolis" :pobox "BP 93" :zip "0690")))
	 (x-color "#FFB227"))
      (instantiate::vcard
	 (uid "35")
	 (familyname "Durant")
	 (firstname "Paul")
	 (emails '((label: "home" email: "Paul@durant.org")))
	 (phones '())
	 (addresses '())
	 (x-color "#27BEFF"))))

;*---------------------------------------------------------------------*/
;*    simulator-trigger-event ...                                      */
;*---------------------------------------------------------------------*/
(define (simulator-trigger-event this::JsWrapper event . vals)
   (with-access::JsWrapper this (obj)
      (with-access::nophone obj (events)
	 (set! events (cons (cons event vals) events)))))

;*---------------------------------------------------------------------*/
;*    add-event-listener! ::nophone ...                                */
;*---------------------------------------------------------------------*/
(define-method (add-event-listener! this::nophone event proc . capture)
   (with-access::nophone this (listeners)
      (set! listeners (cons (cons event proc) listeners))))

;*---------------------------------------------------------------------*/
;*    hopdroid/simulator ...                                           */
;*---------------------------------------------------------------------*/
(define-service (hopdroid/simulator)
   (if phone-simulated
       (with-access::JsWrapper phone-simulated (obj data)
	  (let ((%this (vector-ref data 1))
		(%worker (vector-ref data 0)))
	     (js-worker-exec %worker "hopdroid/simulator" #t
		(lambda ()
		   (let ((conn (<DIV>)))
		      (<HTML>
			 (<H1> (js-tostring (js-get phone-simulated (js-string->jsstring "product") %this) %this))
			 (js-tostring (js-get phone-simulated (js-string->jsstring "model") %this) %this)
			 " - "
			 (js-tostring (js-get phone-simulated (js-string->jsstring "sdk") %this) %this)
			 (<H1> "Events")
			 (let ((smsno (<INPUT> type: "tel" :class "sms-number"))
			       (smstext (<TEXTAREA> :class "sms-text")))
			    (<H2> "smsreceived")
			    (<DIV>
			       (<BUTTON> :onclick ~(with-hop ($hopdroid/simulator/emit "smsreceived"
								(list $smsno.value $smstext.value))
						      (lambda ()
							 (innerHTML-set! $conn "smsreceived emitted")))
				  "emit smsreceived")
			       " no" smsno
			       " text" smstext))
			 (let ((smsno (<INPUT> type: "tel" :class "sms-number"))
			       (smstext (<TEXTAREA> :class "sms-text")))
			    (<H2> "smsdelivered")
			    (<DIV>
			       (<BUTTON> :onclick ~(with-hop ($hopdroid/simulator/emit "smsdelivered"
								(list $smsno.value $smstext.value))
						      (lambda ()
							 (innerHTML-set! $conn "smsdelivered sent")))
				  "emit smsdelivered")
			       " no" smsno
			       " text" smstext))
			 (<H1> "Console")
			 conn))))))
       (<HTML>
	  "no simulated phone")))

;*---------------------------------------------------------------------*/
;*    emit ...                                                         */
;*---------------------------------------------------------------------*/
(define (emit evt val)
   (with-access::JsWrapper phone-simulated (obj data)
      (let ((%worker (vector-ref data 0))
	    (%this (vector-ref data 1)))
	 (with-access::nophone obj (listeners)
	    (js-worker-exec %worker "hopdroid/simulator" #t
	       (lambda ()
		  (for-each (lambda (listener)
			       (when (string=? (car listener) evt)
				  ((cdr listener)
				   (instantiate::event
				      (target phone-simulated)
				      (name evt)
				      (value val)))))
		     listeners)))))))

;*---------------------------------------------------------------------*/
;*    hopdroid/simulator/emit ...                                      */
;*---------------------------------------------------------------------*/
(define-service (hopdroid/simulator/emit evt val)
   (when phone-simulated
      (emit evt val)))

))
