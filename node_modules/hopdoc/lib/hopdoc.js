/*=====================================================================*/
/*    .../prgm/project/hop/3.0.x/node_modules/hopdoc/lib/hopdoc.js     */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Thu Jun 26 08:21:30 2014                          */
/*    Last change :  Tue Sep  8 15:21:08 2015 (serrano)                */
/*    Copyright   :  2014-15 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    HOPDOC, tool kit for generating the hop.js documentation         */
/*=====================================================================*/
"use hopscript"

const hop = require( "hop" );
const md = require( hop.markdown );
const fontifier = require( hop.fontifier );
const doc = require( "./_hopdoc.hop" );
const fs = require( "fs" );
const path = require( "path" );

/*---------------------------------------------------------------------*/
/*    Global constants ...                                             */
/*---------------------------------------------------------------------*/
const compilers = {
   markdown: "toMarkdown"
};

/*---------------------------------------------------------------------*/
/*    compileFile ...                                                  */
/*---------------------------------------------------------------------*/
function compileFile( path, format ) {
   const xml = md.load( path, hop.locale, GLOBAL );
   const comp = format ? compilers[ format ] : "toMarkdown";

   if( comp in xml ) {
      return xml[ comp ]();
   } else {
      throw "illegal compilation format " + format + "";
   }
}

/*---------------------------------------------------------------------*/
/*    includeCode ...                                                  */
/*---------------------------------------------------------------------*/
function includeCode( path, lang, beg, end ) {
   const ip = #:open-input-file( #:js-tostring( path, #:%this ) );
   
   if( !ip ) {
      throw new Error( 'Cannot find file "' + path + '"' );
   }

   if( lang == undefined ) {
      lang = fontifier.hopscript;
   }

   try {
      return <md.PRE> {
	 <md.CODE> {
	    class: "fontifier-prog",
	    lang( ip, beg, end )
	 }
      }
   } finally {
      #:close-input-port( ip );
   }
}

/*---------------------------------------------------------------------*/
/*    toc ...                                                          */
/*---------------------------------------------------------------------*/
function toc( doc, clazz ) {

   if( !clazz ) clazz = "toc";
   
   function getTags( el ) {

      if( el instanceof Array ) {
	 return Array.prototype.concat.apply( [], el.map( getTags ) );
      }
      
      var t = typeof( el );
      if( t == "pair" ) {
	 return Array.prototype.concat.apply( [], el.map( getTags ).toArray() );
      }

      if( typeof( el ) == "xml-element" ) {
	 var res = el.getElementsByClassName( clazz );
	 return res;
      }
      return [];
   }

   return getTags( doc.XML );
}

/*---------------------------------------------------------------------*/
/*    includeDir ...                                                   */
/*---------------------------------------------------------------------*/
function includeDir( dir ) {
   return fs.readdirSync( dir )
      .filter( function( e ) {
	 return e.match( /[.]md$/ ) && (e != "index.md");
      } )
      .sort( function( path1, path2 ) {
	 return path1.naturalCompare( path2 );
      } )
      .map( function( file ) {
	 var fp = path.join( dir, file );
	 return md.load( fp, hop.locale, fontifier ).XML;
      } );
}

/*---------------------------------------------------------------------*/
/*    DIR ...                                                          */
/*---------------------------------------------------------------------*/
var DIR = path.dirname( module.filename );

/*---------------------------------------------------------------------*/
/*    P ...                                                            */
/*---------------------------------------------------------------------*/
function P( file ) {
   return path.normalize( path.join( DIR, file ) );
}
   
/*---------------------------------------------------------------------*/
/*    exports                                                          */
/*---------------------------------------------------------------------*/
exports.css = P( "../hss/hopdoc.hss" ), fontifier.css;
exports.jscript = [];

exports.compileFile = compileFile;
exports.includeCode = includeCode;
exports.include = function( file, beg, end ) {
   return doc.include( file, beg, end );
}

exports.ROOT = P( "../../.." );
exports.EXAMPLES_DIR = path.join( exports.ROOT, "examples" );

exports.toc = toc;

exports.seeAlso = function( keywords ) {
   return ""
};

exports.load = function( file ) {
   return md.load( file, hop.locale, fontifier )
};

exports.eval = function( obj ) {
   return md.eval( obj, hop.locale, fontifier )
};

exports.includeDir = includeDir;
