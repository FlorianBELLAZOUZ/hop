;*=====================================================================*/
;*    .../prgm/project/hop/3.2.x/node_modules/feed/lib/_feed.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Thu Sep  6 15:19:35 2018                          */
;*    Last change :  Thu Sep  6 16:04:25 2018 (serrano)                */
;*    Copyright   :  2018 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    FEED Hop parser                                                  */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _feedn

   (library hopscript hop hopwidget nodejs web)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    js-bind-tag! ...                                                 */
;*---------------------------------------------------------------------*/
(define-macro (js-bind-tag! %this obj tag)
   `(begin
       (js-bind! ,%this ,obj ',tag
	  :value (js-make-function ,%this
		    (lambda (this attrs . nodes)
		       (if (isa? attrs JsObject)
			   (if (null? nodes)
			       (apply ,(symbol-append '< tag '>)
				  (js-jsobject->keyword-plist attrs ,%this))
			       (apply ,(symbol-append '< tag '>)
				  (append
				     (js-jsobject->keyword-plist attrs ,%this)
				     nodes)))
			   (apply ,(symbol-append '< tag '>)
			      nodes)))
		    2 ',tag)
	  :writable #f
	  :enumerable #f)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (with-access::JsGlobalObject %this (__proto__)

      (define (pair->jsobject l)
	 
	 (define (plist? l)
	    (and (or (keyword? (car l)) (symbol? (car l)))
		 (list? (cdr l))))
	 
	 (define (alist? l)
	    (when (list? l)
	       (every (lambda (e)
			 (and (pair? e)
			      (or (keyword? (car e)) (symbol? (car e)))))
		  l)))
	 
	 (cond
	    ((not (pair? l))
	     l)
	    ((plist? l)
	     (js-plist->jsobject l %this))
	    ((alist? l)
	     (js-alist->jsobject l %this))
	    ((list? l)
	     (js-vector->jsarray
		(list->vector (map (lambda (o) (js-obj->jsobject o %this)) l))
		%this))
	    (else
	     (cons (js-obj->jsobject (car l) %this)
		(js-obj->jsobject (cdr l) %this)))))
      
      (define (plist->jsobject l)
	 (js-plist->jsobject (map pair->jsobject l) %this))
	 
      (define exports (js-get module 'exports %this))
      
      ;; bind the module in the markdown scope
      (js-put! scope 'module module #f %this)
      
      (js-bind! %this exports 'parse
	 :value (js-make-function %this
		   (lambda (this file encoding)
		      (let ((path (js-tostring file %this))
			    (enc (if (eq? encoding (js-undefined))
				     'UTF-8
				     (string->symbol
					(js-tostring encoding %this)))))
			 (let ((feed (call-with-input-file path
					(lambda (in)
					   (feed-parse in
					      (lambda (t i)
						 (plist->jsobject
						    `(:head ,t :body ,i)))
					      (lambda l
						 (plist->jsobject l))
					      (lambda l
						 (plist->jsobject l))
					      :encoding enc)))))
			    (if (pair? feed)
				(car feed)
				(js-undefined)))))
		   2 'parse)
	 :writable #f
	 :enumerable #f)))

      

