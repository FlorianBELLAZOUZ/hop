;*=====================================================================*/
;*    .../prgm/project/hop/3.0.x/node_modules/user/lib/_user.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Jun 19 13:21:01 2015                          */
;*    Last change :  Wed Jun 24 16:33:32 2015 (serrano)                */
;*    Copyright   :  2015 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    Hop user manager                                                 */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _user
   
   (library hopscript hop hopwidget nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))
	   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   
   (define (string-or-false v)
      (cond
	 ((isa? v JsStringLiteral) (js-jsstring->string v))
	 ((isa? v JsObject) (js-tostring v %this))
	 (else #f)))
   
   (define (symbol-or-false v)
      (let ((s (string-or-false v)))
	 (when (string? s)
	    (string->symbol s))))
   
   (define (symbol-array*-or-false v)
      (cond
	 ((and (isa? v JsStringLiteral) (string=? (js-jsstring->string v) "*"))
	  '*)
	 ((isa? v JsArray)
	  (filter-map (lambda (e)
			 (symbol-or-false (car e)))
	     (jsarray->list v %this)))
	 (else
	  #f)))
   
   (define (string-array*-or-false v)
      (cond
	 ((and (isa? v JsStringLiteral) (string=? (js-jsstring->string v) "*"))
	  '*)
	 ((isa? v JsArray)
	  (filter-map (lambda (e)
			 (string-or-false (car e)))
	     (jsarray->list v %this)))
	 (else
	  #f)))
   
   (let ((exports (js-get module 'exports %this)))
      (js-bind! %this exports 'add
	 :value (js-make-function %this
		   (lambda (o user)
		      (let ((name (js-get user 'name %this))
			    (uuid (js-get user 'uuid %this))
			    (pass (js-get user 'password %this))
			    (dirs (js-get user 'directories %this))
			    (services (js-get user 'services %this))
			    (groups (js-get user 'groups %this))
			    (prefs (js-get user 'preferencesFilename %this)))
			 (tprint "adding " (js-tostring name %this)
			    " " (typeof (js-tostring name %this))
			    " pass=" (string-or-false pass)
			    " " (typeof (string-or-false pass))
			    " svc=" (symbol-array*-or-false services)
			    " " (typeof (symbol-array*-or-false services))
			    " dir=" (string-array*-or-false dirs))
			 (add-user! (js-tostring name %this)
			    :uuid (string-or-false uuid)
			    :password (string-or-false pass)
			    :preferences-filename (string-or-false prefs)
			    :groups (symbol-array*-or-false groups)
			    :services (symbol-array*-or-false services)
			    :directories (string-array*-or-false dirs))))
		   0 'add)
	 :writable #f
	 :enumerable #t)))
