;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/node_modules/user/hop/_user.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Jun 19 13:21:01 2015                          */
;*    Last change :  Tue Jun 18 11:59:17 2024 (serrano)                */
;*    Copyright   :  2015-24 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Hop user manager                                                 */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _user
   
   (library hopscript hop hopwidget nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   
   (js-export (add encryptPassword isClosed)
      
      (define (string-or-false v)
	 (cond
	    ((string? v) v)
	    ((isa? v JsStringLiteral) (js-jsstring->string v))
	    ((isa? v JsObject) (js-tostring v %this))
	    (else #f)))
      
      (define (symbol-or-false v)
	 (let ((s (string-or-false v)))
	    (when (string? s)
	       (string->symbol s))))
      
      (define (symbol-array*-or-false v)
	 (cond
	    ((and (string? v) (string=? v "*"))
	     '*)
	    ((and (isa? v JsStringLiteral) (string=? (js-jsstring->string v) "*"))
	     '*)
	    ((isa? v JsArray)
	     (filter-map symbol-or-false (jsarray->list v %this)))
	    (else
	     #f)))
      
      (define (string-array*-or-false v)
	 (cond
	    ((and (string? v) (string=? v "*"))
	     '*)
	    ((and (isa? v JsStringLiteral) (string=? (js-jsstring->string v) "*"))
	     '*)
	    ((isa? v JsArray)
	     (filter-map string-or-false (jsarray->list v %this)))
	    (else
	     #f)))
      
      (define add
	 (js-make-function %this
	    (lambda (o user)
	       (let ((name (js-get user (& "name") %this))
		     (uuid (js-get user (& "uuid") %this))
		     (pass (js-get user (& "password") %this))
		     (dirs (js-get user (& "directories") %this))
		     (services (js-get user (& "services") %this))
		     (groups (js-get user (& "groups") %this))
		     (prefs (js-get user (& "preferencesFilename") %this)))
		  (add-user! (js-tostring name %this)
		     :uuid (string-or-false uuid)
		     :password (string-or-false pass)
		     :preferences-filename (string-or-false prefs)
		     :groups (symbol-array*-or-false groups)
		     :services (symbol-array*-or-false services)
		     :directories (string-array*-or-false dirs))))
	    (js-function-arity 1 0)
	    (js-function-info :name "add" :len 0)))
      
      (define encryptPassword
	 (js-make-function %this
	    (lambda (o user passwd)
	       (js-stringlist->jsstring
		  `("+"
		      ,(digest-password-encrypt
			  (js-tostring user %this)
			  (js-tostring passwd %this)
			  (hop-realm)))))
	    (js-function-arity 2 0)
	    (js-function-info :name "encryptPassword" :len 2)))
      
      (define isClosed
	 (lambda (this)
	    (users-closed?)))
      
      (let ((exports (js-get %module (& "exports") %this)))
	 (js-bind! %this exports (& "add")
	    :value add
	    :writable #f
	    :enumerable #t)
	 (js-bind! %this exports (& "encryptPassword")
	    :value encryptPassword
	    :writable #f
	    :enumerable #f)
	 (js-bind! %this exports (& "isClosed")
	    :value (js-make-function %this
		      isClosed
		      (js-function-arity 0 0)
		      (js-function-info :name "isClosed" :len 0))
	    :writable #f
	    :enumerable #f))))
