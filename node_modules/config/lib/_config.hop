;*=====================================================================*/
;*    .../project/hop/3.0.x/node_modules/config/lib/_config.hop        */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Jun 19 13:21:01 2015                          */
;*    Last change :  Tue Jun 23 15:51:31 2015 (serrano)                */
;*    Copyright   :  2015 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    Hop config manager                                               */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _config
   
   (library hopscript hop hopwidget nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    bind-param! ...                                                  */
;*---------------------------------------------------------------------*/
(define-macro (bind-param! %this exports type id accessor)
   `(js-bind! ,%this ,exports ',id
       :get (js-make-function %this
	       (lambda (this)
		  ,(case type
		      ((string)
		       `(js-string->jsstring (,accessor)))
		      ((symbol)
		       `(js-string->jsstring (symbol->string (,accessor))))
		      (else
		       `(,accessor))))
	       0 ',id)
       :set (js-make-function %this
	       (lambda (o v)
		  ,(case type
		      ((string)
		       `(,(symbol-append accessor '-set!)
			 (js-tostring v %this)))
		      ((symbol)
		       `(,(symbol-append accessor '-set!)
			 (string->symbol (js-tostring v %this))))
		      ((integer)
		       `(,(symbol-append accessor '-set!)
			 (string->symbol (js-tointeger v %this))))
		      (else
		       `(,(symbol-append accessor '-set!) v))))
	       1 ',id)
       :writable #t
       :enumerable #t))
   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (let ((exports (js-get module 'exports %this)))
      ;; HTTPS
      (bind-param! %this exports string HTTPSPrivateKey hop-https-pkey)
      (bind-param! %this exports string HTTPSCertificate hop-https-cert)
      ;; HTTP
      (bind-param! %this exports symbol HTTPAuthentication hop-http-authentication)
      ;; maxThreads
      (bind-param! %this exports integer maxThreads hop-max-threads)
      ;; xmlBackend
      (js-bind! %this exports 'xmlBackend
	 :get (js-make-function %this
		 (lambda (this)
		    (with-access::xml-backend (hop-xml-backend) (id)
		       (js-string->jsstring (symbol->string id))))
		 0 'xmlBackend)
	 :set (js-make-function %this
		 (lambda (this v)
		    (hop-xml-backend-set!
		       (string->symbol (js-tostring v %this))))
		 1 'xmlBackend)
	 :writable #t
	 :enumerable #t)))

