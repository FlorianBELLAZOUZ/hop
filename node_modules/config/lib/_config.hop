;*=====================================================================*/
;*    .../project/hop/3.0.x/node_modules/config/lib/_config.hop        */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Jun 19 13:21:01 2015                          */
;*    Last change :  Mon Aug 24 13:20:55 2015 (serrano)                */
;*    Copyright   :  2015 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    Hop config manager                                               */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _config
   
   (library hopscript hop hopwidget nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    bind-param! ...                                                  */
;*---------------------------------------------------------------------*/
(define-macro (bind-param! %this exports type id accessor)
   `(js-bind! ,%this ,exports ',id
       :get (js-make-function %this
	       (lambda (this)
		  ,(case type
		      ((string)
		       `(js-string->jsstring (,accessor)))
		      ((symbol)
		       `(js-string->jsstring (symbol->string (,accessor))))
		      ((string-array)
		       `(let ((v (map js-string->jsstring (,accessor))))
			  (js-vector->jsarray (list->vector v) %this)))
		      (else
		       `(,accessor))))
	       0 ',id)
       :set (js-make-function %this
	       (lambda (o v)
		  ,(case type
		      ((string)
		       `(,(symbol-append accessor '-set!)
			 (js-tostring v %this)))
		      ((symbol)
		       `(,(symbol-append accessor '-set!)
			 (string->symbol (js-tostring v %this))))
		      ((integer)
		       `(,(symbol-append accessor '-set!)
			 (js-tointeger v %this)))
		      ((bool)
		       `(,(symbol-append accessor '-set!)
			 (js-totest v)))
		      ((string-array)
		       `(,(symbol-append accessor '-set!)
			 (map! (lambda (s) (js-tostring s %this))
			    (jsarray->list v))))
		      (else
		       `(,(symbol-append accessor '-set!) v))))
	       1 ',id)
       :writable #t
       :enumerable #t))
   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (let ((exports (js-get module 'exports %this)))

      ;; serverAliases
      (bind-param! %this exports string-array serverAliases hop-server-aliases)
      
      ;; HTTPS
      (bind-param! %this exports string HTTPSPrivateKey hop-https-pkey)
      (bind-param! %this exports string HTTPSCertificate hop-https-cert)
      ;; HTTP
      (bind-param! %this exports symbol HTTPAuthentication hop-http-authentication)
      ;; maxThreads
      (bind-param! %this exports integer maxThreads hop-max-threads)
      ;; keep-alive
      (bind-param! %this exports bool enableKeepAlive hop-enable-keep-alive)
      ;; webdav
      (bind-param! %this exports bool enableWebdav hop-enable-webdav)
      ;; path
      (bind-param! %this exports string-array path hop-path)
      (js-bind! %this exports 'addAutoloadDirectory
	 :value (js-make-function %this
		   (lambda (this path)
		      (hop-autoload-directory-add! (js-string->jsstring path)))
		   1 'addAutoloadDirectory)
	 :writable #f
	 :enumerable #f)
      (js-bind! %this exports 'addHzRepository
	 :value (js-make-function %this
		   (lambda (this path)
		      (hop-hz-repositories-add! (js-string->jsstring path)))
		   1 'addHzRepository)
	 :writable #f
	 :enumerable #f)
      ;; xmlBackend
      (js-bind! %this exports 'xmlBackend
	 :get (js-make-function %this
		 (lambda (this)
		    (with-access::xml-backend (hop-xml-backend) (id)
		       (js-string->jsstring (symbol->string id))))
		 0 'xmlBackend)
	 :set (js-make-function %this
		 (lambda (this v)
		    (hop-xml-backend-set!
		       (string->symbol (js-tostring v %this))))
		 1 'xmlBackend)
	 :writable #t
	 :enumerable #t)))

