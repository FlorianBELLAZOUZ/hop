;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/node_modules/hopc/hop/_list.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  manuel serrano                                    */
;*    Creation    :  Mon Nov 27 08:15:18 2023                          */
;*    Last change :  Wed Jun 12 14:00:12 2024 (serrano)                */
;*    Copyright   :  2023-24 manuel serrano                            */
;*    -------------------------------------------------------------    */
;*    Wrapper for List for compatibility with the Nodejs port.         */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _list
   
   (library hopscript hop nodejs js2scheme)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))
	   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   
   (js-export (list cons pairp car cdr setCar setCdr lastPair)
      
      (define exports (js-get %module (& "exports") %this))

      ;; pairp
      (define pairp
	 (js-make-function %this
	    (lambda (this obj)
	       (pair? obj))
	    (js-function-arity 1 0)
	    (js-function-info :name "pairp" :len 1)
	    :size 1))
	 
      (js-bind! %this exports (& "pairp")
	 :value pairp
	 :writable #f
	 :enumerable #t)
      
      ;; cons
      (define cons
	 (js-make-function %this
	    (lambda (this car cdr)
	       ((@ cons __r4_pairs_and_lists_6_3) car cdr))
	    (js-function-arity 2 0)
	    (js-function-info :name "cons" :len 2)
	    :size 2))
	 
      (js-bind! %this exports (& "cons")
	 :value cons
	 :writable #f
	 :enumerable #t)
      
      ;; list
      (define list
	 (js-make-function %this
	    (lambda (this . args)
	       args)
	    (js-function-arity -1 0)
	    (js-function-info :name "list" :len 1)
	    :size 1))
	 
      (js-bind! %this exports (& "list")
	 :value list
	 :writable #f
	 :enumerable #t)
      
      ;; car
      (define car
	 (js-make-function %this
	    (lambda (this obj)
	       ((@ car __r4_pairs_and_lists_6_3) obj))
	    (js-function-arity 1 0)
	    (js-function-info :name "car" :len 1)
	    :size 1))
	 
      (js-bind! %this exports (& "car")
	 :value car
	 :writable #f
	 :enumerable #t)

      ;; cdr
      (define cdr
	 (js-make-function %this
	    (lambda (this obj)
	       ((@ cdr __r4_pairs_and_lists_6_3) obj))
	    (js-function-arity 1 0)
	    (js-function-info :name "cdr" :len 1)
	    :size 1))
	 
      (js-bind! %this exports (& "cdr")
	 :value cdr
	 :writable #f
	 :enumerable #t)

      ;; setCar
      (define setCar
	 (js-make-function %this
	    (lambda (this obj val)
	       (set-car! obj val))
	    (js-function-arity 2 0)
	    (js-function-info :name "setCar" :len 2)
	    :size 2))
	 
      (js-bind! %this exports (& "setCar")
	 :value setCar
	 :writable #f
	 :enumerable #t)
      
      ;; setCdr
      (define setCdr
	 (js-make-function %this
	    (lambda (this obj val)
	       (set-cdr! obj val))
	    (js-function-arity 2 0)
	    (js-function-info :name "setCdr" :len 2)
	    :size 2))
	 
      (js-bind! %this exports (& "setCdr")
	 :value setCdr
	 :writable #f
	 :enumerable #t)
      
      ;; lastPair
      (define lastPair
	 (js-make-function %this
	    (lambda (this obj)
	       (last-pair obj))
	    (js-function-arity 1 0)
	    (js-function-info :name "lastPair" :len 1)
	    :size 1))

      (js-bind! %this exports (& "lastPair")
	 :value lastPair
	 :writable #f
	 :enumerable #t)))
