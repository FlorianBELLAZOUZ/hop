;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/node_modules/hopc/hop/_list.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  manuel serrano                                    */
;*    Creation    :  Mon Nov 27 08:15:18 2023                          */
;*    Last change :  Mon Jun  3 10:34:30 2024 (serrano)                */
;*    Copyright   :  2023-24 manuel serrano                            */
;*    -------------------------------------------------------------    */
;*    Wrapper for List for compatibility with the Nodejs port.         */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _list
   
   (library hopscript hop nodejs js2scheme)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))
	   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   
   (js-export (Cons pairp car cdr)
      
      (define exports (js-get %module (& "exports") %this))

      ;; Cons
      (define Cons
	 (js-make-function %this
	    (lambda (this car cdr)
	       (cons car cdr))
	    (js-function-arity 2 0)
	    (js-function-info :name "Cons" :len 1)
	    :size 2))
	 
      (js-bind! %this exports (& "Cons")
	 :value Cons
	 :writable #f
	 :enumerable #t)
      
      ;; car
      (define car
	 (js-make-function %this
	    (lambda (this obj)
	       (car obj))
	    (js-function-arity 1 0)
	    (js-function-info :name "car" :len 1)
	    :size 1))
	 
      (js-bind! %this exports (& "car")
	 :value car
	 :writable #f
	 :enumerable #t)
      
      ;; pairp
      (define pairp
	 (js-make-function %this
	    (lambda (this obj)
	       (pair? obj))
	    (js-function-arity 1 0)
	    (js-function-info :name "pairp" :len 1)
	    :size 1))
	 
      (js-bind! %this exports (& "pairp")
	 :value pairp
	 :writable #f
	 :enumerable #t)
      
      ;; cdr
      (define cdr
	 (js-make-function %this
	    (lambda (this obj)
	       (cdr obj))
	    (js-function-arity 1 0)
	    (js-function-info :name "cdr" :len 1)
	    :size 1))
	 
      (js-bind! %this exports (& "cdr")
	 :value cdr
	 :writable #f
	 :enumerable #t)))
