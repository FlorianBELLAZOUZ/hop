/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hopc/node/hopc.mjs     */
/*    -------------------------------------------------------------    */
/*    Author      :  manuel serrano                                    */
/*    Creation    :  Tue Oct 24 09:50:25 2023                          */
/*    Last change :  Tue Mar 19 07:41:31 2024 (serrano)                */
/*    Copyright   :  2023-24 manuel serrano                            */
/*    -------------------------------------------------------------    */
/*    hopc compiler                                                    */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    Import/Export                                                    */
/*---------------------------------------------------------------------*/
import * as path from "path";
import * as fs from "fs";
import { compile as jsCompile } from "./hopc-js-compiler.mjs";
import { compile as tsCompile } from "./ts-js-compiler.mjs";
   
/*---------------------------------------------------------------------*/
/*    usage ...                                                        */
/*---------------------------------------------------------------------*/
function usage(argv, i) {
   if (i >= 0) {
      console.log(`hopc: wrong option "${argv[i]}" (see hopc --help)`);
   } else {
      console.log("hopc usage: source [-o target] [--help]");
   }
   process.exit(0);
}

/*---------------------------------------------------------------------*/
/*    hopCompile ...                                                   */
/*---------------------------------------------------------------------*/
async function hopCompile(src, tgt, typescript) {
   let tmp = undefined;
   
   if (!tgt) {
      tmp = src.replace(/\.hop\./, ".");
   } else if (tgt === "-") {
      tmp = path.join(path.dirname(src), "._" + path.basename(src));
   } else {
      tmp = tgt;
   }

   const jsfile = await jsCompile(src, tmp, { typescript: true });

   if (!tgt) {
      console.log(fs.readFileSync(jsfile).toString());
      path.rmSync(jsfile);
   }
}
   
/*---------------------------------------------------------------------*/
/*    main ...                                                         */
/*---------------------------------------------------------------------*/
async function main(argv) {
   let src = undefined;
   let tgt = undefined;
   let i = 2;

   while (i < argv.length) {
      switch (argv[i]) {
         case "--help": {
            usage(argv, -1);
         }
         case "-o": {
            if (i < argv.length - 1) {
               tgt = argv[i+1];
               i += 2;
               break;
            } else {
               usage(argv, i);
            }
         }
         default: {
            if (src) {
               usage(argv, i);
            } else {
               src = argv[i];
               i++;
               break;
            }
         }
      }
   }

   if (!src) {
      usage(argv, -1);
   } else {
      if (src.match(/\.hop\.ts$/)) {
	 // hop-to-typescript compilation
	 await hopCompile(src, tgt, true);
      } else if (src.match(/\.hop\.js$/)) {
	 // hop-to-javascript compilation
	 await hopCompile(src, tgt, false);
      } else if (src.match(/\.ts$/)) {
	 // typescript-to-javascript compilation
	 const tsfile = await tsCompile(src);

	 if (!tgt) {
	    console.log(fs.readFileSync(tsfile).toString());
	    path.rmSync(tsfile);
	 } else if (tsfile !== tgt) {
	    fs.renameSync(tsfile, tgt);
	    if (fs.existsSync(tsfile + ".map")) {
	       fs.renameSync(tsfile + ".map", tgt + ".map");
	    }
	 }
      } else {
	 throw `hopc: Don't know what do to with ${src}`;
      }
   } 
}


/*---------------------------------------------------------------------*/
/*    toplevel                                                         */
/*---------------------------------------------------------------------*/
main(process.argv);
