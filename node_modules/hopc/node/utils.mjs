import { readFileSync } from "node:fs";

export function symbolp(o) {
   return typeof(o) === "string";
}

export function symboltostring(x) {
   return x;
}

export function fileSeparator() {
   return "/";
}

export function makeFileName(base, file) {
   return base + "/" + file;
}

export function pwd() {
   return process.cwd();
}

export function fileNameCanonicalize$(path) {
   return path;
}

export function openInputFile(path) {
   return { filename: path, buffer: readFileSync(path).toString(), offset: 0 };
}

export function openInputString(val) {
   return { filename: val, buffer: val.toString(), offset: 0 };
}

export function inputPortName(inputPort) {
   return inputPort.filename;
}

export function inputPortPosition(inputPort) {
   return inputPort.offset;
}

export function format(fmt, ...args) {
   let fix = fmt.split("~");
   let res = fix[0];

   args.forEach((a, i) => {
      res += args[i].toString() + fix[i+1].substring(1);
   })

   return res;
}

/*---------------------------------------------------------------------*/
/*    memqArray ...                                                    */
/*---------------------------------------------------------------------*/
export function memqArray(obj, arr) {
   return arr && arr.indexOf(obj) >= 0;
}

/*---------------------------------------------------------------------*/
/*    substring ...                                                    */
/*---------------------------------------------------------------------*/
export function substring(s, offset, len) {
   return s.substring(offset, len);
}

/*---------------------------------------------------------------------*/
/*    stringPrefixp ...                                                */
/*---------------------------------------------------------------------*/
export function stringPrefixp(p, s) {
   return s.indexOf(p) === 0;
}

/*---------------------------------------------------------------------*/
/*    stringtosymbol ...                                               */
/*---------------------------------------------------------------------*/
export function stringtosymbol(s) {
   return s;
}
   
/*---------------------------------------------------------------------*/
/*    flonump ...                                                      */
/*---------------------------------------------------------------------*/
export function flonump(val) {
   return false;
}

/*---------------------------------------------------------------------*/
/*    bignump ...                                                      */
/*---------------------------------------------------------------------*/
export function bignump(val) {
   return false;
}

/*---------------------------------------------------------------------*/
/*    fixnumtollong ...                                                */
/*---------------------------------------------------------------------*/
export function fixnumtollong(val) {
   return val;
}

/*---------------------------------------------------------------------*/
/*    declUsageHasp ...                                                */
/*---------------------------------------------------------------------*/
export function declUsageHasp(decl, keys) {
   return keys.every(k => k in decl.usage);
}
