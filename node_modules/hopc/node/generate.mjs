/*=====================================================================*/
/*    .../project/hop/3.7.x/node_modules/hopc/node/generate.mjs        */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Thu Nov  2 14:38:40 2023                          */
/*    Last change :  Fri Nov 24 15:19:05 2023 (serrano)                */
/*    Copyright   :  2023 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Code generation from an Hop ast                                  */
/*=====================================================================*/
"use strict";

/*---------------------------------------------------------------------*/
/*    Import/Export                                                    */
/*---------------------------------------------------------------------*/
import { openSync, closeSync } from "fs";
import { base64VlqEncode } from "./base64-vlq.mjs";
import { readLines } from "@hop/readlines";
import { list2array, length, nullp, car, cdr, pairp } from "./list.mjs";
import { J2SNode, J2SProgram, J2SBlock, J2SLetBlock,
	 J2SImport, J2SImportName, J2SExport, J2SExportDefault,
	 J2SRedirect, J2SRedirectNamespace,
	 J2SStmt, J2SStmtExpr, J2SNop,
	 J2SVarDecls, J2SDecl, J2SDeclInit, J2SDeclRest,
	 J2SExpr, J2SParen, J2SSequence, J2SCond,
	 J2SAccess, J2SSeq, J2SObjInit,
	 J2SFun, J2SArrow, J2SDeclFun, J2SReturn,
	 J2SIf, J2SCatch, J2STry, 
	 J2SCall, J2SNew, 
	 J2SString, J2SUndefined, J2SNull, J2SBool, J2SNumber, 
	 J2SUnresolvedRef, J2SHopRef,
	 J2SDataPropertyInit, J2SArray,
	 J2SSpread, J2SAssig, J2SAssigOp, J2SPrefix, J2SPostfix,
	 J2SBindExit, J2SUnary, J2SBinary, J2SDollar } from "./ast.mjs";

export { generate };

/*---------------------------------------------------------------------*/
/*    Fragment ...                                                     */
/*---------------------------------------------------------------------*/
class Fragment {
   loc;
   val;
   
   constructor(obj, ... val) {
      this.loc = obj.loc;
      this.val = val;
      if (val.length === 0) {
	 throw "Illegal Fragment " + obj;
      }
   }

   toString() {
      return this.val.map(v => {
	 if (v instanceof Array) {
	    return v.map(v => v.toString()).join("\n");
	 } else {
	    return v.toString();
	 }
      }).join("");
   }

   mappings(source) {
      const fd = openSync(source, "r");
      const srclines = readLines(fd);
      const loclines = new Array(srclines.length).fill(0);
      closeSync(fd);

      // compute the starting and ending positions of each line
      for (let i = 0, offset = 0; i < srclines.length; i++) {
	 const len = srclines[i].length;
	 loclines[i] = { start: offset, end: offset + len };
	 offset += len + 1;
      }

      let dstlines = [{}];
      let line = 0, col = 0, location = 0;
      let f = this;

      function loc(e) {
	 const l = e.loc;
	 if ("offset" in l) {
	    return l.offset;
	 } else if (pairp(l)) {
	    return car(cdr(cdr(l)));
	 }
      }
      
      function walk(e) {
	 console.error("walk line=", line, " col=", col, dstlines.length, "e=", e, typeof e);
	 if (typeof e === "string") {
	    if (e === "\n") {
	       col = 0;
	       dstlines[++line] = {};
	    } else if (e.indexOf("\n") >= 0) {
	       const b = e.split("\n");
	       let i = 0;
	       for (; i < b.length - 1;  i++) {
		  walk(b[i]);
		  walk("\n");
	       }
	       walk(b[i]);
	    } else {
	       col += e.length;
	    }
	 } else if (typeof e === "array") {
	    for (let j = 0; j < e.length; j++) {
	       walk(e[j]);
	       col = 0;
	       dstlines[++line] = {};
	    }
	 } else if (e instanceof Fragment) {
	    dstlines[line][col] = loc(e);
	    for (e of e.val) {
	       walk(e);
	    }
	 } else if (e instanceof FragmentList) {
	    if (e.val.length > 0) {
	       let j = 0;
	       dstlines[line][col] = loc(e);
	    
	       for (; j < e.val.length - 1; j++) {
		  walk(e.val[j]);
		  walk(e.sep);
	       }
	       walk(e.val[j]);
	    }
	 } else {
	    walk(e.toString());
	 }
      }

      walk(this);
      console.error("line=", dstlines);
      return "";
   }
}
      
/*---------------------------------------------------------------------*/
/*    FragmentList ...                                                 */
/*---------------------------------------------------------------------*/
class FragmentList {
   loc;
   val;
   sep;
   
   constructor(obj, val, sep = ",") {
      this.loc = obj.loc;
      this.val = val;
      this.sep = sep;
   }

   toString() {
      return this.val.map(v => {
	 if (v instanceof Array) {
	    return v.map(v => v.toString()).join("\n");
	 } else {
	    return v.toString();
	 }
      }).join(this.sep);
   }
}
      
/*---------------------------------------------------------------------*/
/*    generate ...                                                     */
/*---------------------------------------------------------------------*/
const generate = prog => {
   return prog.generate();
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SNode ...                                           */
/*---------------------------------------------------------------------*/
J2SNode.prototype.generate = function() {
   throw("generate: should not be here: " + this.toString() + " " + this.clazz + " " + Object.keys(this));
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SNop ...                                            */
/*---------------------------------------------------------------------*/
J2SNop.prototype.generate = function() {
   return "";
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SProgram ...                                        */
/*---------------------------------------------------------------------*/
J2SProgram.prototype.generate = function() {
   const nodes = list2array(this.nodes).map(n => n.generate()).filter(x => x);
   const exports = list2array(this.exports).map(n => n.generate()).filter(x => x);
   return new Fragment(this, ...nodes.concat(exports));
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SImport ...                                         */
/*---------------------------------------------------------------------*/
J2SImport.prototype.generate = function() {
   if (nullp(this.names)) {
      return new Fragment(this, `import "${this.path}";`);
   } else if (car(this.names).id === "*") {
      return new Fragment(this, "import ", car(this.names).generate(), ` from "${this.path}";`, "\n");
   } else {
      return new Fragment(this, "import { ", list2array(this.names).map(n => n.generate()), ` } from "${this.path}";`);
   }
}

/*---------------------------------------------------------------------*/
/*    generate JJ2SImportName ...                                      */
/*---------------------------------------------------------------------*/
J2SImportName.prototype.generate = function() {
   if (this.id === this.alias) {
      return new Fragment(this, this.id);
   } else {
      return new Fragment(this, `${this.id} as ${this.alias}`);
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SExport ...                                         */
/*---------------------------------------------------------------------*/
J2SExport.prototype.generate = function() {
   if (this.id === this.alias) {
      return new Fragment(this, `export { ${this.id} };`);
   } else {
      return new Fragment(this, `export { ${this.id} as ${this.alias} };`);
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SExportDefault ...                                  */
/*---------------------------------------------------------------------*/
J2SExportDefault.prototype.generate = function() {
   if (this.id === this.alias) {
      return new Fragment(this, "export default ", this.expr.generate(), ";", "\n");
   } else {
      return new Fragment(this, `export default as ${this.alias} `, this.expr.generate(), ";", "\n");
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SRedirect ...                                       */
/*---------------------------------------------------------------------*/
J2SRedirect.prototype.generate = function() {
   if (this.id === this.alias) {
      return new Fragment(this, `export { ${this.id} } from \"${this.import.path}\";`, "\n");
   } else {
      return new Fragment(this, `export { ${this.id} as ${this.alias} } from \"${this.import.path}\";`, "\n");
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SRedirectNamespace ...                              */
/*---------------------------------------------------------------------*/
J2SRedirectNamespace.prototype.generate = function() {
   if (this.alias === "*") {
      return new Fragment(this, `export * from \"${this.path}\";`);
   } else {
      return new Fragment(this, `export * as ${this.alias} from \"${this.path}\";`);
   }
}
/*---------------------------------------------------------------------*/
/*    generate ::J2SSeq ...                                            */
/*---------------------------------------------------------------------*/
J2SSeq.prototype.generate = function() {
   return new Fragment(this, ...list2array(this.nodes).map(d => d.generate()));
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SBlock ...                                          */
/*---------------------------------------------------------------------*/
J2SBlock.prototype.generate = function() {
   return new Fragment(this, "{", new FragmentList(this, list2array(this.nodes).map(d => d.generate()), ";"), "}", "\n");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SLetBlock ...                                       */
/*---------------------------------------------------------------------*/
J2SLetBlock.prototype.generate = function() {
   const decls = list2array(this.decls).map(d => d.generate());
   const nodes = list2array(this.nodes).map(d => d.generate());
   return new Fragment(this, "{", new FragmentList(this, decls, ""), new FragmentList(this, nodes, ";"), "}", "\n");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SVarDecls ...                                       */
/*---------------------------------------------------------------------*/
J2SVarDecls.prototype.generate = function() {
   if (this.decls) {
      return new Fragment(this, new FragmentList(this, list2array(this.decls).map(d => d.generate()), "\n"));
   } else {
      return new Fragment(this, "");
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDecl ...                                           */
/*---------------------------------------------------------------------*/
J2SDecl.prototype.generate = function() {
   return new Fragment(this, this.id);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDeclRest ...                                       */
/*---------------------------------------------------------------------*/
J2SDeclRest.prototype.generate = function() {
   return new Fragment(this, `...${this.id}`);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDeclInit ...                                       */
/*---------------------------------------------------------------------*/
J2SDeclInit.prototype.generate = function() {
   switch (this.binder) {
      case "var": {
	 return new Fragment(this, `var ${this.id} = `, this.val.generate(), ";");
      }
      case "let-opt":
      case "let": {
	 return new Fragment(this, `${this.writable ? "let" : "const"} ${this.id} = `, this.val.generate(), ";");
      }
      default: {
	 return new Fragment(this, `var ${this.id} = `, this.val.generate(), ";");
      }
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDeclFun ...                                        */
/*---------------------------------------------------------------------*/
J2SDeclFun.prototype.generate = function() {
   return new Fragment(this, `let ${this.id} = `, this.val.generate(), this.expression ? "" : ";");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SCall ...                                           */
/*---------------------------------------------------------------------*/
J2SCall.prototype.generate = function() {
   const fclazz = this.fun.clazz;
   const fun = this.fun.generate();
   const args = new FragmentList(this, list2array(this.args).map(n => n.generate().toString()));
   if (fclazz === "J2SRef" || fclazz === "J2SAccess" || fclazz === "J2SUnresolvedRef") {
      return new Fragment(this, fun, "(", args, ")");
   } else {
      return new Fragment(this, "(", fun, ")", "(", args, ")");
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SNew ...                                            */
/*---------------------------------------------------------------------*/
J2SNew.prototype.generate = function() {
   const args = new FragmentList(this, list2array(this.args).map(n => n.generate()));
   return new Fragment(this, "new ", this.clazz.generate(), "(", args, ")");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SUnresolvedRef ...                                  */
/*---------------------------------------------------------------------*/
J2SUnresolvedRef.prototype.generate = function() {
   return new Fragment(this, this.id);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SHopRef ...                                         */
/*---------------------------------------------------------------------*/
J2SHopRef.prototype.generate = function() {
   switch (this.id) {
      case "%import-meta": return new Fragment(this, "import.meta");
      default: return new Fragment(this, this.id);
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SSequence                                           */
/*---------------------------------------------------------------------*/
J2SSequence.prototype.generate = function() {
   return new Fragment(this, "(", new FragmentList(this, list2array(this.exprs).map(d => d.generate())), ")");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SCond                                               */
/*---------------------------------------------------------------------*/
J2SCond.prototype.generate = function() {
   return new Fragment(this, "(", this.test.generate(), "?", this.then.generate(), ":", this.else.generate(), ")");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SParen                                              */
/*---------------------------------------------------------------------*/
J2SParen.prototype.generate = function() {
   return new Fragment(this, "(", this.expr.generate(), ")");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SAccess                                             */
/*---------------------------------------------------------------------*/
J2SAccess.prototype.generate = function() {
   const field = this.field.generate();
   const obj = this.obj.generate();
   const m = field.toString().match(/"([a-zA-Z_][a-zA-Z0-9_]*)"/);

   if (m) {
      return new Fragment(this, obj, ".", m[1]);
   } else {
      return new Fragment(this, obj, "[", field, "]");
   }
}

J2SString.prototype.generate = function() {
   return new Fragment(this, `"${this.val}"`);
}

J2SUndefined.prototype.generate = function() {
   return new Fragment(this, "undefined");
}

J2SNull.prototype.generate = function() {
   return new Fragment(this, "null");
}

J2SBool.prototype.generate = function() {
   return new Fragment(this, this.val);
}

J2SNumber.prototype.generate = function() {
   return new Fragment(this, this.val);
}

J2SStmtExpr.prototype.generate = function() {
   return new Fragment(this, this.expr.generate(), ";", "\n");
}

J2SObjInit.prototype.generate = function() {
   return new Fragment(this, "{", new FragmentList(this, list2array(this.inits).map(n => n.generate())), "}");
}

J2SDataPropertyInit.prototype.generate = function() {
   const name = this.name;
   if (name instanceof J2SString || name instanceof J2SNumber) {
      return new Fragment(this, name.generate(), ":", this.val.generate());;
   } else {
      console.error("NOT SUPPORTED", this);
      throw "DataPropertyInit form not supported";
   }
}

J2SArray.prototype.generate = function() {
   return new Fragment(this, "[", new FragmentList(this, list2array(this.exprs).map(e => e.generate())), "]");
}

J2SFun.prototype.generate = function() {
   return new Fragment(this, "function(", new FragmentList(this, list2array(this.params).map(n => n.generate())), ")", this.body.generate());
}

J2SArrow.prototype.generate = function() {
   return new Fragment(this, "(", new FragmentList(this, list2array(this.params).map(n => n.generate())), ") => ", this.body.generate());
}

J2SReturn.prototype.generate = function() {
   return new Fragment(this, "return ", this.expr.generate(), ";", "\n");
}

J2SIf.prototype.generate = function() {
   return new Fragment(this, "if (", this.test.generate(), ")", this.then.clazz === "J2SNop" ? "{}" : this.then.generate(), this.else.clazz === "J2SNop" ? "{}" : this.else.generate(), "\n");
}

J2SCatch.prototype.generate = function() {
   return new Fragment(this, "catch (", this.param.generate(), ")", this.body.generate());
}

J2STry.prototype.generate = function() {
   return new Fragment(this, "try ", this.body.generate(), this.catch.clazz === "J2SNop" ? "" : this.catch.generate(), this.finally.clazz === "J2SNop" ? "" : this.finally.generate(), "\n");
}

J2SAssig.prototype.generate = function() {
   return new Fragment(this, this.lhs.generate(), "=", this.rhs.generate());
}

J2SAssigOp.prototype.generate = function() {
   return new Fragment(this, this.lhs.generate(), this.op, "=", this.rhs.generate());
}

J2SPrefix.prototype.generate = function() {
   return new Fragment(this, this.op, this.rhs.lhs.generate());
}

J2SPostfix.prototype.generate = function() {
   return new Fragment(this, this.rhs.lhs.generate(), this.op);
}

J2SBindExit.prototype.generate = function() {
   if (this.blb) {
      throw "BINDEXIT: lbl not supported";
   } else {
      return new Fragment(this, "((() => ", this.stmt.generate(), ")())");
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SUnary ...                                          */
/*---------------------------------------------------------------------*/
J2SUnary.prototype.generate = function() {
   if (this.op === "?.") {
      return new Fragment(this, this.expr.generate(), "?");
   } else {
      return new Fragment(this, this.op, this.expr.generate());
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SBinary ...                                         */
/*---------------------------------------------------------------------*/
J2SBinary.prototype.generate = function() {
   
   function j2sop(op) {
      switch (op) {
	 case "OR": return "||";
	 case "BIT_OR": return "|";
	 case "++": return "+";
	 case "--": return "-";
	 default: return op;
      }
   }
   
   return new Fragment(this, this.lhs.generate(), j2sop(this.op), this.rhs.generate());
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDollar ...                                         */
/*---------------------------------------------------------------------*/
J2SDollar.prototype.generate = function() {
   return this.node.generate();
}

