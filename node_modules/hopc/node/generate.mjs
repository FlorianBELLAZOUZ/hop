"use strict";

import { foreach, list2array, length, nullp, car, cdr } from "./list.mjs";
import { J2SNode, J2SProgram, J2SBlock,
	 J2SImport, J2SImportName, J2SExport,
	 J2SStmt, J2SStmtExpr, J2SNop,
	 J2SVarDecls, J2SDecl, J2SDeclInit, J2SDeclRest,
	 J2SExpr, J2SParen, 
	 J2SAccess, J2SSeq, J2SObjInit,
	 J2SFun, J2SArrow, J2SDeclFun, J2SReturn,
	 J2SCall, J2SNew, 
	 J2SString, J2SUndefined, J2SNull, J2SBool, J2SNumber,
	 J2SUnresolvedRef, J2SHopRef,
	 J2SDataPropertyInit,
	 J2SSpread, J2SAssig } from "./ast.mjs";

export const generate = prog => {
   return prog.generate();
}

J2SNode.prototype.toString = function() {
   return `<${this.clazz}>`;
}

J2SNode.prototype.generate = function() {
   throw("generate: should not be here: " + this.toString() + " " + this.clazz + " " + Object.keys(this));
}

J2SProgram.prototype.generate = function() {
   return "A PROG";
}

J2SNop.prototype.generate = function() {
   return "";
}

J2SProgram.prototype.generate = function() {
   return list2array(this.nodes).map(n => n.generate()).filter(x => x).join("\n");
}

J2SImport.prototype.generate = function() {
   if (nullp(this.names)) {
      return `import "${this.path}";`;
   } else if (car(this.names).id === "*") {
      return `import ${car(this.names).generate()} from "${this.path}";`;
   } else {
      return `import { ${list2array(this.names).map(n => n.generate()).join("")} } from "${this.path}";`;
   }
}

J2SImportName.prototype.generate = function() {
   if (this.id === this.alias) {
      return this.id;
   } else {
      return `${this.id} as ${this.alias}`;
   }
}

J2SExport.prototype.generate = function() {
   if (this.id === this.alias) {
      return `export { ${this.id} };`
   } else {
      return `export { ${this.id} as ${this.alias} };`
   }
}

J2SBlock.prototype.generate = function() {
   return `{${list2array(this.nodes).map(d => d.generate()).join(";")}}`;
}

J2SVarDecls.prototype.generate = function() {
   if (this.decls) {
      return list2array(this.decls).map(d => d.generate()).join("");
   } else {
      return "";
   }
}

J2SDecl.prototype.generate = function() {
   return this.id;
}

J2SDeclRest.prototype.generate = function() {
   return `...${this.id}`;
}

J2SDeclInit.prototype.generate = function() {
   switch (this.binder) {
      case "var": {
	 return `var ${this.id} = ${this.val.generate()};`;
      }
      case "let": {
	 return `${this.writable ? "let" : "const"} ${this.id} = ${this.val.generate()};`;
      }
      default: {
	 return `var ${this.id} = ${this.val.generate()};`;
      }
   }
}

J2SDeclFun.prototype.generate = function() {
   return `let ${this.id} = ${this.val.generate()}${this.expression ? "" : ";"}`;
}

J2SCall.prototype.generate = function() {
   return `${this.fun.generate()}(${list2array(this.args).map(n => n.generate()).join()})`;
}

J2SNew.prototype.generate = function() {
   return "new "
      + this.clazz.generate()
      + "(" + list2array(this.args).map(n => n.generate()).join()
      + ")";
}

J2SUnresolvedRef.prototype.generate = function() {
   return this.id;
}

J2SAccess.prototype.generate = function() {
   return `${this.obj.generate()}[${this.field.generate()}]`;
}

J2SString.prototype.generate = function() {
   return `"${this.val}"`;
}

J2SUndefined.prototype.generate = function() {
   return "undefined";
}

J2SNull.prototype.generate = function() {
   return "null";
}

J2SBool.prototype.generate = function() {
   return this.val;
}

J2SNumber.prototype.generate = function() {
   return this.val;
}

J2SStmtExpr.prototype.generate = function() {
   return this.expr.generate() + ";";
}

J2SObjInit.prototype.generate = function() {
   return `{${list2array(this.inits).map(n => n.generate())}}`;
}

J2SDataPropertyInit.prototype.generate = function() {
   const name = this.name;
   if (name instanceof J2SString || name instanceof J2SNumber) {
      return `${name.generate()}: ${this.val.generate()}`;
   } else {
      throw "DataPropertyInit form not supported";
   }
}

J2SFun.prototype.generate = function() {
   return `function(${list2array(this.params).map(n => n.generate()).join()})${this.body.generate()}`;
}

J2SArrow.prototype.generate = function() {
   return `(${list2array(this.params).map(n => n.generate()).join()}) => ${this.body.generate()}`;
}

J2SReturn.prototype.generate = function() {
   return `return ${this.expr.generate()}`;o
}


J2SAssig.prototype.generate = function() {
   return `${this.lhs.generate()} = ${this.rhs.generate()}`;
}
