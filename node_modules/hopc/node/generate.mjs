/*=====================================================================*/
/*    .../project/hop/3.7.x/node_modules/hopc/node/generate.mjs        */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Thu Nov  2 14:38:40 2023                          */
/*    Last change :  Thu Dec  7 07:35:27 2023 (serrano)                */
/*    Copyright   :  2023 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Code generation from an Hop ast                                  */
/*=====================================================================*/
"use strict";

/*---------------------------------------------------------------------*/
/*    Import/Export                                                    */
/*---------------------------------------------------------------------*/
import { openSync, closeSync } from "fs";
import { base64VlqEncode as vlq } from "./base64-vlq.mjs";
import { readLines } from "@hop/readlines";
import { list2array, length, nullp, car, cdr, pairp } from "./list.mjs";
import { J2SNode, J2SProgram, J2SBlock, J2SLetBlock,
	 J2SImport, J2SImportName, J2SImportDynamic,
	 J2SExport, J2SExportDefault,
	 J2SRedirect, J2SRedirectNamespace,
	 J2SStmt, J2SStmtExpr, J2SNop,
	 J2SVarDecls, J2SDecl, J2SDeclInit, J2SDeclRest,
	 J2SExpr, J2SParen, J2SSequence, J2SCond,
	 J2SAccess, J2SSeq, J2SObjInit,
	 J2SFun, J2SArrow, J2SDeclFun, J2SDeclSvc, J2SReturn,
	 J2SIf, J2SCatch, J2STry, J2SThrow,
	 J2SFor, J2SForIn, J2SWhile, J2SDo,
	 J2SCall, J2SNew, 
	 J2SString, J2SUndefined, J2SNull, J2SBool, J2SNumber, J2SOctalNumber, J2SRegExp,
	 J2SArray, J2SArrayAbsent,
	 J2SUnresolvedRef, J2SRef, J2SHopRef,
	 J2SPropertyInit, J2SDataPropertyInit, J2SAccessorPropertyInit, J2SMethodPropertyInit,
	 J2SSpread, J2SDConsumer, J2SDProducer,
	 J2SAssig, J2SAssigOp, J2SPrefix, J2SPostfix,
	 J2SBindExit, J2SUnary, J2SBinary, J2STemplate,
	 J2SDeclClass, J2SClass, J2SClassElement,
	 J2SDollar } from "./ast.mjs";

export { generate };

/*---------------------------------------------------------------------*/
/*    objToLocOffset ...                                               */
/*---------------------------------------------------------------------*/
function objToLocOffset(obj) {
   const loc = obj.loc;
   if (typeof obj === "number") {
      return obj;
   } else if ("offset" in loc) {
      return loc.offset;
   } else if (pairp(loc)) {
      return car(cdr(cdr(loc)));
   } else {
      return -1;
   }
}

/*---------------------------------------------------------------------*/
/*    Fragment ...                                                     */
/*---------------------------------------------------------------------*/
class Fragment {
   offset;
   val;
   
   constructor(obj, ... val) {
      this.offset = objToLocOffset(obj);
      this.val = val;
      if (val.length === 0) {
	 throw "Illegal Fragment " + obj;
      }
   }

   toString() {
      return this.val.map(v => {
	 if (v instanceof Array) {
	    return v.map(v => v.toString()).join("\n");
	 } else {
	    return v.toString();
	 }
      }).join("");
   }

   mappings(source) {
      const fd = openSync(source, "r");
      const srclines = readLines(fd);
      const loclines = new Array(srclines.length).fill(0);
      closeSync(fd);

      // compute the starting and ending positions of each line
      for (let i = 0, offset = 0; i < srclines.length; i++) {
	 const len = srclines[i].length;
	 loclines[i] = { start: offset, end: offset + len, num: i };
	 offset += len + 1;
      }
      // accomodate the eof character
      loclines[srclines.length - 1].end++;
      
      let dstlines = [{}];
      let line = 0, col = 0;
      let f = this;

      function walk(e) {
	 //console.error("line=" + line, " col=" + col, "E=" + e.toString(), typeof e, e.constructor.name);
	 if (typeof e === "string") {
	    if (e === "\n") {
	       col = 0;
	       dstlines[++line] = {};
	    } else if (e.indexOf("\n") >= 0) {
	       const b = e.split("\n");
	       let i = 0;
	       for (; i < b.length - 1;  i++) {
		  walk(b[i]);
		  walk("\n");
	       }
	       walk(b[i]);
	    } else {
	       col += e.length;
	    }
	 } else if (typeof e === "array") {
	    for (let j = 0; j < e.length - 1; j++) {
	       walk(e[j]);
	       col = 0;
	       dstlines[++line] = {};
	    }
	    walk(e[e.length - 1]);
	 } else if (e instanceof Fragment) {
	    if (e.offset !== undefined) dstlines[line][col] = e.offset;
	    // console.error("  --", "line=" + line, "col=" + col, "->", e.offset);
	    for (let f of e.val) {
	       walk(f);
	    }
	 } else if (e instanceof FragmentList) {
	    if (e.offset !== undefined) dstlines[line][col] = e.offset;
	    if (e.val.length > 0) {
	       for (let j = 0; j < e.val.length - 1; j++) {
		  walk(e.val[j]);
		  walk(e.sep);
	       }
	       walk(e.val[e.val.length - 1]);
	    }
	 } else {
	    walk(e.toString());
	 }
      }

      function findOriginalLocation(loc) {
	 let line = loclines.find(l => loc <= l.end && loc >= l.start);
	 //console.error("LOC=", loc, " LINE=", line);
	 if (!line) {
	    console.error("SOURCEMAP ERROR, cannot find location", loc);
	    console.error(loclines);
	    return { oline: 0, ocol: 0 };
	 }
	 
	 return { oline: line.num, ocol: loc - line.start };
      }

      let sourcemapGcol = 0, sourcemapOline = 0, sourcemapOcol = 0;
      
      function encode(line) {
	 // each fragment is:
	 //   - column in generated code
	 //   - corresponding source file
	 //   - line number in orignal code
	 //   - column in original code
	 const components = [];

	 //console.error("-------------------");
	 // generated column counter is implicit reset to 0 for each new line
	 sourcemapGcol = 0;
	 for (let k in line) {
	    if (line[k] === undefined) {
	       console.error("SOURCEMAP ERROR, wrong line", line);
	    }
	    const { oline: ol, ocol: oc } = findOriginalLocation(line[k]);
	    // console.error(k  + "/" + sourcemapGcol, "(" + line[k] + ")", "->", ol, oc + "/" + sourcemapOcol);
	    components.push(vlq(k - sourcemapGcol) + "A" + vlq(ol - sourcemapOline) + vlq(oc - sourcemapOcol));
	    sourcemapGcol = k;
	    sourcemapOline = ol;
	    sourcemapOcol = oc;
	 }
	 if (components.length > 0) {
	    return components.join(",");
	 }
      }

      walk(this);

/*       console.log(dstlines);                                        */
/*       console.log(loclines);                                        */
      return dstlines.map(encode).join(";");
   }
}
      
/*---------------------------------------------------------------------*/
/*    FragmentList ...                                                 */
/*---------------------------------------------------------------------*/
class FragmentList {
   loc;
   val;
   sep;
   
   constructor(obj, val, sep = ",") {
      this.offset = objToLocOffset(obj);
      this.val = val;
      this.sep = sep;
   }

   toString() {
      return this.val.map(v => {
	 if (v instanceof Array) {
	    return v.map(v => v.toString()).join("\n");
	 } else {
	    return v.toString();
	 }
      }).join(this.sep);
   }
}
      
/*---------------------------------------------------------------------*/
/*    generate ...                                                     */
/*---------------------------------------------------------------------*/
const generate = prog => {
   return prog.generate();
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SNode ...                                           */
/*---------------------------------------------------------------------*/
J2SNode.prototype.generate = function() {
   throw("generate: "  + this.toString() + " not implemented,"
      + " $class=" + this.$class
      + " keys=" + Object.keys(this));
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SNop ...                                            */
/*---------------------------------------------------------------------*/
J2SNop.prototype.generate = function() {
   return "";
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SProgram ...                                        */
/*---------------------------------------------------------------------*/
J2SProgram.prototype.generate = function() {
   const nodes = list2array(this.nodes).map(n => n.generate()).filter(x => x);
   const exports = list2array(this.exports).map(n => n.generate()).filter(x => x);
   return new Fragment(this, ...nodes.concat(exports));
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SImport ...                                         */
/*---------------------------------------------------------------------*/
J2SImport.prototype.generate = function() {
   if (nullp(this.names)) {
      return new Fragment(this, `import "${this.path}";`);
   } else if (car(this.names).id === "*") {
      return new Fragment(this, "import ", car(this.names).generate(), ` from "${this.path}";`, "\n");
   } else {
      return new Fragment(this, "import { ", list2array(this.names).map(n => n.generate()), ` } from "${this.path}";`);
   }
}

/*---------------------------------------------------------------------*/
/*    generate JJ2SImportName ...                                      */
/*---------------------------------------------------------------------*/
J2SImportName.prototype.generate = function() {
   if (this.id === this.alias) {
      return new Fragment(this, this.id);
   } else {
      return new Fragment(this, `${this.id} as ${this.alias}`);
   }
}

/*---------------------------------------------------------------------*/
/*    generate JJ2SImportDynamic ...                                   */
/*---------------------------------------------------------------------*/
J2SImportDynamic.prototype.generate = function() {
   return new Fragment(this, "import(", this.path.generate(), ")");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SExport ...                                         */
/*---------------------------------------------------------------------*/
J2SExport.prototype.generate = function() {
   if (this.id === this.alias) {
      return new Fragment(this, `export { ${this.id} };`);
   } else {
      return new Fragment(this, `export { ${this.id} as ${this.alias} };`);
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SExportDefault ...                                  */
/*---------------------------------------------------------------------*/
J2SExportDefault.prototype.generate = function() {
   if (this.id === this.alias) {
      return new Fragment(this, "export default ", this.expr.generate(), ";", "\n");
   } else {
      return new Fragment(this, `export default as ${this.alias} `, this.expr.generate(), ";", "\n");
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SRedirect ...                                       */
/*---------------------------------------------------------------------*/
J2SRedirect.prototype.generate = function() {
   if (this.id === this.alias) {
      return new Fragment(this, `export { ${this.id} } from \"${this.import.path}\";`, "\n");
   } else {
      return new Fragment(this, `export { ${this.id} as ${this.alias} } from \"${this.import.path}\";`, "\n");
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SRedirectNamespace ...                              */
/*---------------------------------------------------------------------*/
J2SRedirectNamespace.prototype.generate = function() {
   if (this.alias === "*") {
      return new Fragment(this, `export * from \"${this.path}\";`);
   } else {
      return new Fragment(this, `export * as ${this.alias} from \"${this.path}\";`);
   }
}
/*---------------------------------------------------------------------*/
/*    generate ::J2SSeq ...                                            */
/*---------------------------------------------------------------------*/
J2SSeq.prototype.generate = function() {
   return new Fragment(this, ...list2array(this.nodes).map(d => d.generate()));
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SBlock ...                                          */
/*---------------------------------------------------------------------*/
J2SBlock.prototype.generate = function() {
   return new Fragment(this, "{", "\n", new FragmentList(this, list2array(this.nodes).map(d => d.generate()), ""), "}");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SLetBlock ...                                       */
/*---------------------------------------------------------------------*/
J2SLetBlock.prototype.generate = function() {
   const decls = list2array(this.decls).map(d => d.generate());
   const nodes = list2array(this.nodes).map(d => d.generate());
   return new Fragment(this, "{", "\n", new FragmentList(this, decls, ""), new FragmentList(this, nodes, ""), "}");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SVarDecls ...                                       */
/*---------------------------------------------------------------------*/
J2SVarDecls.prototype.generate = function() {
   if (this.decls) {
      return new Fragment(this, new FragmentList(this, list2array(this.decls).map(d => d.generate()), ""), "\n");
   } else {
      return new Fragment(this, "");
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDecl ...                                           */
/*---------------------------------------------------------------------*/
J2SDecl.prototype.generate = function() {
   return new Fragment(this, this.id);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDeclRest ...                                       */
/*---------------------------------------------------------------------*/
J2SDeclRest.prototype.generate = function() {
   return new Fragment(this, `...${this.id}`);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDeclInit ...                                       */
/*---------------------------------------------------------------------*/
J2SDeclInit.prototype.generate = function() {
   let binder = "var ";
   let loc = objToLocOffset(this);
   
   switch (this.binder) {
      case "let-opt":
      case "let": {
	 let loc = objToLocOffset(this);
	 if (this.writable) {
	    binder = "let ";
	 } else {
	    binder = "const ";
	 }
      }
   }
   return new Fragment(
      this, binder,
      new Fragment(loc + binder.length, this.id, "=", this.val.generate(), ";"));
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDeclFun ...                                        */
/*---------------------------------------------------------------------*/
J2SDeclFun.prototype.generate = function() {
   return new Fragment(this, `let ${this.id} = `, this.val.generate(), this.expression ? "" : ";");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDeclSvc ...                                        */
/*---------------------------------------------------------------------*/
J2SDeclSvc.prototype.generate = function() {
   return new Fragment(this, "hop.service(", this.val.generate(),
		       ",\"", this.id, "\")", this.expression ? "" : ";");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SCall ...                                           */
/*---------------------------------------------------------------------*/
J2SCall.prototype.generate = function() {
   const f$class = this.fun.$class;
   const fun = this.fun.generate();
   const args = new FragmentList(this, list2array(this.args).map(n => n.generate()));
   if (f$class === "J2SRef" || f$class === "J2SAccess" || f$class === "J2SUnresolvedRef") {
      return new Fragment(this, fun, "(", args, ")");
   } else {
      return new Fragment(this, "(", fun, ")", "(", args, ")");
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SNew ...                                            */
/*---------------------------------------------------------------------*/
J2SNew.prototype.generate = function() {
   const args = new FragmentList(this, list2array(this.args).map(n => n.generate()));
   return new Fragment(this, "new ", this.clazz.generate(), "(", args, ")");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SUnresolvedRef ...                                  */
/*---------------------------------------------------------------------*/
J2SUnresolvedRef.prototype.generate = function() {
   return new Fragment(this, this.id);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SRef ...                                            */
/*---------------------------------------------------------------------*/
J2SRef.prototype.generate = function() {
   return new Fragment(this, this.decl.id);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SHopRef ...                                         */
/*---------------------------------------------------------------------*/
J2SHopRef.prototype.generate = function() {
   switch (this.id) {
      case "%import-meta": return new Fragment(this, "import.meta");
      default: return new Fragment(this, this.id);
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SSequence                                           */
/*---------------------------------------------------------------------*/
J2SSequence.prototype.generate = function() {
   return new Fragment(this, "(", new FragmentList(this, list2array(this.exprs).map(d => d.generate())), ")");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SCond                                               */
/*---------------------------------------------------------------------*/
J2SCond.prototype.generate = function() {
   return new Fragment(this, "(", this.test.generate(), "?", this.then.generate(), ":", this.else.generate(), ")");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SParen                                              */
/*---------------------------------------------------------------------*/
J2SParen.prototype.generate = function() {
   return new Fragment(this, "(", this.expr.generate(), ")");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SAccess                                             */
/*---------------------------------------------------------------------*/
J2SAccess.prototype.generate = function() {
   const field = this.field.generate();
   const obj = this.obj.generate();
   const m = field.toString().match(/"([a-zA-Z_][a-zA-Z0-9_]*)"/);

   if (m) {
      return new Fragment(
	 this, obj,
	 new Fragment(this.field, ".", m[1]));
   } else {
      return new Fragment(
	 this, obj,
	 new Fragment(this.field, "[", field, "]"));
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2Sstring                                             */
/*---------------------------------------------------------------------*/
J2SString.prototype.generate = function() {
   return new Fragment(this, `"${this.val}"`);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SUndefined                                          */
/*---------------------------------------------------------------------*/
J2SUndefined.prototype.generate = function() {
   return new Fragment(this, "undefined");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SNull                                               */
/*---------------------------------------------------------------------*/
J2SNull.prototype.generate = function() {
   return new Fragment(this, "null");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SBool                                               */
/*---------------------------------------------------------------------*/
J2SBool.prototype.generate = function() {
   return new Fragment(this, this.val);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SNumber ...                                         */
/*---------------------------------------------------------------------*/
J2SNumber.prototype.generate = function() {
   return new Fragment(this, this.val);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SOctalNumber ...                                    */
/*---------------------------------------------------------------------*/
J2SOctalNumber.prototype.generate = function() {
   return new Fragment(this, this.val === 0 ? "0" : "0" + this.val);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SRegExp ...                                         */
/*---------------------------------------------------------------------*/
J2SRegExp.prototype.generate = function() {
   return new Fragment(this, "/", this.val, "/", this.flags);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SStmtExpr ...                                       */
/*---------------------------------------------------------------------*/
J2SStmtExpr.prototype.generate = function() {
   return new Fragment(this, this.expr.generate(), ";");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SObjInit ...                                        */
/*---------------------------------------------------------------------*/
J2SObjInit.prototype.generate = function() {
   return new Fragment(this, "{", new FragmentList(this, list2array(this.inits).map(n => n.generate())), "}");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SPropertyInit                                       */
/*---------------------------------------------------------------------*/
J2SPropertyInit.prototype.generate = function() {
   const { name, val } = this;
   if (name instanceof J2SString || name instanceof J2SNumber) {
      return new Fragment(this, name.generate(), ":", val.generate());
   } else if (name instanceof J2SUndefined && val instanceof J2SSpread) {
      return new Fragment(this, "...", val.expr.generate());
   } else {
      return new Fragment(this, "[", name.generate(), "]:", val.generate());
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDataPropertyInit                                   */
/*---------------------------------------------------------------------*/
J2SDataPropertyInit.prototype.generate = function() {
   const name = this.name;
   if (name instanceof J2SString || name instanceof J2SNumber) {
      return new Fragment(this, name.generate(), ":", this.val.generate());;
   } else if (name instanceof J2STemplate) {
      return new Fragment(this, "[", name.generate(), "]:", this.val.generate());;
   } else {
      console.error("NOT SUPPORTED", this);
      throw "DataPropertyInit form not supported";
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SArray ...                                          */
/*---------------------------------------------------------------------*/
J2SArray.prototype.generate = function() {
   return new Fragment(this, "[", new FragmentList(this, list2array(this.exprs).map(e => e.generate())), "]");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SArrayAbsent ...                                    */
/*---------------------------------------------------------------------*/
J2SArrayAbsent.prototype.generate = function() {
   return new Fragment(this, "");
}
   
/*---------------------------------------------------------------------*/
/*    generateFun ...                                                  */
/*---------------------------------------------------------------------*/
function generateFun(id, keyword) {
   return new Fragment(this, keyword, id ? id + " " : "", "(", new FragmentList(this, list2array(this.params).map(n => n.generate())), ") ", this.body.generate());
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SFun ...                                            */
/*---------------------------------------------------------------------*/
J2SFun.prototype.generate = function() {
   return generateFun.call(this, this.decl instanceof J2SDecl ? this.decl.id : "", "function");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SArrow ...                                          */
/*---------------------------------------------------------------------*/
J2SArrow.prototype.generate = function() {
   return new Fragment(this, "(", new FragmentList(this, list2array(this.params).map(n => n.generate())), ") => ", this.body.generate());
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SReturn ...                                         */
/*---------------------------------------------------------------------*/
J2SReturn.prototype.generate = function() {
   return new Fragment(this, "return ", this.expr.generate(), ";", "\n");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SIf ...                                             */
/*---------------------------------------------------------------------*/
J2SIf.prototype.generate = function() {
   if (this.else.$class === "J2SNop") {
      return new Fragment(this, "if (", this.test.generate(), ") ", this.then.$class === "J2SNop" ? ";" : this.then.generate(), "\n");
   } else {
      return new Fragment(this, "if (", this.test.generate(), ") ", this.then.$class === "J2SNop" ? ";" : this.then.generate(), " else ", this.else.generate(), "\n");
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SCatch ...                                          */
/*---------------------------------------------------------------------*/
J2SCatch.prototype.generate = function() {
   return new Fragment(this, "catch (", this.param.generate(), ") ", this.body.generate());
}

/*---------------------------------------------------------------------*/
/*    generate ::J2STry                                                */
/*---------------------------------------------------------------------*/
J2STry.prototype.generate = function() {
   return new Fragment(this, "try ", this.body.generate(), this.catch.$class === "J2SNop" ? "" : this.catch.generate(), this.finally.$class === "J2SNop" ? "" : this.finally.generate(), "\n");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SThrow                                              */
/*---------------------------------------------------------------------*/
J2SThrow.prototype.generate = function() {
   return new Fragment(this, "throw ", this.expr.generate());
}

/*---------------------------------------------------------------------*/
/*    J2SFor ...                                                       */
/*---------------------------------------------------------------------*/
J2SFor.prototype.generate = function() {
   return new Fragment(
      this, "for (",
      new FragmentList(this, [ this.init.generate(), this.test.generate(), this.inc.generate() ], "),"),
      this.body.generate(), "\n");
}

/*---------------------------------------------------------------------*/
/*    J2SForIn ...                                                     */
/*---------------------------------------------------------------------*/
J2SForIn.prototype.generate = function() {
   return new Fragment(
      this, "for (",
      this.lhs instanceof J2SVarDecls
	 ? new Fragment(this.lhs, "let ", this.lhs.decls.car.id)
	 : this.lhs.generate(),
      this.op === "in" ? " in " : " of ",
      this.obj.generate(),
      ") ",
      this.body.generate(),
      "\n");
}

/*---------------------------------------------------------------------*/
/*    J2SWhile ...                                                     */
/*---------------------------------------------------------------------*/
J2SWhile.prototype.generate = function() {
   return new Fragment(
      this, "while (", this.test.generate(), ")", this.body.generate(), "\n");
}
   
/*---------------------------------------------------------------------*/
/*    J2SDo ...                                                        */
/*---------------------------------------------------------------------*/
J2SDo.prototype.generate = function() {
   return new Fragment(
      this, "do ", this.body.generate(), " while (", this.test.generate(), ")", "\n");
}
   
/*---------------------------------------------------------------------*/
/*    generate ::J2SAssig ...                                          */
/*---------------------------------------------------------------------*/
J2SAssig.prototype.generate = function() {
   return new Fragment(this, this.lhs.generate(), "=", this.rhs.generate());
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SAssigOp ...                                        */
/*---------------------------------------------------------------------*/
J2SAssigOp.prototype.generate = function() {
   return new Fragment(this, this.lhs.generate(), this.op, "=", this.rhs.generate());
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SPrefix ...                                         */
/*---------------------------------------------------------------------*/
J2SPrefix.prototype.generate = function() {
   return new Fragment(this, this.op, this.rhs.lhs.generate());
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SPostfix ...                                        */
/*---------------------------------------------------------------------*/
J2SPostfix.prototype.generate = function() {
   return new Fragment(this, this.rhs.lhs.generate(), this.op);
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SBindExit ...                                       */
/*---------------------------------------------------------------------*/
J2SBindExit.prototype.generate = function() {
   if (this.blb) {
      throw "BINDEXIT: lbl not supported";
   } else {
      return new Fragment(this, "((() => ", this.stmt.generate(), ")())");
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SUnary ...                                          */
/*---------------------------------------------------------------------*/
J2SUnary.prototype.generate = function() {
   if (this.op === "?.") {
      return new Fragment(this, this.expr.generate(), "?");
   } else if (this.op === "typeof") {
      return new Fragment(this, this.op, " ", this.expr.generate());
   } else {
      return new Fragment(this, this.op, this.expr.generate());
   }
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SBinary ...                                         */
/*---------------------------------------------------------------------*/
J2SBinary.prototype.generate = function() {
   
   function j2sop(op) {
      switch (op) {
	 case "OR": return "||";
	 case "BIT_OR": return "|";
	 case "++": return "+";
	 case "--": return "-";
	 default: return op;
      }
   }
   
   return new Fragment(this, this.lhs.generate(), j2sop(this.op), this.rhs.generate());
}

/*---------------------------------------------------------------------*/
/*    generate ::J2STemplate ...                                       */
/*---------------------------------------------------------------------*/
J2STemplate.prototype.generate = function() {
   const nodes = list2array(this.exprs).map(n => {
      if (n.$class === "J2SString") {
	 return n.val;
      } else {
	 return new Fragment(this, "${", n.generate(), "}");
      }
   });
   return new Fragment(this, "`", new FragmentList(this, nodes, ""), "`");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDeclClass ...                                      */
/*---------------------------------------------------------------------*/
J2SDeclClass.prototype.generate = function() {
   return new Fragment(
      this, "let ", this.id, "=",
      this.val.generate(),
      ";", "\n");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SClass ...                                          */
/*---------------------------------------------------------------------*/
J2SClass.prototype.generate = function() {
   return new Fragment(
      this, "class ",
      this.name ? this.name : "",
      !this.super instanceof J2SUndefined ? new Fragment(this.super, " extends ", this.super.generate()) : "",
      " {", "\n",
      new FragmentList(this, list2array(this.elements).map(d => d.generate()), ""),
      "}");
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SClassElement ...                                   */
/*---------------------------------------------------------------------*/
J2SClassElement.prototype.generate = function() {

   function generateName(name) {
      if (name instanceof J2SString) {
	 return name.val;
      } else if (name instanceof J2SLiteralCnst) {
	 return generateName(name.val);
      } else if (name instanceof LiteralValue) {
	 return name.val;
      } else {
	 return name.generate();
      }
   }
   
   function generateProp(prop) {
      if (prop instanceof J2SMethodPropertyInit) {
	 return new Fragment(prop, generateName(prop.name), generateFun.call(prop.val, false, ""), ";");
      } else if (prop instanceof J2SDataPropertyInit) {
	 return new Fragment(prop, generateName(prop.name), "=", prop.val.generate(), ";");
      } else if (prop instanceof J2SAccessorPropertyInit) {
	 return newFragmentList(
	    prop,
	    [ new Fragment(prop, "get ", generateName(prop.name), prop.get.generate()),
	      prop.set ? new Fragment(prop, "set ", generateName(prop.name), prop.set.generate()) : "" ]);
      } else {
	 return new Fragment(prop, generateName(prop.name), ";");
      }
   }
   
   return new Fragment(this, this.static ? "static " : "", generateProp(this.prop));
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SSpread ...                                         */
/*---------------------------------------------------------------------*/
J2SSpread.prototype.generate = function() {
   return new Fragment(this, "...", this.expr.generate());
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDProducer ...                                      */
/*---------------------------------------------------------------------*/
J2SDProducer.prototype.generate = function() {
   return this.expr.generate();
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDConsumer ...                                      */
/*---------------------------------------------------------------------*/
J2SDConsumer.prototype.generate = function() {
   return this.expr.generate();
}

/*---------------------------------------------------------------------*/
/*    generate ::J2SDollar ...                                         */
/*---------------------------------------------------------------------*/
J2SDollar.prototype.generate = function() {
   return this.node.generate();
}

