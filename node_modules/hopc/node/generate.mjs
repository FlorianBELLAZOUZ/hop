/*=====================================================================*/
/*    .../project/hop/3.7.x/node_modules/hopc/node/generate.mjs        */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Thu Nov  2 14:38:40 2023                          */
/*    Last change :  Thu Nov 23 06:31:11 2023 (serrano)                */
/*    Copyright   :  2023 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Code generation from an Hop ast                                  */
/*=====================================================================*/
"use strict";

/*---------------------------------------------------------------------*/
/*    Import/Export                                                    */
/*---------------------------------------------------------------------*/
import { list2array, length, nullp, car, cdr } from "./list.mjs";
import { J2SNode, J2SProgram, J2SBlock, J2SLetBlock,
	 J2SImport, J2SImportName, J2SExport, J2SExportDefault,
	 J2SRedirect, J2SRedirectNamespace,
	 J2SStmt, J2SStmtExpr, J2SNop,
	 J2SVarDecls, J2SDecl, J2SDeclInit, J2SDeclRest,
	 J2SExpr, J2SParen, J2SSequence, J2SCond,
	 J2SAccess, J2SSeq, J2SObjInit,
	 J2SFun, J2SArrow, J2SDeclFun, J2SReturn,
	 J2SIf, J2SCatch, J2STry, 
	 J2SCall, J2SNew, 
	 J2SString, J2SUndefined, J2SNull, J2SBool, J2SNumber, 
	 J2SUnresolvedRef, J2SHopRef,
	 J2SDataPropertyInit, J2SArray,
	 J2SSpread, J2SAssig, J2SAssigOp, J2SPrefix, J2SPostfix,
	 J2SBindExit, J2SUnary, J2SBinary, J2SDollar } from "./ast.mjs";

export { generate };

/*---------------------------------------------------------------------*/
/*    generate ...                                                     */
/*---------------------------------------------------------------------*/
const generate = prog => {
   return prog.generate();
}

J2SNode.prototype.generate = function() {
   throw("generate: should not be here: " + this.toString() + " " + this.clazz + " " + Object.keys(this));
}

J2SProgram.prototype.generate = function() {
   return "A PROG";
}

J2SNop.prototype.generate = function() {
   return "";
}

J2SProgram.prototype.generate = function() {
   return list2array(this.nodes).map(n => n.generate()).filter(x => x).join("\n")
      + "\n"
      + list2array(this.exports).map(n => n.generate()).filter(x => x).join("\n");
}

J2SImport.prototype.generate = function() {
   if (nullp(this.names)) {
      return `import "${this.path}";`;
   } else if (car(this.names).id === "*") {
      return `import ${car(this.names).generate()} from "${this.path}";`;
   } else {
      return `import { ${list2array(this.names).map(n => n.generate()).join("")} } from "${this.path}";`;
   }
}

J2SImportName.prototype.generate = function() {
   if (this.id === this.alias) {
      return this.id;
   } else {
      return `${this.id} as ${this.alias}`;
   }
}

J2SExport.prototype.generate = function() {
   if (this.id === this.alias) {
      return `export { ${this.id} };`
   } else {
      return `export { ${this.id} as ${this.alias} };`
   }
}

J2SExportDefault.prototype.generate = function() {
   if (this.id === this.alias) {
      return `export default ${this.expr.generate()};"`
   } else {
      return `export default as ${this.alias} ${this.expr.generate()};"`
   }
}

J2SRedirect.prototype.generate = function() {
   if (this.id === this.alias) {
      return `export { ${this.id} } from \"${this.import.path}\";`
   } else {
      return `export { ${this.id} as ${this.alias} } from \"${this.import.path}\";`
   }
}

J2SRedirectNamespace.prototype.generate = function() {
   if (this.alias === "*") {
      return `export * from \"${this.path}\";`
   } else {
      return `export * as ${this.alias} from \"${this.path}\";`
   }
}

J2SSeq.prototype.generate = function() {
   return `${list2array(this.nodes).map(d => d.generate()).join("\n")}`;
}

J2SBlock.prototype.generate = function() {
   return `{${list2array(this.nodes).map(d => d.generate()).join(";")}}`;
}

J2SLetBlock.prototype.generate = function() {
   return `{${list2array(this.decls).map(d => d.generate()).join(";")}\n${list2array(this.nodes).map(d => d.generate()).join(";")}}`;
}

J2SVarDecls.prototype.generate = function() {
   if (this.decls) {
      return list2array(this.decls).map(d => d.generate()).join("");
   } else {
      return "";
   }
}

J2SDecl.prototype.generate = function() {
   return this.id;
}

J2SDeclRest.prototype.generate = function() {
   return `...${this.id}`;
}

J2SDeclInit.prototype.generate = function() {
   switch (this.binder) {
      case "var": {
	 return `var ${this.id} = ${this.val.generate()};`;
      }
      case "let-opt":
      case "let": {
	 return `${this.writable ? "let" : "const"} ${this.id} = ${this.val.generate()};`;
      }
      default: {
	 return `var ${this.id} = ${this.val.generate()};`;
      }
   }
}

J2SDeclFun.prototype.generate = function() {
   return `let ${this.id} = ${this.val.generate()}${this.expression ? "" : ";"}`;
}

J2SCall.prototype.generate = function() {
   return `${this.fun.generate()}(${list2array(this.args).map(n => n.generate()).join()})`;
}

J2SNew.prototype.generate = function() {
   return "new "
      + this.clazz.generate()
      + "(" + list2array(this.args).map(n => n.generate()).join()
      + ")";
}

J2SUnresolvedRef.prototype.generate = function() {
   return this.id;
}

J2SHopRef.prototype.generate = function() {
   switch (this.id) {
      case "%import-meta": return "import.meta";
      default: return this.id;
   }
}

J2SSequence.prototype.generate = function() {
   return `(${list2array(this.exprs).map(d => d.generate()).join(",")})`;
}

J2SCond.prototype.generate = function() {
   return `${this.test.generate()} ? ${this.then.generate()} : ${this.else.generate()}`;
}

J2SParen.prototype.generate = function() {
   return `(${this.expr.generate()})`;
}

J2SAccess.prototype.generate = function() {
   const field = this.field.generate();
   const m = (typeof field === "string" ? field.match(/"([a-zA-Z_][a-zA-Z0-9_]*)"/) : false);

   if (m) {
      return `${this.obj.generate()}.${m[1]}`;
   } else {
      return `${this.obj.generate()}[${field}]`;
   }
}

J2SString.prototype.generate = function() {
   return `"${this.val}"`;
}

J2SUndefined.prototype.generate = function() {
   return "undefined";
}

J2SNull.prototype.generate = function() {
   return "null";
}

J2SBool.prototype.generate = function() {
   return this.val;
}

J2SNumber.prototype.generate = function() {
   return this.val;
}

J2SStmtExpr.prototype.generate = function() {
   return this.expr.generate() + ";";
}

J2SObjInit.prototype.generate = function() {
   return `{${list2array(this.inits).map(n => n.generate())}}`;
}

J2SDataPropertyInit.prototype.generate = function() {
   const name = this.name;
   if (name instanceof J2SString || name instanceof J2SNumber) {
      return `${name.generate()}: ${this.val.generate()}`;
   } else {
      console.error("NOT SUPPORTED", this);
      throw "DataPropertyInit form not supported";
   }
}

J2SArray.prototype.generate = function() {
   return `[${list2array(this.exprs).map(e => e.generate()).join(",")}]`;
}

J2SFun.prototype.generate = function() {
   return `function(${list2array(this.params).map(n => n.generate()).join()})${this.body.generate()}`;
}

J2SArrow.prototype.generate = function() {
   return `(${list2array(this.params).map(n => n.generate()).join()}) => ${this.body.generate()}`;
}

J2SReturn.prototype.generate = function() {
   return `return ${this.expr.generate()}`;
}

J2SIf.prototype.generate = function() {
   return `if (${this.test.generate()}) ${this.then.clazz === "J2SNop" ? "{}" : this.then.generate()} ${this.else.clazz === "J2SNop" ? "{}\n" : this.else.generate()}`;
}

J2SCatch.prototype.generate = function() {
   return `catch (${this.param.generate()}) ${this.body.generate()}`;
}

J2STry.prototype.generate = function() {
   return `try ${this.body.generate()} ${this.catch.clazz === "J2SNop" ? "" : this.catch.generate()} ${this.finally.clazz === "J2SNop" ? "" : this.finally.generate()}`;
}

J2SAssig.prototype.generate = function() {
   return `${this.lhs.generate()} = ${this.rhs.generate()}`;
}

J2SAssigOp.prototype.generate = function() {
   return `${this.lhs.generate()} ${this.op}= ${this.rhs.generate()}`;
}

J2SPrefix.prototype.generate = function() {
   return `${this.op}${this.rhs.lhs.generate()}`;
}

J2SPostfix.prototype.generate = function() {
   return `${this.rhs.lhs.generate()}${this.op}`;
}

J2SBindExit.prototype.generate = function() {
   if (this.blb) {
      throw "BINDEXIT: lbl not supported";
   } else {
      return `((() => ${this.stmt.generate()})())`
   }
}

J2SUnary.prototype.generate = function() {
   if (this.op === "?.") {
      return `${this.expr.generate()}?`;
   } else {
      return `${this.op}${this.expr.generate()}`;
   }
}

J2SBinary.prototype.generate = function() {
   return `${this.lhs.generate()}${this.op}${this.rhs.generate()}`;
}

J2SDollar.prototype.generate = function() {
   return this.node.generate();
}

