/* generated file (mkjsast), do not edit (05 December 2023) */

// generated by /home2/serrano/hop/3.6.x/node_modules/hopc/node/mkjast.scm
"use strict"

import { Cons, array2list } from "./list.mjs";

export function J2SNode(loc) {
  if (!new.target) {
    return new J2SNode({"loc": array2list(loc)});
  } else {
    this.clazz = 'J2SNode';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}

export function J2SStmt(loc) {
  if (!new.target) {
    return new J2SStmt({"loc": array2list(loc)});
  } else {
    this.clazz = 'J2SStmt';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SStmt.prototype = new J2SNode();

export function J2SMeta(loc, meta, debug, optim, stmt) {
  if (!new.target) {
    return new J2SMeta({"loc": array2list(loc), "meta": meta, "debug": debug, "optim": optim, "stmt": stmt});
  } else {
    this.clazz = 'J2SMeta';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.meta = meta;
         this.debug = debug;
         this.optim = optim;
         this.stmt = stmt;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SMeta.prototype = new J2SStmt();

export function J2SSeq(loc, nodes) {
  if (!new.target) {
    return new J2SSeq({"loc": array2list(loc), "nodes": array2list(nodes)});
  } else {
    this.clazz = 'J2SSeq';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.nodes = array2list(nodes);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SSeq.prototype = new J2SStmt();

export function J2SBlock(loc, nodes, endloc) {
  if (!new.target) {
    return new J2SBlock({"loc": array2list(loc), "nodes": array2list(nodes), "endloc": array2list(endloc)});
  } else {
    this.clazz = 'J2SBlock';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.nodes = array2list(nodes);
         this.endloc = array2list(endloc);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SBlock.prototype = new J2SSeq();

export function J2SProgram(loc, nodes, endloc, mode, path, pcache_size, rxcache_size, call_size, name, main, module, cnsts, decls, types, headers, globals, direct_eval, source_map, imports, exports) {
  if (!new.target) {
    return new J2SProgram({"loc": array2list(loc), "nodes": array2list(nodes), "endloc": array2list(endloc), "mode": mode, "path": path, "pcache_size": pcache_size, "rxcache_size": rxcache_size, "call_size": call_size, "name": name, "main": main, "module": module, "cnsts": array2list(cnsts), "decls": array2list(decls), "types": array2list(types), "headers": array2list(headers), "globals": array2list(globals), "direct_eval": direct_eval, "source_map": source_map, "imports": array2list(imports), "exports": array2list(exports)});
  } else {
    this.clazz = 'J2SProgram';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.nodes = array2list(nodes);
         this.endloc = array2list(endloc);
         this.mode = mode;
         this.path = path;
         this.pcache_size = pcache_size;
         this.rxcache_size = rxcache_size;
         this.call_size = call_size;
         this.name = name;
         this.main = main;
         this.module = module;
         this.cnsts = array2list(cnsts);
         this.decls = array2list(decls);
         this.types = array2list(types);
         this.headers = array2list(headers);
         this.globals = array2list(globals);
         this.direct_eval = direct_eval;
         this.source_map = source_map;
         this.imports = array2list(imports);
         this.exports = array2list(exports);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SProgram.prototype = new J2SBlock();

export function J2SDecl(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export) {
  if (!new.target) {
    return new J2SDecl({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export});
  } else {
    this.clazz = 'J2SDecl';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this._scmid = _scmid;
         this.key = key;
         this.writable = writable;
         this.scope = scope;
         this.usecnt = usecnt;
         this.useinloop = useinloop;
         this.escape = escape;
         this.usage = usage;
         this.binder = binder;
         this.ctype = ctype;
         this.utype = utype;
         this.itype = itype;
         this.vtype = vtype;
         this.mtype = mtype;
         this.irange = irange;
         this.vrange = vrange;
         this.hint = array2list(hint);
         this._export = _export;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDecl.prototype = new J2SStmt();

export function J2SDeclRest(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, alloc_policy) {
  if (!new.target) {
    return new J2SDeclRest({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "alloc_policy": alloc_policy});
  } else {
    this.clazz = 'J2SDeclRest';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this._scmid = _scmid;
         this.key = key;
         this.writable = writable;
         this.scope = scope;
         this.usecnt = usecnt;
         this.useinloop = useinloop;
         this.escape = escape;
         this.usage = usage;
         this.binder = binder;
         this.ctype = ctype;
         this.utype = utype;
         this.itype = itype;
         this.vtype = vtype;
         this.mtype = mtype;
         this.irange = irange;
         this.vrange = vrange;
         this.hint = array2list(hint);
         this._export = _export;
         this.alloc_policy = alloc_policy;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDeclRest.prototype = new J2SDecl();

export function J2SDeclArguments(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, alloc_policy, argid, mode, fun) {
  if (!new.target) {
    return new J2SDeclArguments({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "alloc_policy": alloc_policy, "argid": argid, "mode": mode, "fun": fun});
  } else {
    this.clazz = 'J2SDeclArguments';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this._scmid = _scmid;
         this.key = key;
         this.writable = writable;
         this.scope = scope;
         this.usecnt = usecnt;
         this.useinloop = useinloop;
         this.escape = escape;
         this.usage = usage;
         this.binder = binder;
         this.ctype = ctype;
         this.utype = utype;
         this.itype = itype;
         this.vtype = vtype;
         this.mtype = mtype;
         this.irange = irange;
         this.vrange = vrange;
         this.hint = array2list(hint);
         this._export = _export;
         this.alloc_policy = alloc_policy;
         this.argid = argid;
         this.mode = mode;
         this.fun = fun;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDeclArguments.prototype = new J2SDeclRest();

export function J2SDeclInit(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val) {
  if (!new.target) {
    return new J2SDeclInit({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val});
  } else {
    this.clazz = 'J2SDeclInit';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this._scmid = _scmid;
         this.key = key;
         this.writable = writable;
         this.scope = scope;
         this.usecnt = usecnt;
         this.useinloop = useinloop;
         this.escape = escape;
         this.usage = usage;
         this.binder = binder;
         this.ctype = ctype;
         this.utype = utype;
         this.itype = itype;
         this.vtype = vtype;
         this.mtype = mtype;
         this.irange = irange;
         this.vrange = vrange;
         this.hint = array2list(hint);
         this._export = _export;
         this.val = val;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDeclInit.prototype = new J2SDecl();

export function J2SDeclFun(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val, expression) {
  if (!new.target) {
    return new J2SDeclFun({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val, "expression": expression});
  } else {
    this.clazz = 'J2SDeclFun';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this._scmid = _scmid;
         this.key = key;
         this.writable = writable;
         this.scope = scope;
         this.usecnt = usecnt;
         this.useinloop = useinloop;
         this.escape = escape;
         this.usage = usage;
         this.binder = binder;
         this.ctype = ctype;
         this.utype = utype;
         this.itype = itype;
         this.vtype = vtype;
         this.mtype = mtype;
         this.irange = irange;
         this.vrange = vrange;
         this.hint = array2list(hint);
         this._export = _export;
         this.val = val;
         this.expression = expression;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDeclFun.prototype = new J2SDeclInit();

export function J2SDeclFunType(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val, expression) {
  if (!new.target) {
    return new J2SDeclFunType({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val, "expression": expression});
  } else {
    this.clazz = 'J2SDeclFunType';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this._scmid = _scmid;
         this.key = key;
         this.writable = writable;
         this.scope = scope;
         this.usecnt = usecnt;
         this.useinloop = useinloop;
         this.escape = escape;
         this.usage = usage;
         this.binder = binder;
         this.ctype = ctype;
         this.utype = utype;
         this.itype = itype;
         this.vtype = vtype;
         this.mtype = mtype;
         this.irange = irange;
         this.vrange = vrange;
         this.hint = array2list(hint);
         this._export = _export;
         this.val = val;
         this.expression = expression;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDeclFunType.prototype = new J2SDeclFun();

export function J2SDeclSvc(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val, expression) {
  if (!new.target) {
    return new J2SDeclSvc({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val, "expression": expression});
  } else {
    this.clazz = 'J2SDeclSvc';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this._scmid = _scmid;
         this.key = key;
         this.writable = writable;
         this.scope = scope;
         this.usecnt = usecnt;
         this.useinloop = useinloop;
         this.escape = escape;
         this.usage = usage;
         this.binder = binder;
         this.ctype = ctype;
         this.utype = utype;
         this.itype = itype;
         this.vtype = vtype;
         this.mtype = mtype;
         this.irange = irange;
         this.vrange = vrange;
         this.hint = array2list(hint);
         this._export = _export;
         this.val = val;
         this.expression = expression;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDeclSvc.prototype = new J2SDeclFun();

export function J2SDeclClass(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val) {
  if (!new.target) {
    return new J2SDeclClass({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val});
  } else {
    this.clazz = 'J2SDeclClass';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this._scmid = _scmid;
         this.key = key;
         this.writable = writable;
         this.scope = scope;
         this.usecnt = usecnt;
         this.useinloop = useinloop;
         this.escape = escape;
         this.usage = usage;
         this.binder = binder;
         this.ctype = ctype;
         this.utype = utype;
         this.itype = itype;
         this.vtype = vtype;
         this.mtype = mtype;
         this.irange = irange;
         this.vrange = vrange;
         this.hint = array2list(hint);
         this._export = _export;
         this.val = val;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDeclClass.prototype = new J2SDeclInit();

export function J2SDeclExtern(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val, bind, hidden_class, raise_on_write, sweepable, configurable) {
  if (!new.target) {
    return new J2SDeclExtern({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val, "bind": bind, "hidden_class": hidden_class, "raise_on_write": raise_on_write, "sweepable": sweepable, "configurable": configurable});
  } else {
    this.clazz = 'J2SDeclExtern';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this._scmid = _scmid;
         this.key = key;
         this.writable = writable;
         this.scope = scope;
         this.usecnt = usecnt;
         this.useinloop = useinloop;
         this.escape = escape;
         this.usage = usage;
         this.binder = binder;
         this.ctype = ctype;
         this.utype = utype;
         this.itype = itype;
         this.vtype = vtype;
         this.mtype = mtype;
         this.irange = irange;
         this.vrange = vrange;
         this.hint = array2list(hint);
         this._export = _export;
         this.val = val;
         this.bind = bind;
         this.hidden_class = hidden_class;
         this.raise_on_write = raise_on_write;
         this.sweepable = sweepable;
         this.configurable = configurable;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDeclExtern.prototype = new J2SDeclInit();

export function J2SDeclImport(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, alias, _import) {
  if (!new.target) {
    return new J2SDeclImport({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "alias": alias, "_import": _import});
  } else {
    this.clazz = 'J2SDeclImport';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this._scmid = _scmid;
         this.key = key;
         this.writable = writable;
         this.scope = scope;
         this.usecnt = usecnt;
         this.useinloop = useinloop;
         this.escape = escape;
         this.usage = usage;
         this.binder = binder;
         this.ctype = ctype;
         this.utype = utype;
         this.itype = itype;
         this.vtype = vtype;
         this.mtype = mtype;
         this.irange = irange;
         this.vrange = vrange;
         this.hint = array2list(hint);
         this._export = _export;
         this.alias = alias;
         this._import = _import;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDeclImport.prototype = new J2SDecl();

export function J2SDeclInterface(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export) {
  if (!new.target) {
    return new J2SDeclInterface({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export});
  } else {
    this.clazz = 'J2SDeclInterface';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this._scmid = _scmid;
         this.key = key;
         this.writable = writable;
         this.scope = scope;
         this.usecnt = usecnt;
         this.useinloop = useinloop;
         this.escape = escape;
         this.usage = usage;
         this.binder = binder;
         this.ctype = ctype;
         this.utype = utype;
         this.itype = itype;
         this.vtype = vtype;
         this.mtype = mtype;
         this.irange = irange;
         this.vrange = vrange;
         this.hint = array2list(hint);
         this._export = _export;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDeclInterface.prototype = new J2SDecl();

export function J2SExpr(loc, type, hint, range) {
  if (!new.target) {
    return new J2SExpr({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range});
  } else {
    this.clazz = 'J2SExpr';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SExpr.prototype = new J2SNode();

export function J2SCast(loc, type, hint, range, _static, expr) {
  if (!new.target) {
    return new J2SCast({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "_static": _static, "expr": expr});
  } else {
    this.clazz = 'J2SCast';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this._static = _static;
         this.expr = expr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SCast.prototype = new J2SExpr();

export function J2SCheck(loc, type, hint, range, expr) {
  if (!new.target) {
    return new J2SCheck({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "expr": expr});
  } else {
    this.clazz = 'J2SCheck';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.expr = expr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SCheck.prototype = new J2SExpr();

export function J2SStmtExpr(loc, expr) {
  if (!new.target) {
    return new J2SStmtExpr({"loc": array2list(loc), "expr": expr});
  } else {
    this.clazz = 'J2SStmtExpr';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.expr = expr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SStmtExpr.prototype = new J2SStmt();

export function J2SIf(loc, test, then, _else) {
  if (!new.target) {
    return new J2SIf({"loc": array2list(loc), "test": test, "then": then, "_else": _else});
  } else {
    this.clazz = 'J2SIf';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.test = test;
         this.then = then;
         this._else = _else;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SIf.prototype = new J2SStmt();

export function J2SPrecache(loc, test, then, _else, accesses) {
  if (!new.target) {
    return new J2SPrecache({"loc": array2list(loc), "test": test, "then": then, "_else": _else, "accesses": array2list(accesses)});
  } else {
    this.clazz = 'J2SPrecache';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.test = test;
         this.then = then;
         this._else = _else;
         this.accesses = array2list(accesses);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SPrecache.prototype = new J2SIf();

export function J2SIfIsRecord(loc, test, then, _else) {
  if (!new.target) {
    return new J2SIfIsRecord({"loc": array2list(loc), "test": test, "then": then, "_else": _else});
  } else {
    this.clazz = 'J2SIfIsRecord';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.test = test;
         this.then = then;
         this._else = _else;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SIfIsRecord.prototype = new J2SIf();

export function J2SVarDecls(loc, decls) {
  if (!new.target) {
    return new J2SVarDecls({"loc": array2list(loc), "decls": array2list(decls)});
  } else {
    this.clazz = 'J2SVarDecls';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.decls = array2list(decls);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SVarDecls.prototype = new J2SStmt();

export function J2SLetBlock(loc, nodes, endloc, rec, decls, mode) {
  if (!new.target) {
    return new J2SLetBlock({"loc": array2list(loc), "nodes": array2list(nodes), "endloc": array2list(endloc), "rec": rec, "decls": array2list(decls), "mode": mode});
  } else {
    this.clazz = 'J2SLetBlock';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.nodes = array2list(nodes);
         this.endloc = array2list(endloc);
         this.rec = rec;
         this.decls = array2list(decls);
         this.mode = mode;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SLetBlock.prototype = new J2SBlock();

export function J2SIdStmt(loc, need_bind_exit_break, id) {
  if (!new.target) {
    return new J2SIdStmt({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id});
  } else {
    this.clazz = 'J2SIdStmt';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.need_bind_exit_break = need_bind_exit_break;
         this.id = id;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SIdStmt.prototype = new J2SStmt();

export function J2SSwitch(loc, need_bind_exit_break, id, key, cases) {
  if (!new.target) {
    return new J2SSwitch({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "key": key, "cases": array2list(cases)});
  } else {
    this.clazz = 'J2SSwitch';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.need_bind_exit_break = need_bind_exit_break;
         this.id = id;
         this.key = key;
         this.cases = array2list(cases);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SSwitch.prototype = new J2SIdStmt();

export function J2SLoop(loc, need_bind_exit_break, id, need_bind_exit_continue, body) {
  if (!new.target) {
    return new J2SLoop({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "need_bind_exit_continue": need_bind_exit_continue, "body": body});
  } else {
    this.clazz = 'J2SLoop';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.need_bind_exit_break = need_bind_exit_break;
         this.id = id;
         this.need_bind_exit_continue = need_bind_exit_continue;
         this.body = body;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SLoop.prototype = new J2SIdStmt();

export function J2SFor(loc, need_bind_exit_break, id, need_bind_exit_continue, body, init, test, incr) {
  if (!new.target) {
    return new J2SFor({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "need_bind_exit_continue": need_bind_exit_continue, "body": body, "init": init, "test": test, "incr": incr});
  } else {
    this.clazz = 'J2SFor';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.need_bind_exit_break = need_bind_exit_break;
         this.id = id;
         this.need_bind_exit_continue = need_bind_exit_continue;
         this.body = body;
         this.init = init;
         this.test = test;
         this.incr = incr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SFor.prototype = new J2SLoop();

export function J2SForIn(loc, need_bind_exit_break, id, need_bind_exit_continue, body, op, lhs, obj) {
  if (!new.target) {
    return new J2SForIn({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "need_bind_exit_continue": need_bind_exit_continue, "body": body, "op": op, "lhs": lhs, "obj": obj});
  } else {
    this.clazz = 'J2SForIn';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.need_bind_exit_break = need_bind_exit_break;
         this.id = id;
         this.need_bind_exit_continue = need_bind_exit_continue;
         this.body = body;
         this.op = op;
         this.lhs = lhs;
         this.obj = obj;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SForIn.prototype = new J2SLoop();

export function J2SWhile(loc, need_bind_exit_break, id, need_bind_exit_continue, body, test) {
  if (!new.target) {
    return new J2SWhile({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "need_bind_exit_continue": need_bind_exit_continue, "body": body, "test": test});
  } else {
    this.clazz = 'J2SWhile';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.need_bind_exit_break = need_bind_exit_break;
         this.id = id;
         this.need_bind_exit_continue = need_bind_exit_continue;
         this.body = body;
         this.test = test;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SWhile.prototype = new J2SLoop();

export function J2SDo(loc, need_bind_exit_break, id, need_bind_exit_continue, body, test) {
  if (!new.target) {
    return new J2SDo({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "need_bind_exit_continue": need_bind_exit_continue, "body": body, "test": test});
  } else {
    this.clazz = 'J2SDo';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.need_bind_exit_break = need_bind_exit_break;
         this.id = id;
         this.need_bind_exit_continue = need_bind_exit_continue;
         this.body = body;
         this.test = test;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDo.prototype = new J2SWhile();

export function J2SLabel(loc, need_bind_exit_break, id, body) {
  if (!new.target) {
    return new J2SLabel({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "body": body});
  } else {
    this.clazz = 'J2SLabel';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.need_bind_exit_break = need_bind_exit_break;
         this.id = id;
         this.body = body;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SLabel.prototype = new J2SIdStmt();

export function J2SBreak(loc, target, id) {
  if (!new.target) {
    return new J2SBreak({"loc": array2list(loc), "target": target, "id": id});
  } else {
    this.clazz = 'J2SBreak';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.target = target;
         this.id = id;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SBreak.prototype = new J2SStmt();

export function J2SContinue(loc, target, id) {
  if (!new.target) {
    return new J2SContinue({"loc": array2list(loc), "target": target, "id": id});
  } else {
    this.clazz = 'J2SContinue';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.target = target;
         this.id = id;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SContinue.prototype = new J2SBreak();

export function J2SNop(loc) {
  if (!new.target) {
    return new J2SNop({"loc": array2list(loc)});
  } else {
    this.clazz = 'J2SNop';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SNop.prototype = new J2SStmt();

export function J2SCase(loc, expr, body, cascade) {
  if (!new.target) {
    return new J2SCase({"loc": array2list(loc), "expr": expr, "body": body, "cascade": cascade});
  } else {
    this.clazz = 'J2SCase';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.expr = expr;
         this.body = body;
         this.cascade = cascade;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SCase.prototype = new J2SStmt();

export function J2SDefault(loc, expr, body, cascade) {
  if (!new.target) {
    return new J2SDefault({"loc": array2list(loc), "expr": expr, "body": body, "cascade": cascade});
  } else {
    this.clazz = 'J2SDefault';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.expr = expr;
         this.body = body;
         this.cascade = cascade;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDefault.prototype = new J2SCase();

export function J2SBindExit(loc, type, hint, range, lbl, utype, stmt) {
  if (!new.target) {
    return new J2SBindExit({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lbl": lbl, "utype": utype, "stmt": stmt});
  } else {
    this.clazz = 'J2SBindExit';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.lbl = lbl;
         this.utype = utype;
         this.stmt = stmt;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SBindExit.prototype = new J2SExpr();

export function J2SReturn(loc, exit, tail, from, expr) {
  if (!new.target) {
    return new J2SReturn({"loc": array2list(loc), "exit": exit, "tail": tail, "from": from, "expr": expr});
  } else {
    this.clazz = 'J2SReturn';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.exit = exit;
         this.tail = tail;
         this.from = from;
         this.expr = expr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SReturn.prototype = new J2SStmt();

export function J2SReturnYield(loc, expr, generator, kont) {
  if (!new.target) {
    return new J2SReturnYield({"loc": array2list(loc), "expr": expr, "generator": generator, "kont": kont});
  } else {
    this.clazz = 'J2SReturnYield';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.expr = expr;
         this.generator = generator;
         this.kont = kont;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SReturnYield.prototype = new J2SStmt();

export function J2SYield(loc, type, hint, range, expr, generator, _await) {
  if (!new.target) {
    return new J2SYield({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "expr": expr, "generator": generator, "_await": _await});
  } else {
    this.clazz = 'J2SYield';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.expr = expr;
         this.generator = generator;
         this._await = _await;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SYield.prototype = new J2SExpr();

export function J2SWith(loc, id, obj, block) {
  if (!new.target) {
    return new J2SWith({"loc": array2list(loc), "id": id, "obj": obj, "block": block});
  } else {
    this.clazz = 'J2SWith';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this.obj = obj;
         this.block = block;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SWith.prototype = new J2SStmt();

export function J2SThrow(loc, expr) {
  if (!new.target) {
    return new J2SThrow({"loc": array2list(loc), "expr": expr});
  } else {
    this.clazz = 'J2SThrow';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.expr = expr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SThrow.prototype = new J2SStmt();

export function J2SFun(loc, type, hint, range, rtype, rutype, rrange, idthis, idgen, mode, decl, need_bind_exit_return, new_target, vararg, name, generator, optimize, thisp, argumentsp, params, constrsize, src, _method, ismethodof, body) {
  if (!new.target) {
    return new J2SFun({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "rtype": rtype, "rutype": rutype, "rrange": rrange, "idthis": idthis, "idgen": idgen, "mode": mode, "decl": decl, "need_bind_exit_return": need_bind_exit_return, "new_target": new_target, "vararg": vararg, "name": name, "generator": generator, "optimize": optimize, "thisp": thisp, "argumentsp": argumentsp, "params": array2list(params), "constrsize": constrsize, "src": src, "_method": _method, "ismethodof": ismethodof, "body": body});
  } else {
    this.clazz = 'J2SFun';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.rtype = rtype;
         this.rutype = rutype;
         this.rrange = rrange;
         this.idthis = idthis;
         this.idgen = idgen;
         this.mode = mode;
         this.decl = decl;
         this.need_bind_exit_return = need_bind_exit_return;
         this.new_target = new_target;
         this.vararg = vararg;
         this.name = name;
         this.generator = generator;
         this.optimize = optimize;
         this.thisp = thisp;
         this.argumentsp = argumentsp;
         this.params = array2list(params);
         this.constrsize = constrsize;
         this.src = src;
         this._method = _method;
         this.ismethodof = ismethodof;
         this.body = body;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SFun.prototype = new J2SExpr();

export function J2SSvc(loc, type, hint, range, rtype, rutype, rrange, idthis, idgen, mode, decl, need_bind_exit_return, new_target, vararg, name, generator, optimize, thisp, argumentsp, params, constrsize, src, _method, ismethodof, body, init, path, register, _import) {
  if (!new.target) {
    return new J2SSvc({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "rtype": rtype, "rutype": rutype, "rrange": rrange, "idthis": idthis, "idgen": idgen, "mode": mode, "decl": decl, "need_bind_exit_return": need_bind_exit_return, "new_target": new_target, "vararg": vararg, "name": name, "generator": generator, "optimize": optimize, "thisp": thisp, "argumentsp": argumentsp, "params": array2list(params), "constrsize": constrsize, "src": src, "_method": _method, "ismethodof": ismethodof, "body": body, "init": init, "path": path, "register": register, "_import": _import});
  } else {
    this.clazz = 'J2SSvc';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.rtype = rtype;
         this.rutype = rutype;
         this.rrange = rrange;
         this.idthis = idthis;
         this.idgen = idgen;
         this.mode = mode;
         this.decl = decl;
         this.need_bind_exit_return = need_bind_exit_return;
         this.new_target = new_target;
         this.vararg = vararg;
         this.name = name;
         this.generator = generator;
         this.optimize = optimize;
         this.thisp = thisp;
         this.argumentsp = argumentsp;
         this.params = array2list(params);
         this.constrsize = constrsize;
         this.src = src;
         this._method = _method;
         this.ismethodof = ismethodof;
         this.body = body;
         this.init = init;
         this.path = path;
         this.register = register;
         this._import = _import;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SSvc.prototype = new J2SFun();

export function J2SArrow(loc, type, hint, range, rtype, rutype, rrange, idthis, idgen, mode, decl, need_bind_exit_return, new_target, vararg, name, generator, optimize, thisp, argumentsp, params, constrsize, src, _method, ismethodof, body) {
  if (!new.target) {
    return new J2SArrow({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "rtype": rtype, "rutype": rutype, "rrange": rrange, "idthis": idthis, "idgen": idgen, "mode": mode, "decl": decl, "need_bind_exit_return": need_bind_exit_return, "new_target": new_target, "vararg": vararg, "name": name, "generator": generator, "optimize": optimize, "thisp": thisp, "argumentsp": argumentsp, "params": array2list(params), "constrsize": constrsize, "src": src, "_method": _method, "ismethodof": ismethodof, "body": body});
  } else {
    this.clazz = 'J2SArrow';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.rtype = rtype;
         this.rutype = rutype;
         this.rrange = rrange;
         this.idthis = idthis;
         this.idgen = idgen;
         this.mode = mode;
         this.decl = decl;
         this.need_bind_exit_return = need_bind_exit_return;
         this.new_target = new_target;
         this.vararg = vararg;
         this.name = name;
         this.generator = generator;
         this.optimize = optimize;
         this.thisp = thisp;
         this.argumentsp = argumentsp;
         this.params = array2list(params);
         this.constrsize = constrsize;
         this.src = src;
         this._method = _method;
         this.ismethodof = ismethodof;
         this.body = body;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SArrow.prototype = new J2SFun();

export function J2SMethod(loc, type, hint, range, _function, _method) {
  if (!new.target) {
    return new J2SMethod({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "_function": _function, "_method": _method});
  } else {
    this.clazz = 'J2SMethod';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this._function = _function;
         this._method = _method;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SMethod.prototype = new J2SExpr();

export function J2SClass(loc, type, hint, range, endloc, name, decl, _super, src, elements, constrsize, cmap, need_super_check, need_dead_zone_check, methods) {
  if (!new.target) {
    return new J2SClass({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "endloc": array2list(endloc), "name": name, "decl": decl, "_super": _super, "src": src, "elements": array2list(elements), "constrsize": constrsize, "cmap": cmap, "need_super_check": need_super_check, "need_dead_zone_check": need_dead_zone_check, "methods": methods});
  } else {
    this.clazz = 'J2SClass';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.endloc = array2list(endloc);
         this.name = name;
         this.decl = decl;
         this._super = _super;
         this.src = src;
         this.elements = array2list(elements);
         this.constrsize = constrsize;
         this.cmap = cmap;
         this.need_super_check = need_super_check;
         this.need_dead_zone_check = need_dead_zone_check;
         this.methods = methods;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SClass.prototype = new J2SExpr();

export function J2SRecord(loc, type, hint, range, endloc, name, decl, _super, src, elements, constrsize, cmap, need_super_check, need_dead_zone_check, methods) {
  if (!new.target) {
    return new J2SRecord({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "endloc": array2list(endloc), "name": name, "decl": decl, "_super": _super, "src": src, "elements": array2list(elements), "constrsize": constrsize, "cmap": cmap, "need_super_check": need_super_check, "need_dead_zone_check": need_dead_zone_check, "methods": methods});
  } else {
    this.clazz = 'J2SRecord';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.endloc = array2list(endloc);
         this.name = name;
         this.decl = decl;
         this._super = _super;
         this.src = src;
         this.elements = array2list(elements);
         this.constrsize = constrsize;
         this.cmap = cmap;
         this.need_super_check = need_super_check;
         this.need_dead_zone_check = need_dead_zone_check;
         this.methods = methods;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SRecord.prototype = new J2SClass();

export function J2SClassElement(loc, _static, prop, type, clazz, index, rtwin, usage, hint) {
  if (!new.target) {
    return new J2SClassElement({"loc": array2list(loc), "_static": _static, "prop": prop, "type": type, "clazz": clazz, "index": index, "rtwin": rtwin, "usage": usage, "hint": array2list(hint)});
  } else {
    this.clazz = 'J2SClassElement';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this._static = _static;
         this.prop = prop;
         this.type = type;
         this.clazz = clazz;
         this.index = index;
         this.rtwin = rtwin;
         this.usage = usage;
         this.hint = array2list(hint);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SClassElement.prototype = new J2SNode();

export function J2SCatch(loc, param, body) {
  if (!new.target) {
    return new J2SCatch({"loc": array2list(loc), "param": param, "body": body});
  } else {
    this.clazz = 'J2SCatch';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.param = param;
         this.body = body;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SCatch.prototype = new J2SStmt();

export function J2STry(loc, body, _catch, _finally) {
  if (!new.target) {
    return new J2STry({"loc": array2list(loc), "body": body, "_catch": _catch, "_finally": _finally});
  } else {
    this.clazz = 'J2STry';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.body = body;
         this._catch = _catch;
         this._finally = _finally;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2STry.prototype = new J2SStmt();

export function J2SPragma(loc, type, hint, range, lang, vars, vals, expr) {
  if (!new.target) {
    return new J2SPragma({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lang": lang, "vars": array2list(vars), "vals": array2list(vals), "expr": expr});
  } else {
    this.clazz = 'J2SPragma';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.lang = lang;
         this.vars = array2list(vars);
         this.vals = array2list(vals);
         this.expr = expr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SPragma.prototype = new J2SExpr();

export function J2SSequence(loc, type, hint, range, exprs) {
  if (!new.target) {
    return new J2SSequence({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "exprs": array2list(exprs)});
  } else {
    this.clazz = 'J2SSequence';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.exprs = array2list(exprs);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SSequence.prototype = new J2SExpr();

export function J2SUnresolvedRef(loc, type, hint, range, cache, id) {
  if (!new.target) {
    return new J2SUnresolvedRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "cache": cache, "id": id});
  } else {
    this.clazz = 'J2SUnresolvedRef';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.cache = cache;
         this.id = id;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SUnresolvedRef.prototype = new J2SExpr();

export function J2SGlobalRef(loc, type, hint, range, cache, id, decl) {
  if (!new.target) {
    return new J2SGlobalRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "cache": cache, "id": id, "decl": decl});
  } else {
    this.clazz = 'J2SGlobalRef';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.cache = cache;
         this.id = id;
         this.decl = decl;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SGlobalRef.prototype = new J2SUnresolvedRef();

export function J2SRef(loc, type, hint, range, decl) {
  if (!new.target) {
    return new J2SRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl});
  } else {
    this.clazz = 'J2SRef';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.decl = decl;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SRef.prototype = new J2SExpr();

export function J2SWithRef(loc, type, hint, range, id, withs, expr) {
  if (!new.target) {
    return new J2SWithRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "id": id, "withs": array2list(withs), "expr": expr});
  } else {
    this.clazz = 'J2SWithRef';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.id = id;
         this.withs = array2list(withs);
         this.expr = expr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SWithRef.prototype = new J2SExpr();

export function J2SHopRef(loc, type, hint, range, id, rtype, module) {
  if (!new.target) {
    return new J2SHopRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "id": id, "rtype": rtype, "module": module});
  } else {
    this.clazz = 'J2SHopRef';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.id = id;
         this.rtype = rtype;
         this.module = module;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SHopRef.prototype = new J2SExpr();

export function J2SLetRef(loc, type, hint, range, decl) {
  if (!new.target) {
    return new J2SLetRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl});
  } else {
    this.clazz = 'J2SLetRef';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.decl = decl;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SLetRef.prototype = new J2SRef();

export function J2SAref(loc, type, hint, range, decl, array, alen, amark, deps) {
  if (!new.target) {
    return new J2SAref({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl, "array": array, "alen": alen, "amark": amark, "deps": array2list(deps)});
  } else {
    this.clazz = 'J2SAref';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.decl = decl;
         this.array = array;
         this.alen = alen;
         this.amark = amark;
         this.deps = array2list(deps);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SAref.prototype = new J2SRef();

export function J2SKontRef(loc, type, hint, range, gen, index, id) {
  if (!new.target) {
    return new J2SKontRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "gen": gen, "index": index, "id": id});
  } else {
    this.clazz = 'J2SKontRef';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.gen = gen;
         this.index = index;
         this.id = id;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SKontRef.prototype = new J2SExpr();

export function J2SThis(loc, type, hint, range, decl) {
  if (!new.target) {
    return new J2SThis({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl});
  } else {
    this.clazz = 'J2SThis';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.decl = decl;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SThis.prototype = new J2SRef();

export function J2SSuper(loc, type, hint, range, decl, rtwinp, _super, context) {
  if (!new.target) {
    return new J2SSuper({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl, "rtwinp": rtwinp, "_super": _super, "context": context});
  } else {
    this.clazz = 'J2SSuper';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.decl = decl;
         this.rtwinp = rtwinp;
         this._super = _super;
         this.context = context;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SSuper.prototype = new J2SRef();

export function J2SCond(loc, type, hint, range, test, then, _else) {
  if (!new.target) {
    return new J2SCond({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "test": test, "then": then, "_else": _else});
  } else {
    this.clazz = 'J2SCond';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.test = test;
         this.then = then;
         this._else = _else;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SCond.prototype = new J2SExpr();

export function J2SLiteral(loc, type, hint, range) {
  if (!new.target) {
    return new J2SLiteral({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range});
  } else {
    this.clazz = 'J2SLiteral';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SLiteral.prototype = new J2SExpr();

export function J2SArrayAbsent(loc, type, hint, range) {
  if (!new.target) {
    return new J2SArrayAbsent({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range});
  } else {
    this.clazz = 'J2SArrayAbsent';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SArrayAbsent.prototype = new J2SLiteral();

export function J2SNull(loc, type, hint, range) {
  if (!new.target) {
    return new J2SNull({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range});
  } else {
    this.clazz = 'J2SNull';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SNull.prototype = new J2SLiteral();

export function J2SUndefined(loc, type, hint, range) {
  if (!new.target) {
    return new J2SUndefined({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range});
  } else {
    this.clazz = 'J2SUndefined';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SUndefined.prototype = new J2SLiteral();

export function J2SLiteralValue(loc, type, hint, range, val) {
  if (!new.target) {
    return new J2SLiteralValue({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val});
  } else {
    this.clazz = 'J2SLiteralValue';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.val = val;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SLiteralValue.prototype = new J2SLiteral();

export function J2SNativeString(loc, type, hint, range, val) {
  if (!new.target) {
    return new J2SNativeString({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val});
  } else {
    this.clazz = 'J2SNativeString';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.val = val;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SNativeString.prototype = new J2SLiteralValue();

export function J2SString(loc, type, hint, range, val, escape, _private) {
  if (!new.target) {
    return new J2SString({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val, "escape": array2list(escape), "_private": _private});
  } else {
    this.clazz = 'J2SString';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.val = val;
         this.escape = array2list(escape);
         this._private = _private;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SString.prototype = new J2SLiteralValue();

export function J2SBool(loc, type, hint, range, val) {
  if (!new.target) {
    return new J2SBool({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val});
  } else {
    this.clazz = 'J2SBool';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.val = val;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SBool.prototype = new J2SLiteralValue();

export function J2SNumber(loc, type, hint, range, val) {
  if (!new.target) {
    return new J2SNumber({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val});
  } else {
    this.clazz = 'J2SNumber';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.val = val;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SNumber.prototype = new J2SLiteralValue();

export function J2SOctalNumber(loc, type, hint, range, val) {
  if (!new.target) {
    return new J2SOctalNumber({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val});
  } else {
    this.clazz = 'J2SOctalNumber';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.val = val;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SOctalNumber.prototype = new J2SNumber();

export function J2SRegExp(loc, type, hint, range, val, flags, inline) {
  if (!new.target) {
    return new J2SRegExp({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val, "flags": flags, "inline": inline});
  } else {
    this.clazz = 'J2SRegExp';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.val = val;
         this.flags = flags;
         this.inline = inline;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SRegExp.prototype = new J2SLiteralValue();

export function J2SCmap(loc, type, hint, range, val, ctor) {
  if (!new.target) {
    return new J2SCmap({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val, "ctor": ctor});
  } else {
    this.clazz = 'J2SCmap';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.val = val;
         this.ctor = ctor;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SCmap.prototype = new J2SLiteralValue();

export function J2SLiteralCnst(loc, type, hint, range, index, val) {
  if (!new.target) {
    return new J2SLiteralCnst({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "index": index, "val": val});
  } else {
    this.clazz = 'J2SLiteralCnst';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.index = index;
         this.val = val;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SLiteralCnst.prototype = new J2SLiteral();

export function J2SArray(loc, type, hint, range, len, exprs) {
  if (!new.target) {
    return new J2SArray({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "len": len, "exprs": array2list(exprs)});
  } else {
    this.clazz = 'J2SArray';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.len = len;
         this.exprs = array2list(exprs);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SArray.prototype = new J2SLiteral();

export function J2SSpread(loc, type, hint, range, stype, expr) {
  if (!new.target) {
    return new J2SSpread({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "stype": stype, "expr": expr});
  } else {
    this.clazz = 'J2SSpread';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.stype = stype;
         this.expr = expr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SSpread.prototype = new J2SExpr();

export function J2STemplate(loc, type, hint, range, exprs) {
  if (!new.target) {
    return new J2STemplate({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "exprs": array2list(exprs)});
  } else {
    this.clazz = 'J2STemplate';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.exprs = array2list(exprs);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2STemplate.prototype = new J2SExpr();

export function J2SParen(loc, type, hint, range, expr) {
  if (!new.target) {
    return new J2SParen({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "expr": expr});
  } else {
    this.clazz = 'J2SParen';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.expr = expr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SParen.prototype = new J2SExpr();

export function J2SUnary(loc, type, hint, range, op, expr) {
  if (!new.target) {
    return new J2SUnary({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "op": op, "expr": expr});
  } else {
    this.clazz = 'J2SUnary';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.op = op;
         this.expr = expr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SUnary.prototype = new J2SExpr();

export function J2SBinary(loc, type, hint, range, op, lhs, rhs) {
  if (!new.target) {
    return new J2SBinary({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "op": op, "lhs": lhs, "rhs": rhs});
  } else {
    this.clazz = 'J2SBinary';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.op = op;
         this.lhs = lhs;
         this.rhs = rhs;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SBinary.prototype = new J2SExpr();

export function J2SAssig(loc, type, hint, range, lhs, rhs) {
  if (!new.target) {
    return new J2SAssig({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs});
  } else {
    this.clazz = 'J2SAssig';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.lhs = lhs;
         this.rhs = rhs;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SAssig.prototype = new J2SExpr();

export function J2SInit(loc, type, hint, range, lhs, rhs) {
  if (!new.target) {
    return new J2SInit({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs});
  } else {
    this.clazz = 'J2SInit';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.lhs = lhs;
         this.rhs = rhs;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SInit.prototype = new J2SAssig();

export function J2SFunBinding(loc, type, hint, range, lhs, rhs) {
  if (!new.target) {
    return new J2SFunBinding({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs});
  } else {
    this.clazz = 'J2SFunBinding';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.lhs = lhs;
         this.rhs = rhs;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SFunBinding.prototype = new J2SInit();

export function J2SPrefix(loc, type, hint, range, lhs, rhs, op) {
  if (!new.target) {
    return new J2SPrefix({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs, "op": op});
  } else {
    this.clazz = 'J2SPrefix';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.lhs = lhs;
         this.rhs = rhs;
         this.op = op;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SPrefix.prototype = new J2SAssig();

export function J2SPostfix(loc, type, hint, range, lhs, rhs, op) {
  if (!new.target) {
    return new J2SPostfix({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs, "op": op});
  } else {
    this.clazz = 'J2SPostfix';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.lhs = lhs;
         this.rhs = rhs;
         this.op = op;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SPostfix.prototype = new J2SAssig();

export function J2SAssigOp(loc, type, hint, range, lhs, rhs, op) {
  if (!new.target) {
    return new J2SAssigOp({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs, "op": op});
  } else {
    this.clazz = 'J2SAssigOp';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.lhs = lhs;
         this.rhs = rhs;
         this.op = op;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SAssigOp.prototype = new J2SAssig();

export function J2SObjInit(loc, type, hint, range, inits, cmap, ronly) {
  if (!new.target) {
    return new J2SObjInit({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "inits": array2list(inits), "cmap": cmap, "ronly": ronly});
  } else {
    this.clazz = 'J2SObjInit';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.inits = array2list(inits);
         this.cmap = cmap;
         this.ronly = ronly;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SObjInit.prototype = new J2SExpr();

export function J2SAccess(loc, type, hint, range, obj, field) {
  if (!new.target) {
    return new J2SAccess({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "obj": obj, "field": field});
  } else {
    this.clazz = 'J2SAccess';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.obj = obj;
         this.field = field;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SAccess.prototype = new J2SExpr();

export function J2SCacheCheck(loc, type, hint, range, prop, cache, owner, obj, fields) {
  if (!new.target) {
    return new J2SCacheCheck({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "prop": prop, "cache": cache, "owner": owner, "obj": obj, "fields": array2list(fields)});
  } else {
    this.clazz = 'J2SCacheCheck';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.prop = prop;
         this.cache = cache;
         this.owner = owner;
         this.obj = obj;
         this.fields = array2list(fields);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SCacheCheck.prototype = new J2SExpr();

export function J2SCacheUpdate(loc, type, hint, range, prop, cache, obj) {
  if (!new.target) {
    return new J2SCacheUpdate({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "prop": prop, "cache": cache, "obj": obj});
  } else {
    this.clazz = 'J2SCacheUpdate';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.prop = prop;
         this.cache = cache;
         this.obj = obj;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SCacheUpdate.prototype = new J2SExpr();

export function J2SCall(loc, type, hint, range, profid, fun, protocol, thisargs, args) {
  if (!new.target) {
    return new J2SCall({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "profid": profid, "fun": fun, "protocol": protocol, "thisargs": array2list(thisargs), "args": array2list(args)});
  } else {
    this.clazz = 'J2SCall';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.profid = profid;
         this.fun = fun;
         this.protocol = protocol;
         this.thisargs = array2list(thisargs);
         this.args = array2list(args);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SCall.prototype = new J2SExpr();

export function J2STilde(loc, type, hint, range, stmt) {
  if (!new.target) {
    return new J2STilde({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "stmt": stmt});
  } else {
    this.clazz = 'J2STilde';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.stmt = stmt;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2STilde.prototype = new J2SExpr();

export function J2SDollar(loc, type, hint, range, node) {
  if (!new.target) {
    return new J2SDollar({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "node": node});
  } else {
    this.clazz = 'J2SDollar';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.node = node;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDollar.prototype = new J2SExpr();

export function J2SNew(loc, type, hint, range, caches, clazz, protocol, args) {
  if (!new.target) {
    return new J2SNew({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "caches": caches, "clazz": clazz, "protocol": protocol, "args": array2list(args)});
  } else {
    this.clazz = 'J2SNew';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.caches = caches;
         this.clazz = clazz;
         this.protocol = protocol;
         this.args = array2list(args);
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SNew.prototype = new J2SExpr();

export function J2SPropertyInit(loc, name) {
  if (!new.target) {
    return new J2SPropertyInit({"loc": array2list(loc), "name": name});
  } else {
    this.clazz = 'J2SPropertyInit';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.name = name;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SPropertyInit.prototype = new J2SNode();

export function J2SDataPropertyInit(loc, name, val) {
  if (!new.target) {
    return new J2SDataPropertyInit({"loc": array2list(loc), "name": name, "val": val});
  } else {
    this.clazz = 'J2SDataPropertyInit';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.name = name;
         this.val = val;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDataPropertyInit.prototype = new J2SPropertyInit();

export function J2SMethodPropertyInit(loc, name, val, inlinecachevar) {
  if (!new.target) {
    return new J2SMethodPropertyInit({"loc": array2list(loc), "name": name, "val": val, "inlinecachevar": inlinecachevar});
  } else {
    this.clazz = 'J2SMethodPropertyInit';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.name = name;
         this.val = val;
         this.inlinecachevar = inlinecachevar;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SMethodPropertyInit.prototype = new J2SDataPropertyInit();

export function J2SAccessorPropertyInit(loc, name, get, set) {
  if (!new.target) {
    return new J2SAccessorPropertyInit({"loc": array2list(loc), "name": name, "get": get, "set": set});
  } else {
    this.clazz = 'J2SAccessorPropertyInit';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.name = name;
         this.get = get;
         this.set = set;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SAccessorPropertyInit.prototype = new J2SPropertyInit();

export function J2SKont(loc, type, hint, range, param, exn, body) {
  if (!new.target) {
    return new J2SKont({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "param": param, "exn": exn, "body": body});
  } else {
    this.clazz = 'J2SKont';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.param = param;
         this.exn = exn;
         this.body = body;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SKont.prototype = new J2SExpr();

export function J2SOPTInitSeq(loc, nodes, ref, cmap, cache, offset, cnt) {
  if (!new.target) {
    return new J2SOPTInitSeq({"loc": array2list(loc), "nodes": array2list(nodes), "ref": ref, "cmap": cmap, "cache": cache, "offset": offset, "cnt": cnt});
  } else {
    this.clazz = 'J2SOPTInitSeq';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.nodes = array2list(nodes);
         this.ref = ref;
         this.cmap = cmap;
         this.cache = cache;
         this.offset = offset;
         this.cnt = cnt;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SOPTInitSeq.prototype = new J2SSeq();

export function J2SDProducer(loc, type, hint, range, decl, expr, size) {
  if (!new.target) {
    return new J2SDProducer({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl, "expr": expr, "size": size});
  } else {
    this.clazz = 'J2SDProducer';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.decl = decl;
         this.expr = expr;
         this.size = size;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDProducer.prototype = new J2SExpr();

export function J2SDConsumer(loc, type, hint, range, decl, expr, path) {
  if (!new.target) {
    return new J2SDConsumer({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl, "expr": expr, "path": path});
  } else {
    this.clazz = 'J2SDConsumer';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.decl = decl;
         this.expr = expr;
         this.path = path;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SDConsumer.prototype = new J2SExpr();

export function J2SExport(loc, id, alias) {
  if (!new.target) {
    return new J2SExport({"loc": array2list(loc), "id": id, "alias": alias});
  } else {
    this.clazz = 'J2SExport';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this.alias = alias;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SExport.prototype = new J2SStmt();

export function J2SExportDefault(loc, id, alias, expr) {
  if (!new.target) {
    return new J2SExportDefault({"loc": array2list(loc), "id": id, "alias": alias, "expr": expr});
  } else {
    this.clazz = 'J2SExportDefault';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this.alias = alias;
         this.expr = expr;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SExportDefault.prototype = new J2SExport();

export function J2SRedirect(loc, id, alias, _export, _import) {
  if (!new.target) {
    return new J2SRedirect({"loc": array2list(loc), "id": id, "alias": alias, "_export": _export, "_import": _import});
  } else {
    this.clazz = 'J2SRedirect';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this.alias = alias;
         this._export = _export;
         this._import = _import;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SRedirect.prototype = new J2SExport();

export function J2SRedirectNamespace(loc, id, alias, _export, _import) {
  if (!new.target) {
    return new J2SRedirectNamespace({"loc": array2list(loc), "id": id, "alias": alias, "_export": _export, "_import": _import});
  } else {
    this.clazz = 'J2SRedirectNamespace';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this.alias = alias;
         this._export = _export;
         this._import = _import;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SRedirectNamespace.prototype = new J2SRedirect();

export function J2SImportPath(loc, name, abspath, path, protocol, index, _import) {
  if (!new.target) {
    return new J2SImportPath({"loc": loc, "name": name, "abspath": abspath, "path": path, "protocol": protocol, "index": index, "_import": _import});
  } else {
    this.clazz = 'J2SImportPath';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.name = name;
         this.abspath = abspath;
         this.path = path;
         this.protocol = protocol;
         this.index = index;
         this._import = _import;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}

export function J2SImport(loc, path, ipath, dollarpath, names, iprgm, lang) {
  if (!new.target) {
    return new J2SImport({"loc": array2list(loc), "path": path, "ipath": ipath, "dollarpath": dollarpath, "names": array2list(names), "iprgm": iprgm, "lang": lang});
  } else {
    this.clazz = 'J2SImport';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.path = path;
         this.ipath = ipath;
         this.dollarpath = dollarpath;
         this.names = array2list(names);
         this.iprgm = iprgm;
         this.lang = lang;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SImport.prototype = new J2SStmt();

export function J2SImportName(loc, id, alias) {
  if (!new.target) {
    return new J2SImportName({"loc": loc, "id": id, "alias": alias});
  } else {
    this.clazz = 'J2SImportName';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.id = id;
         this.alias = alias;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}

export function J2SImportNamespace(loc, type, hint, range, id, _import) {
  if (!new.target) {
    return new J2SImportNamespace({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "id": id, "_import": _import});
  } else {
    this.clazz = 'J2SImportNamespace';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.id = id;
         this._import = _import;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SImportNamespace.prototype = new J2SExpr();

export function J2SImportDynamic(loc, type, hint, range, base, path) {
  if (!new.target) {
    return new J2SImportDynamic({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "base": base, "path": path});
  } else {
    this.clazz = 'J2SImportDynamic';
    if (loc) {
      if (loc instanceof Cons) {
         this.loc = loc;
         this.type = type;
         this.hint = array2list(hint);
         this.range = range;
         this.base = base;
         this.path = path;
      } else {
        Object.assign(this, loc);
       }
    }
  }
}
J2SImportDynamic.prototype = new J2SExpr();

export const ast = { "J2SNode": J2SNode, "J2SStmt": J2SStmt, "J2SMeta": J2SMeta, "J2SSeq": J2SSeq, "J2SBlock": J2SBlock, "J2SProgram": J2SProgram, "J2SDecl": J2SDecl, "J2SDeclRest": J2SDeclRest, "J2SDeclArguments": J2SDeclArguments, "J2SDeclInit": J2SDeclInit, "J2SDeclFun": J2SDeclFun, "J2SDeclFunType": J2SDeclFunType, "J2SDeclSvc": J2SDeclSvc, "J2SDeclClass": J2SDeclClass, "J2SDeclExtern": J2SDeclExtern, "J2SDeclImport": J2SDeclImport, "J2SDeclInterface": J2SDeclInterface, "J2SExpr": J2SExpr, "J2SCast": J2SCast, "J2SCheck": J2SCheck, "J2SStmtExpr": J2SStmtExpr, "J2SIf": J2SIf, "J2SPrecache": J2SPrecache, "J2SIfIsRecord": J2SIfIsRecord, "J2SVarDecls": J2SVarDecls, "J2SLetBlock": J2SLetBlock, "J2SIdStmt": J2SIdStmt, "J2SSwitch": J2SSwitch, "J2SLoop": J2SLoop, "J2SFor": J2SFor, "J2SForIn": J2SForIn, "J2SWhile": J2SWhile, "J2SDo": J2SDo, "J2SLabel": J2SLabel, "J2SBreak": J2SBreak, "J2SContinue": J2SContinue, "J2SNop": J2SNop, "J2SCase": J2SCase, "J2SDefault": J2SDefault, "J2SBindExit": J2SBindExit, "J2SReturn": J2SReturn, "J2SReturnYield": J2SReturnYield, "J2SYield": J2SYield, "J2SWith": J2SWith, "J2SThrow": J2SThrow, "J2SFun": J2SFun, "J2SSvc": J2SSvc, "J2SArrow": J2SArrow, "J2SMethod": J2SMethod, "J2SClass": J2SClass, "J2SRecord": J2SRecord, "J2SClassElement": J2SClassElement, "J2SCatch": J2SCatch, "J2STry": J2STry, "J2SPragma": J2SPragma, "J2SSequence": J2SSequence, "J2SUnresolvedRef": J2SUnresolvedRef, "J2SGlobalRef": J2SGlobalRef, "J2SRef": J2SRef, "J2SWithRef": J2SWithRef, "J2SHopRef": J2SHopRef, "J2SLetRef": J2SLetRef, "J2SAref": J2SAref, "J2SKontRef": J2SKontRef, "J2SThis": J2SThis, "J2SSuper": J2SSuper, "J2SCond": J2SCond, "J2SLiteral": J2SLiteral, "J2SArrayAbsent": J2SArrayAbsent, "J2SNull": J2SNull, "J2SUndefined": J2SUndefined, "J2SLiteralValue": J2SLiteralValue, "J2SNativeString": J2SNativeString, "J2SString": J2SString, "J2SBool": J2SBool, "J2SNumber": J2SNumber, "J2SOctalNumber": J2SOctalNumber, "J2SRegExp": J2SRegExp, "J2SCmap": J2SCmap, "J2SLiteralCnst": J2SLiteralCnst, "J2SArray": J2SArray, "J2SSpread": J2SSpread, "J2STemplate": J2STemplate, "J2SParen": J2SParen, "J2SUnary": J2SUnary, "J2SBinary": J2SBinary, "J2SAssig": J2SAssig, "J2SInit": J2SInit, "J2SFunBinding": J2SFunBinding, "J2SPrefix": J2SPrefix, "J2SPostfix": J2SPostfix, "J2SAssigOp": J2SAssigOp, "J2SObjInit": J2SObjInit, "J2SAccess": J2SAccess, "J2SCacheCheck": J2SCacheCheck, "J2SCacheUpdate": J2SCacheUpdate, "J2SCall": J2SCall, "J2STilde": J2STilde, "J2SDollar": J2SDollar, "J2SNew": J2SNew, "J2SPropertyInit": J2SPropertyInit, "J2SDataPropertyInit": J2SDataPropertyInit, "J2SMethodPropertyInit": J2SMethodPropertyInit, "J2SAccessorPropertyInit": J2SAccessorPropertyInit, "J2SKont": J2SKont, "J2SOPTInitSeq": J2SOPTInitSeq, "J2SDProducer": J2SDProducer, "J2SDConsumer": J2SDConsumer, "J2SExport": J2SExport, "J2SExportDefault": J2SExportDefault, "J2SRedirect": J2SRedirect, "J2SRedirectNamespace": J2SRedirectNamespace, "J2SImportPath": J2SImportPath, "J2SImport": J2SImport, "J2SImportName": J2SImportName, "J2SImportNamespace": J2SImportNamespace, "J2SImportDynamic": J2SImportDynamic
}
/*---------------------------------------------------------------------*/
/*    Definitions to be concatenated to ast.mjs when generated.        */
/*---------------------------------------------------------------------*/

/*---------------------------------------------------------------------*/
/*    toString ...                                                     */
/*---------------------------------------------------------------------*/
J2SNode.prototype.toString = function() {
   return `<${this.clazz}>`;
}

/*---------------------------------------------------------------------*/
/*    j2sLetp ...                                                      */
/*---------------------------------------------------------------------*/
export function j2sLetp(decl) {
   switch (decl.binder) {
      case "let":
      case "let-opt":
      case "let-forin":
	 return true;
      case "var":
      case "param":
      case "record":
      case "export":
	 return false;
      default:
	 throw `j2sLetp: wrong binder "${decl.binder}"`;
   }
}

/*---------------------------------------------------------------------*/
/*    j2sVarp ...                                                      */
/*---------------------------------------------------------------------*/
export function j2sVarp(decl) {
   switch (decl.binder) {
      case "var":
	 return true;
      case "let":
      case "let-opt":
      case "let-forin":
	 return true;
      case "var":
      case "param":
      case "record":
      case "export":
	 return false;
      default:
	 throw `j2sVarp: wrong binder "${decl.binder}"`;
   }
}

/*---------------------------------------------------------------------*/
/*    j2sConstp ...                                                    */
/*---------------------------------------------------------------------*/
export function j2sConstp(decl) {
   if (decl.writable) {
      return false;
   } else {
      switch (decl.binder) {
	 case "let":
	 case "let-opt":
	 case "let-forin":
	 case "export":
	    return true;
	 case "var":
	 case "param":
	 case "record":
	    return false;
	 default:
	    throw `j2sConstp: wrong binder "${decl.binder}"`;
      }
   }
}

/*---------------------------------------------------------------------*/
/*    j2sfunExpressionp ...                                            */
/*---------------------------------------------------------------------*/
export function j2sfunExpressionp(fun) {
   if (fun.decl instanceof J2SDeclFun) {
      return fun.decl.expression;
   } else {
      return false;
   }
}
