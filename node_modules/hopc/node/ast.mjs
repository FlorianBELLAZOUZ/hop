/* generated file (mkjsast), do not edit (27 October 2023) */

// generated by /home/serrano/prgm/project/hop/hop/node_modules/hopc/node/mkjast.scm
"use strict"

import * as simpleAst from "./simple-ast.mjs";
import { array2list} from "./list.mjs";
export function J2SNode(loc) { return simpleAst.J2SNode({"loc": array2list(loc)}) }
export function J2SStmt(loc) { return new simpleAst.J2SStmt({"loc": array2list(loc)}) }
export function J2SMeta(loc, meta, debug, optim, stmt) { return new simpleAst.J2SMeta({"loc": array2list(loc), "meta": meta, "debug": debug, "optim": optim, "stmt": stmt}) }
export function J2SSeq(loc, nodes) { return new simpleAst.J2SSeq({"loc": array2list(loc), "nodes": array2list(nodes)}) }
export function J2SBlock(loc, nodes, endloc) { return new simpleAst.J2SBlock({"loc": array2list(loc), "nodes": array2list(nodes), "endloc": array2list(endloc)}) }
export function J2SProgram(loc, nodes, endloc, mode, path, pcache_size, rxcache_size, call_size, name, main, module, cnsts, decls, types, headers, globals, direct_eval, source_map, imports, exports) { return new simpleAst.J2SProgram({"loc": array2list(loc), "nodes": array2list(nodes), "endloc": array2list(endloc), "mode": mode, "path": path, "pcache_size": pcache_size, "rxcache_size": rxcache_size, "call_size": call_size, "name": name, "main": main, "module": module, "cnsts": array2list(cnsts), "decls": array2list(decls), "types": array2list(types), "headers": array2list(headers), "globals": array2list(globals), "direct_eval": direct_eval, "source_map": source_map, "imports": array2list(imports), "exports": array2list(exports)}) }
export function J2SDecl(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export) { return new simpleAst.J2SDecl({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export}) }
export function J2SDeclRest(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, alloc_policy) { return new simpleAst.J2SDeclRest({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "alloc_policy": alloc_policy}) }
export function J2SDeclArguments(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, alloc_policy, argid, mode, fun) { return new simpleAst.J2SDeclArguments({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "alloc_policy": alloc_policy, "argid": argid, "mode": mode, "fun": fun}) }
export function J2SDeclInit(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val) { return new simpleAst.J2SDeclInit({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val}) }
export function J2SDeclFun(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val, expression) { return new simpleAst.J2SDeclFun({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val, "expression": expression}) }
export function J2SDeclFunType(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val, expression) { return new simpleAst.J2SDeclFunType({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val, "expression": expression}) }
export function J2SDeclSvc(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val, expression) { return new simpleAst.J2SDeclSvc({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val, "expression": expression}) }
export function J2SDeclClass(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val) { return new simpleAst.J2SDeclClass({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val}) }
export function J2SDeclExtern(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, val, bind, hidden_class, raise_on_write, sweepable, configurable) { return new simpleAst.J2SDeclExtern({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "val": val, "bind": bind, "hidden_class": hidden_class, "raise_on_write": raise_on_write, "sweepable": sweepable, "configurable": configurable}) }
export function J2SDeclImport(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export, alias, _import) { return new simpleAst.J2SDeclImport({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export, "alias": alias, "_import": _import}) }
export function J2SDeclInterface(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, _export) { return new simpleAst.J2SDeclInterface({"loc": array2list(loc), "id": id, "_scmid": _scmid, "key": key, "writable": writable, "scope": scope, "usecnt": usecnt, "useinloop": useinloop, "escape": escape, "usage": usage, "binder": binder, "ctype": ctype, "utype": utype, "itype": itype, "vtype": vtype, "mtype": mtype, "irange": irange, "vrange": vrange, "hint": array2list(hint), "_export": _export}) }
export function J2SExpr(loc, type, hint, range) { return new simpleAst.J2SExpr({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range}) }
export function J2SCast(loc, type, hint, range, _static, expr) { return new simpleAst.J2SCast({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "_static": _static, "expr": expr}) }
export function J2SCheck(loc, type, hint, range, expr) { return new simpleAst.J2SCheck({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "expr": expr}) }
export function J2SStmtExpr(loc, expr) { return new simpleAst.J2SStmtExpr({"loc": array2list(loc), "expr": expr}) }
export function J2SIf(loc, test, then, _else) { return new simpleAst.J2SIf({"loc": array2list(loc), "test": test, "then": then, "_else": _else}) }
export function J2SPrecache(loc, test, then, _else, accesses) { return new simpleAst.J2SPrecache({"loc": array2list(loc), "test": test, "then": then, "_else": _else, "accesses": array2list(accesses)}) }
export function J2SIfIsRecord(loc, test, then, _else) { return new simpleAst.J2SIfIsRecord({"loc": array2list(loc), "test": test, "then": then, "_else": _else}) }
export function J2SVarDecls(loc, decls) { return new simpleAst.J2SVarDecls({"loc": array2list(loc), "decls": array2list(decls)}) }
export function J2SLetBlock(loc, nodes, endloc, rec, decls, mode) { return new simpleAst.J2SLetBlock({"loc": array2list(loc), "nodes": array2list(nodes), "endloc": array2list(endloc), "rec": rec, "decls": array2list(decls), "mode": mode}) }
export function J2SIdStmt(loc, need_bind_exit_break, id) { return new simpleAst.J2SIdStmt({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id}) }
export function J2SSwitch(loc, need_bind_exit_break, id, key, cases) { return new simpleAst.J2SSwitch({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "key": key, "cases": array2list(cases)}) }
export function J2SLoop(loc, need_bind_exit_break, id, need_bind_exit_continue, body) { return new simpleAst.J2SLoop({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "need_bind_exit_continue": need_bind_exit_continue, "body": body}) }
export function J2SFor(loc, need_bind_exit_break, id, need_bind_exit_continue, body, init, test, incr) { return new simpleAst.J2SFor({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "need_bind_exit_continue": need_bind_exit_continue, "body": body, "init": init, "test": test, "incr": incr}) }
export function J2SForIn(loc, need_bind_exit_break, id, need_bind_exit_continue, body, op, lhs, obj) { return new simpleAst.J2SForIn({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "need_bind_exit_continue": need_bind_exit_continue, "body": body, "op": op, "lhs": lhs, "obj": obj}) }
export function J2SWhile(loc, need_bind_exit_break, id, need_bind_exit_continue, body, test) { return new simpleAst.J2SWhile({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "need_bind_exit_continue": need_bind_exit_continue, "body": body, "test": test}) }
export function J2SDo(loc, need_bind_exit_break, id, need_bind_exit_continue, body, test) { return new simpleAst.J2SDo({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "need_bind_exit_continue": need_bind_exit_continue, "body": body, "test": test}) }
export function J2SLabel(loc, need_bind_exit_break, id, body) { return new simpleAst.J2SLabel({"loc": array2list(loc), "need_bind_exit_break": need_bind_exit_break, "id": id, "body": body}) }
export function J2SBreak(loc, target, id) { return new simpleAst.J2SBreak({"loc": array2list(loc), "target": target, "id": id}) }
export function J2SContinue(loc, target, id) { return new simpleAst.J2SContinue({"loc": array2list(loc), "target": target, "id": id}) }
export function J2SNop(loc) { return new simpleAst.J2SNop({"loc": array2list(loc)}) }
export function J2SCase(loc, expr, body, cascade) { return new simpleAst.J2SCase({"loc": array2list(loc), "expr": expr, "body": body, "cascade": cascade}) }
export function J2SDefault(loc, expr, body, cascade) { return new simpleAst.J2SDefault({"loc": array2list(loc), "expr": expr, "body": body, "cascade": cascade}) }
export function J2SBindExit(loc, type, hint, range, lbl, utype, stmt) { return new simpleAst.J2SBindExit({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lbl": lbl, "utype": utype, "stmt": stmt}) }
export function J2SReturn(loc, exit, tail, from, expr) { return new simpleAst.J2SReturn({"loc": array2list(loc), "exit": exit, "tail": tail, "from": from, "expr": expr}) }
export function J2SReturnYield(loc, expr, generator, kont) { return new simpleAst.J2SReturnYield({"loc": array2list(loc), "expr": expr, "generator": generator, "kont": kont}) }
export function J2SYield(loc, type, hint, range, expr, generator, _await) { return new simpleAst.J2SYield({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "expr": expr, "generator": generator, "_await": _await}) }
export function J2SWith(loc, id, obj, block) { return new simpleAst.J2SWith({"loc": array2list(loc), "id": id, "obj": obj, "block": block}) }
export function J2SThrow(loc, expr) { return new simpleAst.J2SThrow({"loc": array2list(loc), "expr": expr}) }
export function J2SFun(loc, type, hint, range, rtype, rutype, rrange, idthis, idgen, mode, decl, need_bind_exit_return, new_target, vararg, name, generator, optimize, thisp, argumentsp, params, constrsize, src, _method, ismethodof, body) { return new simpleAst.J2SFun({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "rtype": rtype, "rutype": rutype, "rrange": rrange, "idthis": idthis, "idgen": idgen, "mode": mode, "decl": decl, "need_bind_exit_return": need_bind_exit_return, "new_target": new_target, "vararg": vararg, "name": name, "generator": generator, "optimize": optimize, "thisp": thisp, "argumentsp": argumentsp, "params": array2list(params), "constrsize": constrsize, "src": src, "_method": _method, "ismethodof": ismethodof, "body": body}) }
export function J2SSvc(loc, type, hint, range, rtype, rutype, rrange, idthis, idgen, mode, decl, need_bind_exit_return, new_target, vararg, name, generator, optimize, thisp, argumentsp, params, constrsize, src, _method, ismethodof, body, init, path, register, _import) { return new simpleAst.J2SSvc({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "rtype": rtype, "rutype": rutype, "rrange": rrange, "idthis": idthis, "idgen": idgen, "mode": mode, "decl": decl, "need_bind_exit_return": need_bind_exit_return, "new_target": new_target, "vararg": vararg, "name": name, "generator": generator, "optimize": optimize, "thisp": thisp, "argumentsp": argumentsp, "params": array2list(params), "constrsize": constrsize, "src": src, "_method": _method, "ismethodof": ismethodof, "body": body, "init": init, "path": path, "register": register, "_import": _import}) }
export function J2SArrow(loc, type, hint, range, rtype, rutype, rrange, idthis, idgen, mode, decl, need_bind_exit_return, new_target, vararg, name, generator, optimize, thisp, argumentsp, params, constrsize, src, _method, ismethodof, body) { return new simpleAst.J2SArrow({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "rtype": rtype, "rutype": rutype, "rrange": rrange, "idthis": idthis, "idgen": idgen, "mode": mode, "decl": decl, "need_bind_exit_return": need_bind_exit_return, "new_target": new_target, "vararg": vararg, "name": name, "generator": generator, "optimize": optimize, "thisp": thisp, "argumentsp": argumentsp, "params": array2list(params), "constrsize": constrsize, "src": src, "_method": _method, "ismethodof": ismethodof, "body": body}) }
export function J2SMethod(loc, type, hint, range, _function, _method) { return new simpleAst.J2SMethod({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "_function": _function, "_method": _method}) }
export function J2SClass(loc, type, hint, range, endloc, name, decl, _super, src, elements, constrsize, cmap, need_super_check, need_dead_zone_check, methods) { return new simpleAst.J2SClass({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "endloc": array2list(endloc), "name": name, "decl": decl, "_super": _super, "src": src, "elements": array2list(elements), "constrsize": constrsize, "cmap": cmap, "need_super_check": need_super_check, "need_dead_zone_check": need_dead_zone_check, "methods": methods}) }
export function J2SRecord(loc, type, hint, range, endloc, name, decl, _super, src, elements, constrsize, cmap, need_super_check, need_dead_zone_check, methods) { return new simpleAst.J2SRecord({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "endloc": array2list(endloc), "name": name, "decl": decl, "_super": _super, "src": src, "elements": array2list(elements), "constrsize": constrsize, "cmap": cmap, "need_super_check": need_super_check, "need_dead_zone_check": need_dead_zone_check, "methods": methods}) }
export function J2SClassElement(loc, _static, prop, type, clazz, index, rtwin, usage, hint) { return new simpleAst.J2SClassElement({"loc": array2list(loc), "_static": _static, "prop": prop, "type": type, "clazz": clazz, "index": index, "rtwin": rtwin, "usage": usage, "hint": array2list(hint)}) }
export function J2SCatch(loc, param, body) { return new simpleAst.J2SCatch({"loc": array2list(loc), "param": param, "body": body}) }
export function J2STry(loc, body, _catch, _finally) { return new simpleAst.J2STry({"loc": array2list(loc), "body": body, "_catch": _catch, "_finally": _finally}) }
export function J2SPragma(loc, type, hint, range, lang, vars, vals, expr) { return new simpleAst.J2SPragma({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lang": lang, "vars": array2list(vars), "vals": array2list(vals), "expr": expr}) }
export function J2SSequence(loc, type, hint, range, exprs) { return new simpleAst.J2SSequence({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "exprs": array2list(exprs)}) }
export function J2SUnresolvedRef(loc, type, hint, range, cache, id) { return new simpleAst.J2SUnresolvedRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "cache": cache, "id": id}) }
export function J2SGlobalRef(loc, type, hint, range, cache, id, decl) { return new simpleAst.J2SGlobalRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "cache": cache, "id": id, "decl": decl}) }
export function J2SRef(loc, type, hint, range, decl) { return new simpleAst.J2SRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl}) }
export function J2SWithRef(loc, type, hint, range, id, withs, expr) { return new simpleAst.J2SWithRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "id": id, "withs": array2list(withs), "expr": expr}) }
export function J2SHopRef(loc, type, hint, range, id, rtype, module) { return new simpleAst.J2SHopRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "id": id, "rtype": rtype, "module": module}) }
export function J2SLetRef(loc, type, hint, range, decl) { return new simpleAst.J2SLetRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl}) }
export function J2SAref(loc, type, hint, range, decl, array, alen, amark, deps) { return new simpleAst.J2SAref({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl, "array": array, "alen": alen, "amark": amark, "deps": array2list(deps)}) }
export function J2SKontRef(loc, type, hint, range, gen, index, id) { return new simpleAst.J2SKontRef({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "gen": gen, "index": index, "id": id}) }
export function J2SThis(loc, type, hint, range, decl) { return new simpleAst.J2SThis({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl}) }
export function J2SSuper(loc, type, hint, range, decl, rtwinp, _super, context) { return new simpleAst.J2SSuper({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl, "rtwinp": rtwinp, "_super": _super, "context": context}) }
export function J2SCond(loc, type, hint, range, test, then, _else) { return new simpleAst.J2SCond({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "test": test, "then": then, "_else": _else}) }
export function J2SLiteral(loc, type, hint, range) { return new simpleAst.J2SLiteral({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range}) }
export function J2SArrayAbsent(loc, type, hint, range) { return new simpleAst.J2SArrayAbsent({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range}) }
export function J2SNull(loc, type, hint, range) { return new simpleAst.J2SNull({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range}) }
export function J2SUndefined(loc, type, hint, range) { return new simpleAst.J2SUndefined({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range}) }
export function J2SLiteralValue(loc, type, hint, range, val) { return new simpleAst.J2SLiteralValue({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val}) }
export function J2SNativeString(loc, type, hint, range, val) { return new simpleAst.J2SNativeString({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val}) }
export function J2SString(loc, type, hint, range, val, escape, _private) { return new simpleAst.J2SString({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val, "escape": array2list(escape), "_private": _private}) }
export function J2SBool(loc, type, hint, range, val) { return new simpleAst.J2SBool({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val}) }
export function J2SNumber(loc, type, hint, range, val) { return new simpleAst.J2SNumber({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val}) }
export function J2SOctalNumber(loc, type, hint, range, val) { return new simpleAst.J2SOctalNumber({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val}) }
export function J2SRegExp(loc, type, hint, range, val, flags, inline) { return new simpleAst.J2SRegExp({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val, "flags": flags, "inline": inline}) }
export function J2SCmap(loc, type, hint, range, val, ctor) { return new simpleAst.J2SCmap({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "val": val, "ctor": ctor}) }
export function J2SLiteralCnst(loc, type, hint, range, index, val) { return new simpleAst.J2SLiteralCnst({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "index": index, "val": val}) }
export function J2SArray(loc, type, hint, range, len, exprs) { return new simpleAst.J2SArray({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "len": len, "exprs": array2list(exprs)}) }
export function J2SSpread(loc, type, hint, range, stype, expr) { return new simpleAst.J2SSpread({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "stype": stype, "expr": expr}) }
export function J2STemplate(loc, type, hint, range, exprs) { return new simpleAst.J2STemplate({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "exprs": array2list(exprs)}) }
export function J2SParen(loc, type, hint, range, expr) { return new simpleAst.J2SParen({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "expr": expr}) }
export function J2SUnary(loc, type, hint, range, op, expr) { return new simpleAst.J2SUnary({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "op": op, "expr": expr}) }
export function J2SBinary(loc, type, hint, range, op, lhs, rhs) { return new simpleAst.J2SBinary({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "op": op, "lhs": lhs, "rhs": rhs}) }
export function J2SAssig(loc, type, hint, range, lhs, rhs) { return new simpleAst.J2SAssig({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs}) }
export function J2SInit(loc, type, hint, range, lhs, rhs) { return new simpleAst.J2SInit({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs}) }
export function J2SFunBinding(loc, type, hint, range, lhs, rhs) { return new simpleAst.J2SFunBinding({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs}) }
export function J2SPrefix(loc, type, hint, range, lhs, rhs, op) { return new simpleAst.J2SPrefix({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs, "op": op}) }
export function J2SPostfix(loc, type, hint, range, lhs, rhs, op) { return new simpleAst.J2SPostfix({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs, "op": op}) }
export function J2SAssigOp(loc, type, hint, range, lhs, rhs, op) { return new simpleAst.J2SAssigOp({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "lhs": lhs, "rhs": rhs, "op": op}) }
export function J2SObjInit(loc, type, hint, range, inits, cmap, ronly) { return new simpleAst.J2SObjInit({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "inits": array2list(inits), "cmap": cmap, "ronly": ronly}) }
export function J2SAccess(loc, type, hint, range, obj, field) { return new simpleAst.J2SAccess({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "obj": obj, "field": field}) }
export function J2SCacheCheck(loc, type, hint, range, prop, cache, owner, obj, fields) { return new simpleAst.J2SCacheCheck({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "prop": prop, "cache": cache, "owner": owner, "obj": obj, "fields": array2list(fields)}) }
export function J2SCacheUpdate(loc, type, hint, range, prop, cache, obj) { return new simpleAst.J2SCacheUpdate({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "prop": prop, "cache": cache, "obj": obj}) }
export function J2SCall(loc, type, hint, range, profid, fun, protocol, thisargs, args) { return new simpleAst.J2SCall({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "profid": profid, "fun": fun, "protocol": protocol, "thisargs": array2list(thisargs), "args": array2list(args)}) }
export function J2STilde(loc, type, hint, range, stmt) { return new simpleAst.J2STilde({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "stmt": stmt}) }
export function J2SDollar(loc, type, hint, range, node) { return new simpleAst.J2SDollar({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "node": node}) }
export function J2SNew(loc, type, hint, range, caches, clazz, protocol, args) { return new simpleAst.J2SNew({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "caches": caches, "clazz": clazz, "protocol": protocol, "args": array2list(args)}) }
export function J2SPropertyInit(loc, name) { return new simpleAst.J2SPropertyInit({"loc": array2list(loc), "name": name}) }
export function J2SDataPropertyInit(loc, name, val) { return new simpleAst.J2SDataPropertyInit({"loc": array2list(loc), "name": name, "val": val}) }
export function J2SMethodPropertyInit(loc, name, val, inlinecachevar) { return new simpleAst.J2SMethodPropertyInit({"loc": array2list(loc), "name": name, "val": val, "inlinecachevar": inlinecachevar}) }
export function J2SAccessorPropertyInit(loc, name, get, set) { return new simpleAst.J2SAccessorPropertyInit({"loc": array2list(loc), "name": name, "get": get, "set": set}) }
export function J2SKont(loc, type, hint, range, param, exn, body) { return new simpleAst.J2SKont({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "param": param, "exn": exn, "body": body}) }
export function J2SOPTInitSeq(loc, nodes, ref, cmap, cache, offset, cnt) { return new simpleAst.J2SOPTInitSeq({"loc": array2list(loc), "nodes": array2list(nodes), "ref": ref, "cmap": cmap, "cache": cache, "offset": offset, "cnt": cnt}) }
export function J2SDProducer(loc, type, hint, range, decl, expr, size) { return new simpleAst.J2SDProducer({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl, "expr": expr, "size": size}) }
export function J2SDConsumer(loc, type, hint, range, decl, expr, path) { return new simpleAst.J2SDConsumer({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "decl": decl, "expr": expr, "path": path}) }
export function J2SExport(loc, id, alias) { return new simpleAst.J2SExport({"loc": array2list(loc), "id": id, "alias": alias}) }
export function J2SExportDefault(loc, id, alias, expr) { return new simpleAst.J2SExportDefault({"loc": array2list(loc), "id": id, "alias": alias, "expr": expr}) }
export function J2SRedirect(loc, id, alias, _export, _import) { return new simpleAst.J2SRedirect({"loc": array2list(loc), "id": id, "alias": alias, "_export": _export, "_import": _import}) }
export function J2SRedirectNamespace(loc, id, alias, _export, _import) { return new simpleAst.J2SRedirectNamespace({"loc": array2list(loc), "id": id, "alias": alias, "_export": _export, "_import": _import}) }
export function J2SImportPath(loc, name, abspath, path, protocol, index, _import) { return simpleAst.J2SImportPath({"loc": loc, "name": name, "abspath": abspath, "path": path, "protocol": protocol, "index": index, "_import": _import}) }
export function J2SImport(loc, path, ipath, dollarpath, names, iprgm, lang) { return new simpleAst.J2SImport({"loc": array2list(loc), "path": path, "ipath": ipath, "dollarpath": dollarpath, "names": array2list(names), "iprgm": iprgm, "lang": lang}) }
export function J2SImportName(loc, id, alias) { return simpleAst.J2SImportName({"loc": loc, "id": id, "alias": alias}) }
export function J2SImportNamespace(loc, type, hint, range, id, _import) { return new simpleAst.J2SImportNamespace({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "id": id, "_import": _import}) }
export function J2SImportDynamic(loc, type, hint, range, base, path) { return new simpleAst.J2SImportDynamic({"loc": array2list(loc), "type": type, "hint": array2list(hint), "range": range, "base": base, "path": path}) }
export const ast = { "J2SNode": J2SNode, "J2SStmt": J2SStmt, "J2SMeta": J2SMeta, "J2SSeq": J2SSeq, "J2SBlock": J2SBlock, "J2SProgram": J2SProgram, "J2SDecl": J2SDecl, "J2SDeclRest": J2SDeclRest, "J2SDeclArguments": J2SDeclArguments, "J2SDeclInit": J2SDeclInit, "J2SDeclFun": J2SDeclFun, "J2SDeclFunType": J2SDeclFunType, "J2SDeclSvc": J2SDeclSvc, "J2SDeclClass": J2SDeclClass, "J2SDeclExtern": J2SDeclExtern, "J2SDeclImport": J2SDeclImport, "J2SDeclInterface": J2SDeclInterface, "J2SExpr": J2SExpr, "J2SCast": J2SCast, "J2SCheck": J2SCheck, "J2SStmtExpr": J2SStmtExpr, "J2SIf": J2SIf, "J2SPrecache": J2SPrecache, "J2SIfIsRecord": J2SIfIsRecord, "J2SVarDecls": J2SVarDecls, "J2SLetBlock": J2SLetBlock, "J2SIdStmt": J2SIdStmt, "J2SSwitch": J2SSwitch, "J2SLoop": J2SLoop, "J2SFor": J2SFor, "J2SForIn": J2SForIn, "J2SWhile": J2SWhile, "J2SDo": J2SDo, "J2SLabel": J2SLabel, "J2SBreak": J2SBreak, "J2SContinue": J2SContinue, "J2SNop": J2SNop, "J2SCase": J2SCase, "J2SDefault": J2SDefault, "J2SBindExit": J2SBindExit, "J2SReturn": J2SReturn, "J2SReturnYield": J2SReturnYield, "J2SYield": J2SYield, "J2SWith": J2SWith, "J2SThrow": J2SThrow, "J2SFun": J2SFun, "J2SSvc": J2SSvc, "J2SArrow": J2SArrow, "J2SMethod": J2SMethod, "J2SClass": J2SClass, "J2SRecord": J2SRecord, "J2SClassElement": J2SClassElement, "J2SCatch": J2SCatch, "J2STry": J2STry, "J2SPragma": J2SPragma, "J2SSequence": J2SSequence, "J2SUnresolvedRef": J2SUnresolvedRef, "J2SGlobalRef": J2SGlobalRef, "J2SRef": J2SRef, "J2SWithRef": J2SWithRef, "J2SHopRef": J2SHopRef, "J2SLetRef": J2SLetRef, "J2SAref": J2SAref, "J2SKontRef": J2SKontRef, "J2SThis": J2SThis, "J2SSuper": J2SSuper, "J2SCond": J2SCond, "J2SLiteral": J2SLiteral, "J2SArrayAbsent": J2SArrayAbsent, "J2SNull": J2SNull, "J2SUndefined": J2SUndefined, "J2SLiteralValue": J2SLiteralValue, "J2SNativeString": J2SNativeString, "J2SString": J2SString, "J2SBool": J2SBool, "J2SNumber": J2SNumber, "J2SOctalNumber": J2SOctalNumber, "J2SRegExp": J2SRegExp, "J2SCmap": J2SCmap, "J2SLiteralCnst": J2SLiteralCnst, "J2SArray": J2SArray, "J2SSpread": J2SSpread, "J2STemplate": J2STemplate, "J2SParen": J2SParen, "J2SUnary": J2SUnary, "J2SBinary": J2SBinary, "J2SAssig": J2SAssig, "J2SInit": J2SInit, "J2SFunBinding": J2SFunBinding, "J2SPrefix": J2SPrefix, "J2SPostfix": J2SPostfix, "J2SAssigOp": J2SAssigOp, "J2SObjInit": J2SObjInit, "J2SAccess": J2SAccess, "J2SCacheCheck": J2SCacheCheck, "J2SCacheUpdate": J2SCacheUpdate, "J2SCall": J2SCall, "J2STilde": J2STilde, "J2SDollar": J2SDollar, "J2SNew": J2SNew, "J2SPropertyInit": J2SPropertyInit, "J2SDataPropertyInit": J2SDataPropertyInit, "J2SMethodPropertyInit": J2SMethodPropertyInit, "J2SAccessorPropertyInit": J2SAccessorPropertyInit, "J2SKont": J2SKont, "J2SOPTInitSeq": J2SOPTInitSeq, "J2SDProducer": J2SDProducer, "J2SDConsumer": J2SDConsumer, "J2SExport": J2SExport, "J2SExportDefault": J2SExportDefault, "J2SRedirect": J2SRedirect, "J2SRedirectNamespace": J2SRedirectNamespace, "J2SImportPath": J2SImportPath, "J2SImport": J2SImport, "J2SImportName": J2SImportName, "J2SImportNamespace": J2SImportNamespace, "J2SImportDynamic": J2SImportDynamic
}
