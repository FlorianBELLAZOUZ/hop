/* generated file (ast2js.scm), do not edit */
"use strict"

export function J2SNode(props) { const obj = this || {}; obj.clazz = 'J2SNode'; props && Object.assign(obj, props); return obj; }

export function J2SStmt(props) { const obj = this || {}; obj.clazz = 'J2SStmt'; props && Object.assign(this, props); return obj; }
J2SStmt.prototype = new J2SNode();

export function J2SMeta(props) { const obj = this || {}; obj.clazz = 'J2SMeta'; props && Object.assign(this, props); return obj; }
J2SMeta.prototype = new J2SStmt();

export function J2SSeq(props) { const obj = this || {}; obj.clazz = 'J2SSeq'; props && Object.assign(this, props); return obj; }
J2SSeq.prototype = new J2SStmt();

export function J2SBlock(props) { const obj = this || {}; obj.clazz = 'J2SBlock'; props && Object.assign(this, props); return obj; }
J2SBlock.prototype = new J2SSeq();

export function J2SProgram(props) { const obj = this || {}; obj.clazz = 'J2SProgram'; props && Object.assign(this, props); return obj; }
J2SProgram.prototype = new J2SBlock();

export function J2SDecl(props) { const obj = this || {}; obj.clazz = 'J2SDecl'; props && Object.assign(this, props); return obj; }
J2SDecl.prototype = new J2SStmt();

export function J2SDeclRest(props) { const obj = this || {}; obj.clazz = 'J2SDeclRest'; props && Object.assign(this, props); return obj; }
J2SDeclRest.prototype = new J2SDecl();

export function J2SDeclArguments(props) { const obj = this || {}; obj.clazz = 'J2SDeclArguments'; props && Object.assign(this, props); return obj; }
J2SDeclArguments.prototype = new J2SDeclRest();

export function J2SDeclInit(props) { const obj = this || {}; obj.clazz = 'J2SDeclInit'; props && Object.assign(this, props); return obj; }
J2SDeclInit.prototype = new J2SDecl();

export function J2SDeclFun(props) { const obj = this || {}; obj.clazz = 'J2SDeclFun'; props && Object.assign(this, props); return obj; }
J2SDeclFun.prototype = new J2SDeclInit();

export function J2SDeclFunType(props) { const obj = this || {}; obj.clazz = 'J2SDeclFunType'; props && Object.assign(this, props); return obj; }
J2SDeclFunType.prototype = new J2SDeclFun();

export function J2SDeclSvc(props) { const obj = this || {}; obj.clazz = 'J2SDeclSvc'; props && Object.assign(this, props); return obj; }
J2SDeclSvc.prototype = new J2SDeclFun();

export function J2SDeclClass(props) { const obj = this || {}; obj.clazz = 'J2SDeclClass'; props && Object.assign(this, props); return obj; }
J2SDeclClass.prototype = new J2SDeclInit();

export function J2SDeclExtern(props) { const obj = this || {}; obj.clazz = 'J2SDeclExtern'; props && Object.assign(this, props); return obj; }
J2SDeclExtern.prototype = new J2SDeclInit();

export function J2SDeclImport(props) { const obj = this || {}; obj.clazz = 'J2SDeclImport'; props && Object.assign(this, props); return obj; }
J2SDeclImport.prototype = new J2SDecl();

export function J2SDeclInterface(props) { const obj = this || {}; obj.clazz = 'J2SDeclInterface'; props && Object.assign(this, props); return obj; }
J2SDeclInterface.prototype = new J2SDecl();

export function J2SExpr(props) { const obj = this || {}; obj.clazz = 'J2SExpr'; props && Object.assign(this, props); return obj; }
J2SExpr.prototype = new J2SNode();

export function J2SCast(props) { const obj = this || {}; obj.clazz = 'J2SCast'; props && Object.assign(this, props); return obj; }
J2SCast.prototype = new J2SExpr();

export function J2SCheck(props) { const obj = this || {}; obj.clazz = 'J2SCheck'; props && Object.assign(this, props); return obj; }
J2SCheck.prototype = new J2SExpr();

export function J2SStmtExpr(props) { const obj = this || {}; obj.clazz = 'J2SStmtExpr'; props && Object.assign(this, props); return obj; }
J2SStmtExpr.prototype = new J2SStmt();

export function J2SIf(props) { const obj = this || {}; obj.clazz = 'J2SIf'; props && Object.assign(this, props); return obj; }
J2SIf.prototype = new J2SStmt();

export function J2SPrecache(props) { const obj = this || {}; obj.clazz = 'J2SPrecache'; props && Object.assign(this, props); return obj; }
J2SPrecache.prototype = new J2SIf();

export function J2SIfIsRecord(props) { const obj = this || {}; obj.clazz = 'J2SIfIsRecord'; props && Object.assign(this, props); return obj; }
J2SIfIsRecord.prototype = new J2SIf();

export function J2SVarDecls(props) { const obj = this || {}; obj.clazz = 'J2SVarDecls'; props && Object.assign(this, props); return obj; }
J2SVarDecls.prototype = new J2SStmt();

export function J2SLetBlock(props) { const obj = this || {}; obj.clazz = 'J2SLetBlock'; props && Object.assign(this, props); return obj; }
J2SLetBlock.prototype = new J2SBlock();

export function J2SIdStmt(props) { const obj = this || {}; obj.clazz = 'J2SIdStmt'; props && Object.assign(this, props); return obj; }
J2SIdStmt.prototype = new J2SStmt();

export function J2SSwitch(props) { const obj = this || {}; obj.clazz = 'J2SSwitch'; props && Object.assign(this, props); return obj; }
J2SSwitch.prototype = new J2SIdStmt();

export function J2SLoop(props) { const obj = this || {}; obj.clazz = 'J2SLoop'; props && Object.assign(this, props); return obj; }
J2SLoop.prototype = new J2SIdStmt();

export function J2SFor(props) { const obj = this || {}; obj.clazz = 'J2SFor'; props && Object.assign(this, props); return obj; }
J2SFor.prototype = new J2SLoop();

export function J2SForIn(props) { const obj = this || {}; obj.clazz = 'J2SForIn'; props && Object.assign(this, props); return obj; }
J2SForIn.prototype = new J2SLoop();

export function J2SWhile(props) { const obj = this || {}; obj.clazz = 'J2SWhile'; props && Object.assign(this, props); return obj; }
J2SWhile.prototype = new J2SLoop();

export function J2SDo(props) { const obj = this || {}; obj.clazz = 'J2SDo'; props && Object.assign(this, props); return obj; }
J2SDo.prototype = new J2SWhile();

export function J2SLabel(props) { const obj = this || {}; obj.clazz = 'J2SLabel'; props && Object.assign(this, props); return obj; }
J2SLabel.prototype = new J2SIdStmt();

export function J2SBreak(props) { const obj = this || {}; obj.clazz = 'J2SBreak'; props && Object.assign(this, props); return obj; }
J2SBreak.prototype = new J2SStmt();

export function J2SContinue(props) { const obj = this || {}; obj.clazz = 'J2SContinue'; props && Object.assign(this, props); return obj; }
J2SContinue.prototype = new J2SBreak();

export function J2SNop(props) { const obj = this || {}; obj.clazz = 'J2SNop'; props && Object.assign(this, props); return obj; }
J2SNop.prototype = new J2SStmt();

export function J2SCase(props) { const obj = this || {}; obj.clazz = 'J2SCase'; props && Object.assign(this, props); return obj; }
J2SCase.prototype = new J2SStmt();

export function J2SDefault(props) { const obj = this || {}; obj.clazz = 'J2SDefault'; props && Object.assign(this, props); return obj; }
J2SDefault.prototype = new J2SCase();

export function J2SBindExit(props) { const obj = this || {}; obj.clazz = 'J2SBindExit'; props && Object.assign(this, props); return obj; }
J2SBindExit.prototype = new J2SExpr();

export function J2SReturn(props) { const obj = this || {}; obj.clazz = 'J2SReturn'; props && Object.assign(this, props); return obj; }
J2SReturn.prototype = new J2SStmt();

export function J2SReturnYield(props) { const obj = this || {}; obj.clazz = 'J2SReturnYield'; props && Object.assign(this, props); return obj; }
J2SReturnYield.prototype = new J2SStmt();

export function J2SYield(props) { const obj = this || {}; obj.clazz = 'J2SYield'; props && Object.assign(this, props); return obj; }
J2SYield.prototype = new J2SExpr();

export function J2SWith(props) { const obj = this || {}; obj.clazz = 'J2SWith'; props && Object.assign(this, props); return obj; }
J2SWith.prototype = new J2SStmt();

export function J2SThrow(props) { const obj = this || {}; obj.clazz = 'J2SThrow'; props && Object.assign(this, props); return obj; }
J2SThrow.prototype = new J2SStmt();

export function J2SFun(props) { const obj = this || {}; obj.clazz = 'J2SFun'; props && Object.assign(this, props); return obj; }
J2SFun.prototype = new J2SExpr();

export function J2SSvc(props) { const obj = this || {}; obj.clazz = 'J2SSvc'; props && Object.assign(this, props); return obj; }
J2SSvc.prototype = new J2SFun();

export function J2SArrow(props) { const obj = this || {}; obj.clazz = 'J2SArrow'; props && Object.assign(this, props); return obj; }
J2SArrow.prototype = new J2SFun();

export function J2SMethod(props) { const obj = this || {}; obj.clazz = 'J2SMethod'; props && Object.assign(this, props); return obj; }
J2SMethod.prototype = new J2SExpr();

export function J2SClass(props) { const obj = this || {}; obj.clazz = 'J2SClass'; props && Object.assign(this, props); return obj; }
J2SClass.prototype = new J2SExpr();

export function J2SRecord(props) { const obj = this || {}; obj.clazz = 'J2SRecord'; props && Object.assign(this, props); return obj; }
J2SRecord.prototype = new J2SClass();

export function J2SClassElement(props) { const obj = this || {}; obj.clazz = 'J2SClassElement'; props && Object.assign(this, props); return obj; }
J2SClassElement.prototype = new J2SNode();

export function J2SCatch(props) { const obj = this || {}; obj.clazz = 'J2SCatch'; props && Object.assign(this, props); return obj; }
J2SCatch.prototype = new J2SStmt();

export function J2STry(props) { const obj = this || {}; obj.clazz = 'J2STry'; props && Object.assign(this, props); return obj; }
J2STry.prototype = new J2SStmt();

export function J2SPragma(props) { const obj = this || {}; obj.clazz = 'J2SPragma'; props && Object.assign(this, props); return obj; }
J2SPragma.prototype = new J2SExpr();

export function J2SSequence(props) { const obj = this || {}; obj.clazz = 'J2SSequence'; props && Object.assign(this, props); return obj; }
J2SSequence.prototype = new J2SExpr();

export function J2SUnresolvedRef(props) { const obj = this || {}; obj.clazz = 'J2SUnresolvedRef'; props && Object.assign(this, props); return obj; }
J2SUnresolvedRef.prototype = new J2SExpr();

export function J2SGlobalRef(props) { const obj = this || {}; obj.clazz = 'J2SGlobalRef'; props && Object.assign(this, props); return obj; }
J2SGlobalRef.prototype = new J2SUnresolvedRef();

export function J2SRef(props) { const obj = this || {}; obj.clazz = 'J2SRef'; props && Object.assign(this, props); return obj; }
J2SRef.prototype = new J2SExpr();

export function J2SWithRef(props) { const obj = this || {}; obj.clazz = 'J2SWithRef'; props && Object.assign(this, props); return obj; }
J2SWithRef.prototype = new J2SExpr();

export function J2SHopRef(props) { const obj = this || {}; obj.clazz = 'J2SHopRef'; props && Object.assign(this, props); return obj; }
J2SHopRef.prototype = new J2SExpr();

export function J2SLetRef(props) { const obj = this || {}; obj.clazz = 'J2SLetRef'; props && Object.assign(this, props); return obj; }
J2SLetRef.prototype = new J2SRef();

export function J2SAref(props) { const obj = this || {}; obj.clazz = 'J2SAref'; props && Object.assign(this, props); return obj; }
J2SAref.prototype = new J2SRef();

export function J2SKontRef(props) { const obj = this || {}; obj.clazz = 'J2SKontRef'; props && Object.assign(this, props); return obj; }
J2SKontRef.prototype = new J2SExpr();

export function J2SThis(props) { const obj = this || {}; obj.clazz = 'J2SThis'; props && Object.assign(this, props); return obj; }
J2SThis.prototype = new J2SRef();

export function J2SSuper(props) { const obj = this || {}; obj.clazz = 'J2SSuper'; props && Object.assign(this, props); return obj; }
J2SSuper.prototype = new J2SRef();

export function J2SCond(props) { const obj = this || {}; obj.clazz = 'J2SCond'; props && Object.assign(this, props); return obj; }
J2SCond.prototype = new J2SExpr();

export function J2SLiteral(props) { const obj = this || {}; obj.clazz = 'J2SLiteral'; props && Object.assign(this, props); return obj; }
J2SLiteral.prototype = new J2SExpr();

export function J2SArrayAbsent(props) { const obj = this || {}; obj.clazz = 'J2SArrayAbsent'; props && Object.assign(this, props); return obj; }
J2SArrayAbsent.prototype = new J2SLiteral();

export function J2SNull(props) { const obj = this || {}; obj.clazz = 'J2SNull'; props && Object.assign(this, props); return obj; }
J2SNull.prototype = new J2SLiteral();

export function J2SUndefined(props) { const obj = this || {}; obj.clazz = 'J2SUndefined'; props && Object.assign(this, props); return obj; }
J2SUndefined.prototype = new J2SLiteral();

export function J2SLiteralValue(props) { const obj = this || {}; obj.clazz = 'J2SLiteralValue'; props && Object.assign(this, props); return obj; }
J2SLiteralValue.prototype = new J2SLiteral();

export function J2SNativeString(props) { const obj = this || {}; obj.clazz = 'J2SNativeString'; props && Object.assign(this, props); return obj; }
J2SNativeString.prototype = new J2SLiteralValue();

export function J2SString(props) { const obj = this || {}; obj.clazz = 'J2SString'; props && Object.assign(this, props); return obj; }
J2SString.prototype = new J2SLiteralValue();

export function J2SBool(props) { const obj = this || {}; obj.clazz = 'J2SBool'; props && Object.assign(this, props); return obj; }
J2SBool.prototype = new J2SLiteralValue();

export function J2SNumber(props) { const obj = this || {}; obj.clazz = 'J2SNumber'; props && Object.assign(this, props); return obj; }
J2SNumber.prototype = new J2SLiteralValue();

export function J2SOctalNumber(props) { const obj = this || {}; obj.clazz = 'J2SOctalNumber'; props && Object.assign(this, props); return obj; }
J2SOctalNumber.prototype = new J2SNumber();

export function J2SRegExp(props) { const obj = this || {}; obj.clazz = 'J2SRegExp'; props && Object.assign(this, props); return obj; }
J2SRegExp.prototype = new J2SLiteralValue();

export function J2SCmap(props) { const obj = this || {}; obj.clazz = 'J2SCmap'; props && Object.assign(this, props); return obj; }
J2SCmap.prototype = new J2SLiteralValue();

export function J2SLiteralCnst(props) { const obj = this || {}; obj.clazz = 'J2SLiteralCnst'; props && Object.assign(this, props); return obj; }
J2SLiteralCnst.prototype = new J2SLiteral();

export function J2SArray(props) { const obj = this || {}; obj.clazz = 'J2SArray'; props && Object.assign(this, props); return obj; }
J2SArray.prototype = new J2SLiteral();

export function J2SSpread(props) { const obj = this || {}; obj.clazz = 'J2SSpread'; props && Object.assign(this, props); return obj; }
J2SSpread.prototype = new J2SExpr();

export function J2STemplate(props) { const obj = this || {}; obj.clazz = 'J2STemplate'; props && Object.assign(this, props); return obj; }
J2STemplate.prototype = new J2SExpr();

export function J2SParen(props) { const obj = this || {}; obj.clazz = 'J2SParen'; props && Object.assign(this, props); return obj; }
J2SParen.prototype = new J2SExpr();

export function J2SUnary(props) { const obj = this || {}; obj.clazz = 'J2SUnary'; props && Object.assign(this, props); return obj; }
J2SUnary.prototype = new J2SExpr();

export function J2SBinary(props) { const obj = this || {}; obj.clazz = 'J2SBinary'; props && Object.assign(this, props); return obj; }
J2SBinary.prototype = new J2SExpr();

export function J2SAssig(props) { const obj = this || {}; obj.clazz = 'J2SAssig'; props && Object.assign(this, props); return obj; }
J2SAssig.prototype = new J2SExpr();

export function J2SInit(props) { const obj = this || {}; obj.clazz = 'J2SInit'; props && Object.assign(this, props); return obj; }
J2SInit.prototype = new J2SAssig();

export function J2SFunBinding(props) { const obj = this || {}; obj.clazz = 'J2SFunBinding'; props && Object.assign(this, props); return obj; }
J2SFunBinding.prototype = new J2SInit();

export function J2SPrefix(props) { const obj = this || {}; obj.clazz = 'J2SPrefix'; props && Object.assign(this, props); return obj; }
J2SPrefix.prototype = new J2SAssig();

export function J2SPostfix(props) { const obj = this || {}; obj.clazz = 'J2SPostfix'; props && Object.assign(this, props); return obj; }
J2SPostfix.prototype = new J2SAssig();

export function J2SAssigOp(props) { const obj = this || {}; obj.clazz = 'J2SAssigOp'; props && Object.assign(this, props); return obj; }
J2SAssigOp.prototype = new J2SAssig();

export function J2SObjInit(props) { const obj = this || {}; obj.clazz = 'J2SObjInit'; props && Object.assign(this, props); return obj; }
J2SObjInit.prototype = new J2SExpr();

export function J2SAccess(props) { const obj = this || {}; obj.clazz = 'J2SAccess'; props && Object.assign(this, props); return obj; }
J2SAccess.prototype = new J2SExpr();

export function J2SCacheCheck(props) { const obj = this || {}; obj.clazz = 'J2SCacheCheck'; props && Object.assign(this, props); return obj; }
J2SCacheCheck.prototype = new J2SExpr();

export function J2SCacheUpdate(props) { const obj = this || {}; obj.clazz = 'J2SCacheUpdate'; props && Object.assign(this, props); return obj; }
J2SCacheUpdate.prototype = new J2SExpr();

export function J2SCall(props) { const obj = this || {}; obj.clazz = 'J2SCall'; props && Object.assign(this, props); return obj; }
J2SCall.prototype = new J2SExpr();

export function J2STilde(props) { const obj = this || {}; obj.clazz = 'J2STilde'; props && Object.assign(this, props); return obj; }
J2STilde.prototype = new J2SExpr();

export function J2SDollar(props) { const obj = this || {}; obj.clazz = 'J2SDollar'; props && Object.assign(this, props); return obj; }
J2SDollar.prototype = new J2SExpr();

export function J2SNew(props) { const obj = this || {}; obj.clazz = 'J2SNew'; props && Object.assign(this, props); return obj; }
J2SNew.prototype = new J2SExpr();

export function J2SPropertyInit(props) { const obj = this || {}; obj.clazz = 'J2SPropertyInit'; props && Object.assign(this, props); return obj; }
J2SPropertyInit.prototype = new J2SNode();

export function J2SDataPropertyInit(props) { const obj = this || {}; obj.clazz = 'J2SDataPropertyInit'; props && Object.assign(this, props); return obj; }
J2SDataPropertyInit.prototype = new J2SPropertyInit();

export function J2SMethodPropertyInit(props) { const obj = this || {}; obj.clazz = 'J2SMethodPropertyInit'; props && Object.assign(this, props); return obj; }
J2SMethodPropertyInit.prototype = new J2SDataPropertyInit();

export function J2SAccessorPropertyInit(props) { const obj = this || {}; obj.clazz = 'J2SAccessorPropertyInit'; props && Object.assign(this, props); return obj; }
J2SAccessorPropertyInit.prototype = new J2SPropertyInit();

export function J2SKont(props) { const obj = this || {}; obj.clazz = 'J2SKont'; props && Object.assign(this, props); return obj; }
J2SKont.prototype = new J2SExpr();

export function J2SOPTInitSeq(props) { const obj = this || {}; obj.clazz = 'J2SOPTInitSeq'; props && Object.assign(this, props); return obj; }
J2SOPTInitSeq.prototype = new J2SSeq();

export function J2SDProducer(props) { const obj = this || {}; obj.clazz = 'J2SDProducer'; props && Object.assign(this, props); return obj; }
J2SDProducer.prototype = new J2SExpr();

export function J2SDConsumer(props) { const obj = this || {}; obj.clazz = 'J2SDConsumer'; props && Object.assign(this, props); return obj; }
J2SDConsumer.prototype = new J2SExpr();

export function J2SExport(props) { const obj = this || {}; obj.clazz = 'J2SExport'; props && Object.assign(this, props); return obj; }
J2SExport.prototype = new J2SStmt();

export function J2SExportDefault(props) { const obj = this || {}; obj.clazz = 'J2SExportDefault'; props && Object.assign(this, props); return obj; }
J2SExportDefault.prototype = new J2SExport();

export function J2SRedirect(props) { const obj = this || {}; obj.clazz = 'J2SRedirect'; props && Object.assign(this, props); return obj; }
J2SRedirect.prototype = new J2SExport();

export function J2SRedirectNamespace(props) { const obj = this || {}; obj.clazz = 'J2SRedirectNamespace'; props && Object.assign(this, props); return obj; }
J2SRedirectNamespace.prototype = new J2SRedirect();

export function J2SImportPath(props) { const obj = this || {}; obj.clazz = 'J2SImportPath'; props && Object.assign(obj, props); return obj; }

export function J2SImport(props) { const obj = this || {}; obj.clazz = 'J2SImport'; props && Object.assign(this, props); return obj; }
J2SImport.prototype = new J2SStmt();

export function J2SImportName(props) { const obj = this || {}; obj.clazz = 'J2SImportName'; props && Object.assign(obj, props); return obj; }

export function J2SImportNamespace(props) { const obj = this || {}; obj.clazz = 'J2SImportNamespace'; props && Object.assign(this, props); return obj; }
J2SImportNamespace.prototype = new J2SExpr();

export function J2SImportDynamic(props) { const obj = this || {}; obj.clazz = 'J2SImportDynamic'; props && Object.assign(this, props); return obj; }
J2SImportDynamic.prototype = new J2SExpr();

