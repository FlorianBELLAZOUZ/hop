;*=====================================================================*/
;*    .../prgm/project/hop/hop/node_modules/hopc/node/ast2js.scm       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Tue Jul  1 16:05:56 2014                          */
;*    Last change :  Thu Oct 26 16:18:16 2023 (serrano)                */
;*    Copyright   :  2014-23 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Build the JS Ast from the Bigloo type class hierarchy            */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module mkjsast
   (main main))

;*---------------------------------------------------------------------*/
;*    main ...                                                         */
;*---------------------------------------------------------------------*/
(define (main argv)
   (call-with-input-file (cadr argv)
      (lambda (ip)
	 (match-case (read ip)
	    ((module ?- ??- (export . ?clauses) . ?-)
	     (print "/* generated file (ast2js.scm), do not edit */")
	     (print "\"use strict\"")
	     (newline)
	     (let ((env (filter-map parse-class clauses)))
		(for-each (lambda (c) (print-class c env)) env)))))))

;*---------------------------------------------------------------------*/
;*    print-class ...                                                  */
;*---------------------------------------------------------------------*/
(define (print-class class env)
   (match-case class
      ((?- #t . ?-)
       ;; already printed class
       #unspecified)
      ((?name #f #f)
       ;; root class
       (printf "export function ~a(props) { const obj = this || {}; obj.clazz = '~a'; props && Object.assign(obj, props); return obj; }\n\n" name name))
      ((?name #f ?super)
       ;; unprinted subclass
       (printf "export function ~a(props) { const obj = this || {}; obj.clazz = '~a'; props && Object.assign(this, props); return obj; }\n" name name)
       (printf "~a.prototype = new ~a();\n\n" name super))))

;*---------------------------------------------------------------------*/
;*    parse-class ...                                                  */
;*---------------------------------------------------------------------*/
(define (parse-class clause)
   (match-case clause
      (((or class abstract-class final-class wide-class) ?name . ?fields)
       (multiple-value-bind (id type)
	  (parse-class-id name)
	  (list id #f type)))
      (else
       #f)))

;*---------------------------------------------------------------------*/
;*    id-regexp ...                                                    */
;*---------------------------------------------------------------------*/
(define id-regexp (pregexp "([^:]+)::([^:]+)"))

;*---------------------------------------------------------------------*/
;*    parse-class-id ...                                               */
;*---------------------------------------------------------------------*/
(define (parse-class-id id)
   (let ((m (pregexp-match id-regexp (symbol->string id))))
      (if (pair? m)
	  (values (string->symbol (cadr m)) (string->symbol (caddr m)))
	  (values id #f))))
