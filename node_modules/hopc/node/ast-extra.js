/*---------------------------------------------------------------------*/
/*    Definitions to be concatanted to ast.mjs when generated.         */
/*---------------------------------------------------------------------*/

/*---------------------------------------------------------------------*/
/*    j2sLetp ...                                                      */
/*---------------------------------------------------------------------*/
export function j2sLetp(decl) {
   switch (decl.binder) {
      case "let":
      case "let-opt":
      case "let-forin":
	 return true;
      case "var":
      case "param":
      case "record":
      case "export":
	 return false;
      default:
	 throw `j2sLetp: wrong binder "${decl.binder}"`;
   }
}

/*---------------------------------------------------------------------*/
/*    j2sVarp ...                                                      */
/*---------------------------------------------------------------------*/
export function j2sVarp(decl) {
   switch (decl.binder) {
      case "var":
	 return true;
      case "let":
      case "let-opt":
      case "let-forin":
	 return true;
      case "var":
      case "param":
      case "record":
      case "export":
	 return false;
      default:
	 throw `j2sVarp: wrong binder "${decl.binder}"`;
   }
}

/*---------------------------------------------------------------------*/
/*    j2sConstp ...                                                    */
/*---------------------------------------------------------------------*/
export function j2sConstp(decl) {
   if (decl.writable) {
      return false;
   } else {
      switch (decl.binder) {
	 case "let":
	 case "let-opt":
	 case "let-forin":
	 case "export":
	    return true;
	 case "var":
	 case "param":
	 case "record":
	    return false;
	 default:
	    throw `j2sConstp: wrong binder "${decl.binder}"`;
      }
   }
}

/*---------------------------------------------------------------------*/
/*    j2sfunExpressionp ...                                            */
/*---------------------------------------------------------------------*/
export function j2sfunExpressionp(fun) {
   if (fun.decl instanceof J2SDeclFun) {
      return fun.decl.expression;
   } else {
      return false;
   }
}
