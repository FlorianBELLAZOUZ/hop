/*=====================================================================*/
/*    .../prgm/project/hop/3.7.x/node_modules/hopc/node/error.mjs      */
/*    -------------------------------------------------------------    */
/*    Author      :  manuel serrano                                    */
/*    Creation    :  Sat Sep 16 14:11:38 2023                          */
/*    Last change :  Thu Feb 15 13:48:27 2024 (serrano)                */
/*    Copyright   :  2023-24 manuel serrano                            */
/*    -------------------------------------------------------------    */
/*    Exceptions                                                       */
/*                                                                     */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    The module                                                       */
/*---------------------------------------------------------------------*/
import { existsSync, readFileSync, writeSync } from "node:fs";
export { locToLnumCol, $ioParseError };

/*---------------------------------------------------------------------*/
/*    makeString ...                                                   */
/*---------------------------------------------------------------------*/
function makeString(len, line) {
   let s = "";

   for (let i = 0; i < len; i++) {
      if (line.charCodeAt(i) === 9) {
	 s += "\t";
      } else {
	 s += " ";
      }
   }
   return s;
}

/*---------------------------------------------------------------------*/
/*    locToLnumCol ...                                                 */
/*---------------------------------------------------------------------*/
function locToLnumCol(fname, location) {
   
   function lnumCol(buf, location) {
      if (location < buf.length) {
	 // find the beginning of line
	 let beg = location;
	 let end = location;

	 while (beg >= 0 && buf.charCodeAt(beg) !== 10) {
	    beg--;
	 }

	 // find the end of line
	 while (end < buf.length && buf.charCodeAt(end) !== 10) {
	    end++;
	 }

	 // extract the line
	 const line = buf.substring(beg + 1, end);
	 const col = location - beg;
	 let lnum = 1, i = 0;

	 for (; i < beg && i >= 0; i = buf.indexOf("\n", i + 1)) {
	    lnum++;
	 }

	 return { beg, end, lnum, col, line };
      } else {
	 let lnum = 1, i = 0;
	 const beg = location;
	 const end = location;

	 for (; i < location - 1 && i >= 0; i = buf.indexOf("\n", i + 1)) {
	    lnum++;
	 }
	 return { beg, end, lnum, col: 0, line: "" };
      }
   }

   if (existsSync(fname)) {
      return lnumCol(readFileSync(fname).toString(), location);
   } else if (fname.match(/^string:\/\//)) {
      return findLoc(fname.substring(9, location));
   } else {
      return { beg: -1, end: -1, lnum: 0, col: 0, line: "" };
   }
}

/*---------------------------------------------------------------------*/
/*    $ioParseError ...                                                */
/*---------------------------------------------------------------------*/
function $ioParseError(props) {
   
   function err(msg) {
      // for some resons, when ioParseError is invoked from a nodejs loader
      // stderr is not correctly flushed and process.stderr not property
      // initialized
      writeSync(2, msg + "\n");
   }

   if (new.target) {
      // used as a constructor (see parser.mjs)
      Object.assign(this, props);
   } else {
      if ("fname" in props && "location" in props && props.location >= 0) {
	 const { beg, end, lnum, col, line }
	    = locToLnumCol(props.fname, props.location);

	 if (beg >= 0) {
	    // display the error message
	    err(`${props.fname}:${lnum}`);
	    err(line);
	    err(makeString(props.location - (beg + 1), line) + "^\n");
	    
	    err(`${props?.msg ?? "Error"}: ${props?.message ?? ""}`);
	    if (props.proc) {
	       err(`   at ${props.proc} (${props.fname}:${lnum}:${col})`);
	    }
	 } else {
	    err(`${props?.msg ?? "Error"}: ${props?.message ?? ""}`);
	    if (props.proc) {
	       err(`   at ${props.proc} (${props.fname}:${lnum}:${col})`);
	    }
	 }
      }
      if (props?.forceexit) {
	 setTimeout(() => process.exit(1));
      }
   }
}

$ioParseError.prototype = SyntaxError.prototype;
