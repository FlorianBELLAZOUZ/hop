/*=====================================================================*/
/*    .../prgm/project/hop/3.7.x/node_modules/hopc/node/error.mjs      */
/*    -------------------------------------------------------------    */
/*    Author      :  manuel serrano                                    */
/*    Creation    :  Sat Sep 16 14:11:38 2023                          */
/*    Last change :  Sun Nov 26 10:43:10 2023 (serrano)                */
/*    Copyright   :  2023 manuel serrano                               */
/*    -------------------------------------------------------------    */
/*    Exceptions                                                       */
/*                                                                     */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    The module                                                       */
/*---------------------------------------------------------------------*/
import { readFileSync } from "node:fs";

/*---------------------------------------------------------------------*/
/*    makeString ...                                                   */
/*---------------------------------------------------------------------*/
function makeString(len) {
   if (len <= 0) {
      return "";
   } else {
      return new Array(len).fill(" ").join("");
   }
}

/*---------------------------------------------------------------------*/
/*    $ioParseError ...                                                */
/*---------------------------------------------------------------------*/
export function $ioParseError(props) {
   if (new.target) {
      // used as a constructor (see parser.mjs)
      Object.assign(this, props);
   } else {
      if ("fname" in props && "location" in props && props.location >= 0) {
	 // used as a error report (see client compilers)
	 const buf = readFileSync(props.fname).toString();
	 if (props.location < buf.length) {
	    // find the beginning of line
	    let beg = props.location;
	    let end = props.location;

	    while (beg >= 0 && buf.charCodeAt(beg) !== 10) {
	       beg--;
	    }

	    // find the end of line
	    while (end < buf.length && buf.charCodeAt(end) !== 10) {
	       end++;
	    }

	    // extract the line
	    const line = buf.substring(beg, end);

	    // display the error message
	    console.error(`*** ERROR: ${props?.proc ?? ""}:${props?.msg ?? ""}:${props.fname}:${props.location}`);
	    console.error(line);
	    console.error(makeString(props.location - (beg + 1)) + "^");
	    if ("message" in props) { 
	       console.error(props.message);
	    }
	 } else {
	    console.error(`*** ERROR: ${props?.proc ?? ""}:${props?.msg ?? ""}:${props.fname}:${props.location}`);
	    if ("message" in props) { 
	       console.error(props.message);
	    }
	 }
      }
      if ((props?.forceexit)) {
	 process.exit(1);
      }
   }
}

$ioParseError.prototype = SyntaxError.prototype;
