;; /home/serrano/prgm/project/hop/hop/bin/hopc -t foo.scm -v4 --js-worker-slave -c -fno-inlining --js-no-module-main --js-module-name __nodejs_hopc --js-module-path hopc -O2s hopc.js -o o/hopc.o -g-Os --reset-bigloo-options --bigloo=bigloo --bigloo-lib-dir=/home/serrano/prgm/project/bigloo/bigloo/lib/bigloo/4.5a --share-dir /home/serrano/prgm/project/hop/hop/share -- -O3 -fstackable -fsharing -L /home/serrano/prgm/project/hop/hop/lib/hop/3.5.0 -srfi bigloo-compile -copt -g -O2 -Wall -Wno-slot -srfi devel -srfi debug -srfi enable-tls -srfi license-academic -srfi enable-ssl -srfi enable-threads -srfi enable-avahi -srfi enable-upnp -srfi enable-libuv -srfi hop-dynamic -fno-inlining -copt -Os -dload-sym -copt -fPIC -L /home/serrano/prgm/project/hop/hop/lib/hop/3.5.0 -srfi bigloo-compile
(module __nodejs_hopc
  (library hop hopscript js2scheme nodejs)
  (export
    (hopscript
      ::JsGlobalObject
      ::JsObject
      ::JsObject
      ::JsObject))
  (cond-expand
    ((and enable-tls (not bigloo-eval))
     (static %this %module %scope %cnst-table)))
  (cond-expand
    ((and enable-tls (not bigloo-eval))
     (pragma
       (%this thread-local)
       (%module thread-local)
       (%scope thread-local)
       (%cnst-table thread-local))))
  (option (register-srfi! 'hopjs-worker-slave)))

(define __js_strings #f)
(define __js_rxcaches #f)
(define %source (or (the-loading-file) "/"))
(define %resource (dirname %source))
(declare-tls %this)
(declare-tls %module)
(declare-tls %scope)
(declare-tls %cnst-table)
(define (hopscript %this this %scope %module)
  (define __js_strings
    (&jsstring-init
      "[\0015[\001\002\000\"\001\007exports[\001\002\000\"\001\bfilename[\001\002\000\"\001\006global[\001\002\000\"\001\006Buffer[\001\002\000\"\001\016clearImmediate[\001\002\000\"\001\rclearInterval[\001\002\000\"\001\fclearTimeout[\001\002\000\"\001\fsetImmediate[\001\002\000\"\001\vsetInterval[\001\002\000\"\001\nsetTimeout[\001\002\000\"\001\007console[\001\002\000\"\001\007default[\001\002\000\"\001\006module[\001\002\000\"\001\006Object[\001\002\000\"\001\005Array[\001\002\000\"\001\bFunction[\001\002\000\"\001\b__node__[\001\002\000\"\001\003key[\001\002\000\"\001\r__undefined__[\001\002\000\"\001\007__ref__[\001\002\000\"\001%hopc, wrong ast: dangling reference ([\001\002\000\"\001\004): `[\001\002\000\"\001\f__nodeType__[\001\002\000\"\001\002' [\001\002\000\"\001\003loc[\001\002\000\"\000[\001\002\000\"\001\007hopc.js[\001\002\000\"\001\007__ast__[\001\002\000\"\001\t__proto__[\001\002\000\"\001\fIllegal ast [\001\002\000\"\001\006intern[\001\002\000\"\001\006tojson[\001\002\000\"\001\006extern[\001\002\000\"\001\bHopcWalk[\001\002\000\"\001\001f[\001\002\000\"\001\007forEach[\001\002\000\"\001\tprototype[\001\002\000\"\001\006splice[\001\002\000\"\001\006callee[\001\002\000\"\001\bwalkNode[\001\002\000\"\001\rHopcAstWalker[\001\002\000\"\001\003hop[\001\002\000\"\001\b./ast.js[\001\002\000\"\001\020HopcAstPrototype[\001\002\000\"\001\t./walk.js[\001\002\000\"\001\020./_js2scheme.hop[\001\002\000\"\001\022HTTPResponseString[\001\002\000\"\001\020application/json[\001\002\000\"\001\006Parser[\001\002\000\"\001\007compile[\001\002\000\"\001\004dump[\001\002\000\"\001\003ast[\001\002\000\"\001\007resolve"))
 (define __js_rxcaches
    (js-init-regexp-caches! %this 0))
 (define js-string-names (js-get-js-string-names))
  (define js-integer-names
    (js-get-js-integer-names))
 (define %pcache
    (js-make-pcache-table 77 "hopc.js"))
 (define %worker (js-current-worker))
  (define %cnst-table
    (js-constant-init
      (js-cnst-table)
      "[\001\005[\001\002\001\002[\000[\001\002\001\002[\001\001\"\001\f__hopc_ast__[\001\002\001\002[\001\002\"\001\bwalkNode\"\001\004walk[\001\002\001\002[\001\002\"\001\007request\"\001\vcontentType[\001\002\001\002[\001\002\"\001\ntoResponse\"\001\006toJSON"
      %this))
 (letrec*
    ((%require
       (nodejs-require
         %worker
         %this
         %module
         "hopscript"))
     (%import-meta
       (nodejs-import-meta %worker %this %module "hopc"))
     (!module
       (let ((%%tmp %module))
         (js-define
           %this
           %scope
           (& "module" 12)
           (lambda (%) !module)
           (lambda (% %v) (set! !module %v))
           %source
           740
           :hidden-class
           #f)
         %%tmp))
     (!exports
       (let ((%%tmp (js-get %module (& "exports" 0) %scope)))
         (js-define
           %this
           %scope
           (& "exports" 0)
           (lambda (%) !exports)
           (lambda (% %v) (set! !exports %v))
           %source
           740)
         %%tmp))
     (!Object
       (let ((%%tmp (with-access::JsGlobalObject
                      %this
                      (js-object)
                      js-object)))
         (js-define
           %this
           %scope
           (& "Object" 13)
           (lambda (%) !Object)
           (lambda (% %v) (set! !Object %v))
           %source
           740)
         %%tmp))
     (!Array
       (let ((%%tmp (with-access::JsGlobalObject
                      %this
                      (js-array)
                      js-array)))
         (js-define
           %this
           %scope
           (& "Array" 14)
           (lambda (%) !Array)
           (lambda (% %v) (set! !Array %v))
           %source
           740)
         %%tmp)))
    (begin
      (nodejs-eval %this %scope)
      (nodejs-function %this %scope)
      (nodejs-bind-export!
        %this
        %scope
        (nodejs-require-core "buffer" %worker %this)
        (& "Buffer" 3))
      (nodejs-bind-export!
        %this
        %scope
        (nodejs-require-core "timers" %worker %this)
        (& "clearImmediate" 4)
        (& "clearInterval" 5)
        (& "clearTimeout" 6)
        (& "setImmediate" 7)
        (& "setInterval" 8)
        (& "setTimeout" 9))
      (nodejs-bind-export!
        %this
        %this
        %scope
        (& "console" 10)))
    (define %evars
      (with-access::JsModule
        %module
        (evars exports checksum)
        (set! checksum 0)
        (set! exports
          (vector
            (js-evar-info (& "default" 11) '(0) '() #f)))
        (set! evars (make-vector 1 (js-undefined)))
        evars))
   (with-access::JsModule
      %module
      (imports)
      (set! imports (vector)))
    (define %evars
      (with-access::JsModule
        %module
        (evars exports checksum)
        (set! checksum 0)
        (set! exports
          (vector
            (js-evar-info (& "default" 11) '(0) '() #f)))
        (set! evars (make-vector 1 (js-undefined)))
        evars))
   (let ()
      (define (@initNode ^140-node::obj ^141-env::JsObject)
        (let ((^142-k (js-undefined)))
          (if (or (not (if (js-object? ^140-node)
                         (if (eq? (js-pcache-cmap (js-pcache-ref %pcache 70))
                                  (js-object-cmap ^140-node))
                           #t
                           (if (js-object? ^140-node)
                             (begin
                               (with-access::JsPropertyCache
                                 (js-pcache-ref %pcache 70)
                                 (cmap)
                                 (when (js-object-mapped? ^140-node)
                                       (set! cmap (js-object-cmap ^140-node))))
                               #t)
                             #f))
                         #f))
                  (let* ((lhs1049::obj ^140-node)
                         (rhs1050::JsObject
                           (js-global-object-get-name/cache
                             %scope
                             (& "Function" 15)
                             '(at "hopc.js" 1667)
                             %this
                             (js-pcache-ref %pcache 0)
                             1667)))
                    (js-instanceof? %this lhs1049 rhs1050)))
            ^140-node
            (if (js-in? ^140-node (& "__node__" 16) %this)
              (let ((^146-o::JsObject
                      (js-new0
                        %this
                        (js-get/name-cache
                          ^139-Ast
                          (js-get-name/cache
                            ^140-node
                            (& "__node__" 16)
                            #f
                            %this
                            (js-pcache-ref %pcache 2)
                            1764
                            '(imap))
                          %this))))
                (js-for-in
                  ^140-node
                  (lambda (g1061 %this)
                     (set! ^142-k g1061)
                     (js-put-jsobject/cache!
                       ^146-o
                       ^142-k
                       (@initNode
                         (js-get/name-cache ^140-node ^142-k %this)
                         ^141-env)
                       #f
                       %this
                       1810
                       "hopc.js"))
                  %this)
                (if (js-in? ^140-node (& "key" 17) %this)
                  (js-put-jsobject/cache!
                    ^141-env
                    (js-get-name/cache
                      ^140-node
                      (& "key" 17)
                      #f
                      %this
                      (js-pcache-ref %pcache 6)
                      1894
                      '(imap))
                    ^146-o
                    #f
                    %this
                    1888
                    "hopc.js")
                  (js-undefined))
                ^146-o)
              (if (if (js-object? ^140-node)
                    (if (eq? (js-pcache-cmap (js-pcache-ref %pcache 71))
                             (js-object-cmap ^140-node))
                      #t
                      (if (or (js-array? ^140-node)
                              (js-instanceof? %this ^140-node !Array))
                        (begin
                          (with-access::JsPropertyCache
                            (js-pcache-ref %pcache 71)
                            (cmap)
                            (when (js-object-mapped? ^140-node)
                                  (set! cmap (js-object-cmap ^140-node))))
                          #t)
                        #f))
                    #f)
                (js-array-map-procedure
                  ^140-node
                  (labels
                    ((fun@hopc.js:1994
                       (this::obj
                         ^143-v::obj
                         ^144-i::obj
                         ^145-a::obj
                         %this::JsGlobalObject)
                       (@initNode ^143-v ^141-env)))
                    fun@hopc.js:1994)
                  (js-undefined)
                  %this
                  (js-pcache-ref %pcache 7))
                (if (js-in? ^140-node (& "__undefined__" 18) %this)
                  (js-undefined)
                  ^140-node))))))
     (define (@linkNode ^148-node::obj ^149-env::JsObject)
        (let ((^150-k (js-undefined)))
          (if (or (not (if (js-object? ^148-node)
                         (if (eq? (js-pcache-cmap (js-pcache-ref %pcache 72))
                                  (js-object-cmap ^148-node))
                           #t
                           (if (js-object? ^148-node)
                             (begin
                               (with-access::JsPropertyCache
                                 (js-pcache-ref %pcache 72)
                                 (cmap)
                                 (when (js-object-mapped? ^148-node)
                                       (set! cmap (js-object-cmap ^148-node))))
                               #t)
                             #f))
                         #f))
                  (let* ((lhs1051::obj ^148-node)
                         (rhs1052::JsObject
                           (js-global-object-get-name/cache
                             %scope
                             (& "Function" 15)
                             '(at "hopc.js" 2464)
                             %this
                             (js-pcache-ref %pcache 9)
                             2464)))
                    (js-instanceof? %this lhs1051 rhs1052)))
            ^148-node
            (if (js-in? ^148-node (& "__node__" 16) %this)
              (begin
                (js-for-in
                  ^148-node
                  (lambda (g1062 %this)
                     (set! ^150-k g1062)
                     (js-put/cache!
                       ^148-node
                       ^150-k
                       (@linkNode
                         (js-get/name-cache ^148-node ^150-k %this)
                         ^149-env)
                       #f
                       %this
                       2569
                       "hopc.js"))
                  %this)
                ^148-node)
              (if (if (js-object? ^148-node)
                    (if (eq? (js-pcache-cmap (js-pcache-ref %pcache 73))
                             (js-object-cmap ^148-node))
                      #t
                      (if (or (js-array? ^148-node)
                              (js-instanceof? %this ^148-node !Array))
                        (begin
                          (with-access::JsPropertyCache
                            (js-pcache-ref %pcache 73)
                            (cmap)
                            (when (js-object-mapped? ^148-node)
                                  (set! cmap (js-object-cmap ^148-node))))
                          #t)
                        #f))
                    #f)
                (begin
                  (js-array-foreach-procedure
                    ^148-node
                    (labels
                      ((fun@hopc.js:2693
                         (this::obj
                           ^151-v::obj
                           ^152-i::obj
                           ^153-a::obj
                           %this::JsGlobalObject)
                         (begin
                           (js-put/cache!
                             ^153-a
                             ^152-i
                             (@linkNode ^151-v ^149-env)
                             #f
                             %this
                             2718
                             "hopc.js")
                           (js-undefined))))
                      fun@hopc.js:2693)
                    (js-undefined)
                    %this
                    (js-pcache-ref %pcache 12))
                  ^148-node)
                (if (js-in? ^148-node (& "__ref__" 19) %this)
                  (begin
                    (if (let ((lhs1053::obj
                                (js-get-jsobject/name-cache
                                  ^149-env
                                  (js-get-name/cache
                                    ^148-node
                                    (& "__ref__" 19)
                                    #f
                                    %this
                                    (js-pcache-ref %pcache 16)
                                    2832
                                    '(imap))
                                  %this)))
                          (eq? lhs1053 (js-undefined)))
                      (js-throw
                        (let ((%str1054
                                (& "hopc, wrong ast: dangling reference (" 20)))
                          (set! %str1054
                            (js-jsstring-append-no-inline
                              %str1054
                              (js-toprimitive-for-string
                                (js-get-name/cache
                                  ^148-node
                                  (& "__ref__" 19)
                                  #f
                                  %this
                                  (js-pcache-ref %pcache 17)
                                  2915
                                  '(imap))
                                %this)))
                          (set! %str1054
                            (js-jsstring-append-no-inline
                              %str1054
                              (& "): `" 21)))
                          (set! %str1054
                            (js-jsstring-append-no-inline
                              %str1054
                              (js-toprimitive-for-string
                                (js-get-name/cache
                                  ^148-node
                                  (& "__nodeType__" 22)
                                  #f
                                  %this
                                  (js-pcache-ref %pcache 18)
                                  2946
                                  '(imap))
                                %this)))
                          (set! %str1054
                            (js-jsstring-append-no-inline
                              %str1054
                              (& "' " 23)))
                          (let* ((lhs1055::JsStringLiteral %str1054)
                                 (rhs1056::obj
                                   (js-get-name/cache
                                     ^148-node
                                     (& "loc" 24)
                                     #f
                                     %this
                                     (js-pcache-ref %pcache 19)
                                     2973
                                     '(imap))))
                            (js-jsstring-append-no-inline
                              lhs1055
                              (js-toprimitive-for-string rhs1056 %this))))
                        (& "hopc.js" 26)
                        2863)
                      (js-undefined))
                    (js-get-jsobject/name-cache
                      ^149-env
                      (js-get-name/cache
                        ^148-node
                        (& "__ref__" 19)
                        #f
                        %this
                        (js-pcache-ref %pcache 21)
                        3016
                        '(imap))
                      %this))
                  ^148-node))))))
     (define (@intern this::obj ^154-ast::obj)
        (if (js-in? ^154-ast (& "__ast__" 27) %this)
          (let* ((^155-env::JsObject
                   (let ((cmap1057 (js-cnst-table-ref 0)))
                     (with-access::JsConstructMap
                       cmap1057
                       ((constrsize ctor))
                       (instantiateJsObject
                         (cmap cmap1057)
                         (__proto__ (js-object-proto %this))
                         (elements (make-vector (cell-ref constrsize)))))))
                 (^156-o::JsObject
                   (let ((cmap1058 (js-cnst-table-ref 1)))
                     (with-access::JsConstructMap
                       cmap1058
                       ((constrsize ctor))
                       (instantiateJsObject
                         (cmap cmap1058)
                         (__proto__ (js-object-proto %this))
                         (elements (subvector (cell-ref constrsize) #t)))))))
            (js-put-jsobject-name/cache!
              ^156-o
              (& "__ast__" 27)
              (@linkNode
                (@initNode
                  (js-get-name/cache
                    ^154-ast
                    (& "__ast__" 27)
                    #f
                    %this
                    (js-pcache-ref %pcache 24)
                    3590
                    '(imap))
                  ^155-env)
                ^155-env)
              #f
              %this
              (js-pcache-ref %pcache 23)
              3556
              '(imap nmap)
              #f)
            (js-setprototypeof
              ^156-o
              !HopcAstPrototype
              %this
              "js2scheme")
            ^156-o)
          (js-throw
            (js-jsstring-append-ascii-xxx
              (& "Illegal ast " 29)
              (js-toprimitive-for-string ^154-ast %this))
            (& "hopc.js" 26)
            3687)))
     (define (@extern this::obj ^157-ast::obj)
        (js-method-call-name/cache
          %this
          ^139-Ast
          (& "tojson" 31)
          (js-pcache-ref %pcache 26)
          (js-pcache-ref %pcache 27)
          3983
          '(pmap)
          '()
          ^157-ast))
     (define (@HopcAstWalker this::obj ^158-obj::obj)
        (begin
          (if (let ((^this this))
                (or (eq? ^this (js-undefined))
                    (eq? ^this (js-null))))
            (begin (set! this %this) this)
            (if (let ((^this this)) (not (js-object? ^this)))
              (begin
                (set! this
                  (let ((^this this)) (js-toobject %this ^this)))
                this)
              (js-undefined)))
          (let ()
            (define (@findWalker ^161-walker::obj ^162-ast::JsObject)
              (bind-exit
                (%return)
                (let ((^163-a::obj ^162-ast))
                  (let while@hopc.js:4323
                    ()
                    (if (js-in? ^163-a (& "__node__" 16) %this)
                      (begin
                        (if (let* ((lhs1059::obj
                                     (js-get-name/cache
                                       ^163-a
                                       (& "__node__" 16)
                                       #f
                                       %this
                                       (js-pcache-ref %pcache 28)
                                       4357
                                       '(imap)))
                                   (rhs1060::obj ^161-walker))
                              (js-in? rhs1060 (js-toname lhs1059 %this) %this))
                          (%return
                            (js-get/name-cache
                              ^161-walker
                              (js-get-name/cache
                                ^163-a
                                (& "__node__" 16)
                                #f
                                %this
                                (js-pcache-ref %pcache 30)
                                4402
                                '(imap))
                              %this))
                          (begin
                            (set! ^163-a
                              (js-getprototypeof ^163-a %this "hopc.js:4436"))
                            ^163-a))
                        (while@hopc.js:4323))
                      (js-undefined)))
                  (js-get-jsobject-name/cache
                    ^162-ast
                    (& "HopcWalk" 33)
                    #f
                    %this
                    (js-pcache-ref %pcache 32)
                    4477
                    '(imap)))))
           (define ^160-f (js-undefined))
            (if (if (js-object? ^158-obj)
                  (if (eq? (js-pcache-cmap (js-pcache-ref %pcache 74))
                           (js-object-cmap ^158-obj))
                    #t
                    (if (js-object? ^158-obj)
                      (begin
                        (with-access::JsPropertyCache
                          (js-pcache-ref %pcache 74)
                          (cmap)
                          (when (js-object-mapped? ^158-obj)
                                (set! cmap (js-object-cmap ^158-obj))))
                        #t)
                      #f))
                  #f)
              (js-for-in
                ^158-obj
                (lambda (g1063 %this)
                   (set! ^160-f g1063)
                   (js-put-name/cache!
                     this
                     (& "f" 34)
                     (js-get-jsobject/name-cache
                       ^158-obj
                       ^160-f
                       %this)
                     #f
                     %this
                     (js-pcache-ref %pcache 33)
                     4561
                     '(imap nmap)
                     #f))
                %this)
              (js-undefined))
            (let ((g1064 (js-cnst-table-ref 2)))
              (js-object-literal-init!
                (instantiateJsObject
                  (cmap g1064)
                  (__proto__ (js-object-proto %this))
                  (elements
                    (subvector
                      (with-access::JsConstructMap
                        g1064
                        (ctor)
                        (if (cell? ctor) (cell-ref ctor) 2))
                      (let ((^164-walkNode (js-undefined)))
                        (set! ^164-walkNode
                          (let ((walkNode
                                  (labels
                                    ((@walkNode
                                       (this::obj . arguments1037)
                                       (let ((arguments
                                               (js-arguments
                                                 %this
                                                 (make-vector (length arguments1037) (js-absent)))))
                                         (define ^165-node (js-undefined))
                                         (when (pair? arguments1037)
                                               (begin
                                                 (set! ^165-node (car arguments1037))
                                                 (js-arguments-define-own-property
                                                   arguments
                                                   0
                                                   (instantiate::JsAccessorDescriptor
                                                     (name (js-integer-name->jsstring 0))
                                                     (get (js-make-function
                                                            %this
                                                            (lambda (%) ^165-node)
                                                            (js-function-arity 0 0)
                                                            (js-function-info :name "get" :len 0)))
                                                     (set (js-make-function
                                                            %this
                                                            (lambda (% %v) (set! ^165-node %v))
                                                            (js-function-arity 1 0)
                                                            (js-function-info :name "set" :len 1)))
                                                     (%get (lambda (%) ^165-node))
                                                     (%set (lambda (% %v) (set! ^165-node %v)))
                                                     (configurable #t)
                                                     (enumerable #t))))
                                               (set! arguments1037 (cdr arguments1037))
                                               #unspecified)
                                         (let loop
                                           ((arguments1037 arguments1037) (%i 1))
                                           (when (pair? arguments1037)
                                                 (js-arguments-define-own-property
                                                   arguments
                                                   %i
                                                   (instantiate::JsValueDescriptor
                                                     (name (js-integer-name->jsstring %i))
                                                     (value (car arguments1037))
                                                     (writable #t)
                                                     (configurable #t)
                                                     (enumerable #t)))
                                                 (loop (cdr arguments1037) (+fx %i 1))))
                                         (js-bind!
                                           %this
                                           arguments
                                           (& "callee" 38)
                                           :value
                                           (js-make-function
                                             %this
                                             @walkNode
                                             0
                                             (js-function-info :name "@walkNode" :len 0))
                                           :enumerable
                                           #f)
                                         (begin
                                           (if (let ((^this this))
                                                 (or (eq? ^this (js-undefined))
                                                     (eq? ^this (js-null))))
                                             (begin (set! this %this) this)
                                             (if (let ((^this this)) (not (js-object? ^this)))
                                               (begin
                                                 (set! this
                                                   (let ((^this this)) (js-toobject %this ^this)))
                                                 this)
                                               (js-undefined)))
                                           (let ((^166-_this (js-undefined)))
                                             (if (if (js-object? ^165-node)
                                                   (if (eq? (js-pcache-cmap (js-pcache-ref %pcache 75))
                                                            (js-object-cmap ^165-node))
                                                     #t
                                                     (if (or (js-array? ^165-node)
                                                             (js-instanceof? %this ^165-node !Array))
                                                       (begin
                                                         (with-access::JsPropertyCache
                                                           (js-pcache-ref %pcache 75)
                                                           (cmap)
                                                           (when (js-object-mapped? ^165-node)
                                                                 (set! cmap (js-object-cmap ^165-node))))
                                                         #t)
                                                       #f))
                                                   #f)
                                               (begin
                                                 (set! ^166-_this this)
                                                 (js-method-jsobject-call-name/cache
                                                   %this
                                                   ^165-node
                                                   (& "forEach" 35)
                                                   (js-pcache-ref %pcache 36)
                                                   (js-pcache-ref %pcache 37)
                                                   4713
                                                   '(pmap)
                                                   '()
                                                   (let ((fun@hopc.js:4723
                                                           (labels
                                                             ((fun@hopc.js:4723
                                                                (this::obj . arguments1038)
                                                                (let ((arguments
                                                                        (js-arguments
                                                                          %this
                                                                          (make-vector (length arguments1038) (js-absent)))))
                                                                  (define ^167-v (js-undefined))
                                                                  (define ^168-i (js-undefined))
                                                                  (define ^169-a (js-undefined))
                                                                  (when (pair? arguments1038)
                                                                        (begin
                                                                          (set! ^167-v (car arguments1038))
                                                                          (js-arguments-define-own-property
                                                                            arguments
                                                                            0
                                                                            (instantiate::JsAccessorDescriptor
                                                                              (name (js-integer-name->jsstring 0))
                                                                              (get (js-make-function
                                                                                     %this
                                                                                     (lambda (%) ^167-v)
                                                                                     (js-function-arity 0 0)
                                                                                     (js-function-info :name "get" :len 0)))
                                                                              (set (js-make-function
                                                                                     %this
                                                                                     (lambda (% %v) (set! ^167-v %v))
                                                                                     (js-function-arity 1 0)
                                                                                     (js-function-info :name "set" :len 1)))
                                                                              (%get (lambda (%) ^167-v))
                                                                              (%set (lambda (% %v) (set! ^167-v %v)))
                                                                              (configurable #t)
                                                                              (enumerable #t))))
                                                                        (set! arguments1038 (cdr arguments1038))
                                                                        (when (pair? arguments1038)
                                                                              (begin
                                                                                (set! ^168-i (car arguments1038))
                                                                                (js-arguments-define-own-property
                                                                                  arguments
                                                                                  1
                                                                                  (instantiate::JsAccessorDescriptor
                                                                                    (name (js-integer-name->jsstring 1))
                                                                                    (get (js-make-function
                                                                                           %this
                                                                                           (lambda (%) ^168-i)
                                                                                           (js-function-arity 0 0)
                                                                                           (js-function-info :name "get" :len 0)))
                                                                                    (set (js-make-function
                                                                                           %this
                                                                                           (lambda (% %v) (set! ^168-i %v))
                                                                                           (js-function-arity 1 0)
                                                                                           (js-function-info :name "set" :len 1)))
                                                                                    (%get (lambda (%) ^168-i))
                                                                                    (%set (lambda (% %v) (set! ^168-i %v)))
                                                                                    (configurable #t)
                                                                                    (enumerable #t))))
                                                                              (set! arguments1038 (cdr arguments1038))
                                                                              (when (pair? arguments1038)
                                                                                    (begin
                                                                                      (set! ^169-a (car arguments1038))
                                                                                      (js-arguments-define-own-property
                                                                                        arguments
                                                                                        2
                                                                                        (instantiate::JsAccessorDescriptor
                                                                                          (name (js-integer-name->jsstring 2))
                                                                                          (get (js-make-function
                                                                                                 %this
                                                                                                 (lambda (%) ^169-a)
                                                                                                 (js-function-arity 0 0)
                                                                                                 (js-function-info :name "get" :len 0)))
                                                                                          (set (js-make-function
                                                                                                 %this
                                                                                                 (lambda (% %v) (set! ^169-a %v))
                                                                                                 (js-function-arity 1 0)
                                                                                                 (js-function-info :name "set" :len 1)))
                                                                                          (%get (lambda (%) ^169-a))
                                                                                          (%set (lambda (% %v) (set! ^169-a %v)))
                                                                                          (configurable #t)
                                                                                          (enumerable #t))))
                                                                                    (set! arguments1038 (cdr arguments1038))
                                                                                    #unspecified)))
                                                                  (let loop
                                                                    ((arguments1038 arguments1038) (%i 3))
                                                                    (when (pair? arguments1038)
                                                                          (js-arguments-define-own-property
                                                                            arguments
                                                                            %i
                                                                            (instantiate::JsValueDescriptor
                                                                              (name (js-integer-name->jsstring %i))
                                                                              (value (car arguments1038))
                                                                              (writable #t)
                                                                              (configurable #t)
                                                                              (enumerable #t)))
                                                                          (loop (cdr arguments1038) (+fx %i 1))))
                                                                  (js-bind!
                                                                    %this
                                                                    arguments
                                                                    (& "callee" 38)
                                                                    :value
                                                                    (js-make-function
                                                                      %this
                                                                      fun@hopc.js:4723
                                                                      0
                                                                      (js-function-info
                                                                        :name
                                                                        "fun@hopc.js:4723"
                                                                        :len
                                                                        0))
                                                                    :enumerable
                                                                    #f)
                                                                  (begin
                                                                    (js-function-maybe-call3
                                                                      %this
                                                                      (js-get-name/cache
                                                                        (js-get-name/cache
                                                                          !Array
                                                                          (& "prototype" 36)
                                                                          #f
                                                                          %this
                                                                          (js-pcache-ref %pcache 41)
                                                                          4758
                                                                          '(imap))
                                                                        (& "splice" 37)
                                                                        #f
                                                                        %this
                                                                        (js-pcache-ref %pcache 40)
                                                                        4768
                                                                        '(imap))
                                                                      arguments
                                                                      0
                                                                      1
                                                                      ^167-v
                                                                      %this)
                                                                    (js-put/cache!
                                                                      ^169-a
                                                                      ^168-i
                                                                      (js-function-apply
                                                                        %this
                                                                        ^164-walkNode
                                                                        ^166-_this
                                                                        arguments
                                                                        (js-pcache-ref %pcache 43))
                                                                      #f
                                                                      %this
                                                                      4813
                                                                      "hopc.js")
                                                                    (js-undefined)))))
                                                             fun@hopc.js:4723)))
                                                     (js-make-function
                                                       %this
                                                       fun@hopc.js:4723
                                                       (js-function-arity 3 0 'arguments)
                                                       (js-function-info
                                                         :name
                                                         "fun@hopc.js:4723"
                                                         :len
                                                         3
                                                         :path
                                                         "/misc/serrano-misc/hop/node_modules/hopc/lib/hopc.js"
                                                         :start
                                                         4723
                                                         :end
                                                         4863
                                                         :new-target
                                                         #f)
                                                       :strict
                                                       'normal
                                                       :alloc
                                                       js-object-alloc-lazy
                                                       :constrsize
                                                       0)))
                                                 ^165-node)
                                               (if (not (if (js-object? ^165-node)
                                                          (if (eq? (js-pcache-cmap (js-pcache-ref %pcache 76))
                                                                   (js-object-cmap ^165-node))
                                                            #t
                                                            (if (js-object? ^165-node)
                                                              (begin
                                                                (with-access::JsPropertyCache
                                                                  (js-pcache-ref %pcache 76)
                                                                  (cmap)
                                                                  (when (js-object-mapped? ^165-node)
                                                                        (set! cmap (js-object-cmap ^165-node))))
                                                                #t)
                                                              #f))
                                                          #f))
                                                 ^165-node
                                                 (if (js-in? ^165-node (& "__node__" 16) %this)
                                                   (js-function-maybe-apply
                                                     %this
                                                     (@findWalker this ^165-node)
                                                     this
                                                     arguments
                                                     (js-pcache-ref %pcache 45))
                                                   ^165-node))))))))
                                    @walkNode)))
                            (js-make-function
                              %this
                              walkNode
                              (js-function-arity 1 0 'arguments)
                              (js-function-info
                                :name
                                "walkNode"
                                :len
                                1
                                :path
                                "/misc/serrano-misc/hop/node_modules/hopc/lib/hopc.js"
                                :start
                                4621
                                :end
                                5094
                                :new-target
                                #f)
                              :strict
                              'normal
                              :alloc
                              js-object-alloc-lazy
                              :constrsize
                              0)))
                        ^164-walkNode)
                      (let ((^170-walk (js-undefined)))
                        (set! ^170-walk
                          (let ((walk (labels
                                        ((@walk (this::obj . arguments1039)
                                                (let ((arguments
                                                        (js-arguments
                                                          %this
                                                          (make-vector (length arguments1039) (js-absent)))))
                                                  (define ^171-ast (js-undefined))
                                                  (when (pair? arguments1039)
                                                        (begin
                                                          (set! ^171-ast (car arguments1039))
                                                          (js-arguments-define-own-property
                                                            arguments
                                                            0
                                                            (instantiate::JsAccessorDescriptor
                                                              (name (js-integer-name->jsstring 0))
                                                              (get (js-make-function
                                                                     %this
                                                                     (lambda (%) ^171-ast)
                                                                     (js-function-arity 0 0)
                                                                     (js-function-info :name "get" :len 0)))
                                                              (set (js-make-function
                                                                     %this
                                                                     (lambda (% %v) (set! ^171-ast %v))
                                                                     (js-function-arity 1 0)
                                                                     (js-function-info :name "set" :len 1)))
                                                              (%get (lambda (%) ^171-ast))
                                                              (%set (lambda (% %v) (set! ^171-ast %v)))
                                                              (configurable #t)
                                                              (enumerable #t))))
                                                        (set! arguments1039 (cdr arguments1039))
                                                        #unspecified)
                                                  (let loop
                                                    ((arguments1039 arguments1039) (%i 1))
                                                    (when (pair? arguments1039)
                                                          (js-arguments-define-own-property
                                                            arguments
                                                            %i
                                                            (instantiate::JsValueDescriptor
                                                              (name (js-integer-name->jsstring %i))
                                                              (value (car arguments1039))
                                                              (writable #t)
                                                              (configurable #t)
                                                              (enumerable #t)))
                                                          (loop (cdr arguments1039) (+fx %i 1))))
                                                  (js-bind!
                                                    %this
                                                    arguments
                                                    (& "callee" 38)
                                                    :value
                                                    (js-make-function
                                                      %this
                                                      @walk
                                                      0
                                                      (js-function-info :name "@walk" :len 0))
                                                    :enumerable
                                                    #f)
                                                  (begin
                                                    (if (let ((^this this))
                                                          (or (eq? ^this (js-undefined))
                                                              (eq? ^this (js-null))))
                                                      (begin (set! this %this) this)
                                                      (if (let ((^this this)) (not (js-object? ^this)))
                                                        (begin
                                                          (set! this
                                                            (let ((^this this)) (js-toobject %this ^this)))
                                                          this)
                                                        (js-undefined)))
                                                    (let* ((^172-k (js-undefined))
                                                           (^173-_ast::obj ^171-ast))
                                                      (if (js-in? ^171-ast (& "__ast__" 27) %this)
                                                        (begin
                                                          (js-function-maybe-call3
                                                            %this
                                                            (js-get-name/cache
                                                              (js-get-name/cache
                                                                !Array
                                                                (& "prototype" 36)
                                                                #f
                                                                %this
                                                                (js-pcache-ref %pcache 51)
                                                                5186
                                                                '(imap))
                                                              (& "splice" 37)
                                                              #f
                                                              %this
                                                              (js-pcache-ref %pcache 50)
                                                              5196
                                                              '(imap))
                                                            arguments
                                                            0
                                                            1
                                                            (js-get-name/cache
                                                              ^171-ast
                                                              (& "__ast__" 27)
                                                              #f
                                                              %this
                                                              (js-pcache-ref %pcache 52)
                                                              5230
                                                              '(imap))
                                                            %this)
                                                          (js-put-name/cache!
                                                            ^173-_ast
                                                            (& "__ast__" 27)
                                                            (js-function-maybe-apply
                                                              %this
                                                              (js-get-name/cache
                                                                this
                                                                (& "walkNode" 39)
                                                                #f
                                                                %this
                                                                (js-pcache-ref %pcache 56)
                                                                5266
                                                                '(imap))
                                                              this
                                                              arguments
                                                              (js-pcache-ref %pcache 54))
                                                            #f
                                                            %this
                                                            (js-pcache-ref %pcache 53)
                                                            5251
                                                            '(imap nmap)
                                                            #f)
                                                          ^173-_ast)
                                                        (begin
                                                          (js-for-in
                                                            ^171-ast
                                                            (lambda (g1065 %this)
                                                               (set! ^172-k g1065)
                                                               (js-put/cache!
                                                                 ^171-ast
                                                                 ^172-k
                                                                 (js-method-call-name/cache
                                                                   %this
                                                                   this
                                                                   (& "walkNode" 39)
                                                                   (js-pcache-ref %pcache 58)
                                                                   (js-pcache-ref %pcache 59)
                                                                   5381
                                                                   '(pmap)
                                                                   '()
                                                                   (js-get/name-cache ^171-ast ^172-k %this))
                                                                 #f
                                                                 %this
                                                                 5369
                                                                 "hopc.js"))
                                                            %this)
                                                          ^171-ast)))))))
                                        @walk)))
                            (js-make-function
                              %this
                              walk
                              (js-function-arity 1 0 'arguments)
                              (js-function-info
                                :name
                                "walk"
                                :len
                                1
                                :path
                                "/misc/serrano-misc/hop/node_modules/hopc/lib/hopc.js"
                                :start
                                5108
                                :end
                                5439
                                :new-target
                                #f)
                              :strict
                              'normal
                              :alloc
                              js-object-alloc-lazy
                              :constrsize
                              0)))
                        ^170-walk)))))))))
     (define !intern
        (js-bind!
          %this
          %scope
          (& "intern" 30)
          :configurable
          #f
          :value
          (js-make-function
            %this
            @intern
            (js-function-arity 1 0)
            (js-function-info
              :name
              "@intern"
              :len
              1
              :path
              "/misc/serrano-misc/hop/node_modules/hopc/lib/hopc.js"
              :start
              3437
              :end
              3721
              :new-target
              #f)
            :strict
            'normal
            :alloc
            js-object-alloc
            :constrsize
            0)))
     (define !extern
        (js-bind!
          %this
          %scope
          (& "extern" 32)
          :configurable
          #f
          :value
          (js-make-function
            %this
            @extern
            (js-function-arity 1 0)
            (js-function-info
              :name
              "@extern"
              :len
              1
              :path
              "/misc/serrano-misc/hop/node_modules/hopc/lib/hopc.js"
              :start
              3945
              :end
              4000
              :new-target
              #f)
            :strict
            'normal
            :alloc
            js-object-alloc
            :constrsize
            0)))
     (define !HopcAstWalker
        (js-bind!
          %this
          %scope
          (& "HopcAstWalker" 40)
          :configurable
          #f
          :value
          (js-make-function
            %this
            @HopcAstWalker
            (js-function-arity 1 0)
            (js-function-info
              :name
              "@HopcAstWalker"
              :len
              1
              :path
              "/misc/serrano-misc/hop/node_modules/hopc/lib/hopc.js"
              :start
              4224
              :end
              5446
              :new-target
              #f)
            :strict
            'normal
            :alloc
            js-object-alloc
            :constrsize
            1)))
     (define ^1-Hop
        (js-call1-obj
          %this
          %require
          (js-undefined)
          (& "hop" 41)))
     (define ^139-Ast
        (js-call1-obj
          %this
          %require
          (js-undefined)
          (& "./ast.js" 42)))
     (define ^3-Walk #unspecified)
      (define ^4-JS2Scheme #unspecified)
      (define !HopcAstPrototype
        (let ((%%tmp (js-undefined)))
          (js-define
            %this
            %scope
            (& "HopcAstPrototype" 43)
            (lambda (%) !HopcAstPrototype)
            (lambda (% %v) (set! !HopcAstPrototype %v))
            %source
            1135)
          %%tmp))
     (js-undefined)
      (set! ^3-Walk
        (js-call1-obj
          %this
          %require
          (js-undefined)
          (& "./walk.js" 44)))
      (js-undefined)
      (set! ^4-JS2Scheme
        (js-call1-obj
          %this
          %require
          (js-undefined)
          (& "./_js2scheme.hop" 45)))
      (js-undefined)
      (set! !HopcAstPrototype
        (let ((g1066 (js-cnst-table-ref 4)))
          (js-object-literal-init!
            (instantiateJsObject
              (cmap g1066)
              (__proto__ (js-object-proto %this))
              (elements
                (subvector
                  (with-access::JsConstructMap
                    g1066
                    (ctor)
                    (if (cell? ctor) (cell-ref ctor) 2))
                  (let ((fun@hopc.js:1154
                          (labels
                            ((fun@hopc.js:1154
                               (this::obj ^174-req::obj)
                               (begin
                                 (if (let ((^this this))
                                       (or (eq? ^this (js-undefined))
                                           (eq? ^this (js-null))))
                                   (begin (set! this %this) this)
                                   (if (let ((^this this)) (not (js-object? ^this)))
                                     (begin
                                       (set! this
                                         (let ((^this this)) (js-toobject %this ^this)))
                                       this)
                                     (js-undefined)))
                                 (js-method-call-name/cache
                                   %this
                                   ^1-Hop
                                   (& "HTTPResponseString" 46)
                                   (js-pcache-ref %pcache 62)
                                   (js-pcache-ref %pcache 63)
                                   1188
                                   '(pmap)
                                   '()
                                   (js-method-call-name/cache
                                     %this
                                     ^139-Ast
                                     (& "tojson" 31)
                                     (js-pcache-ref %pcache 64)
                                     (js-pcache-ref %pcache 65)
                                     1214
                                     '(pmap)
                                     '()
                                     this)
                                   (let ((g1067 (js-cnst-table-ref 3)))
                                     (js-object-literal-init!
                                       (instantiateJsObject
                                         (cmap g1067)
                                         (__proto__ (js-object-proto %this))
                                         (elements
                                           (subvector
                                             (with-access::JsConstructMap
                                               g1067
                                               (ctor)
                                               (if (cell? ctor) (cell-ref ctor) 2))
                                             ^174-req
                                             (& "application/json" 47))))))))))
                            fun@hopc.js:1154)))
                    (js-make-function
                      %this
                      fun@hopc.js:1154
                      (js-function-arity 1 0)
                      (js-function-info
                        :name
                        "fun@hopc.js:1154"
                        :len
                        1
                        :path
                        "/misc/serrano-misc/hop/node_modules/hopc/lib/hopc.js"
                        :start
                        1154
                        :end
                        1308
                        :new-target
                        #f)
                      :alloc
                      js-object-alloc-lazy
                      :strict
                      'normal
                      :constrsize
                      0))
                  (let ((fun@hopc.js:1321
                          (labels
                            ((fun@hopc.js:1321
                               (this::obj)
                               (begin
                                 (if (let ((^this this))
                                       (or (eq? ^this (js-undefined))
                                           (eq? ^this (js-null))))
                                   (begin (set! this %this) this)
                                   (if (let ((^this this)) (not (js-object? ^this)))
                                     (begin
                                       (set! this
                                         (let ((^this this)) (js-toobject %this ^this)))
                                       this)
                                     (js-undefined)))
                                 (js-get-name/cache
                                   this
                                   (& "__ast__" 27)
                                   #f
                                   %this
                                   (js-pcache-ref %pcache 69)
                                   1345
                                   '(imap)))))
                            fun@hopc.js:1321)))
                    (js-make-function
                      %this
                      fun@hopc.js:1321
                      (js-function-arity 0 0)
                      (js-function-info
                        :name
                        "fun@hopc.js:1321"
                        :len
                        0
                        :path
                        "/misc/serrano-misc/hop/node_modules/hopc/lib/hopc.js"
                        :start
                        1321
                        :end
                        1355
                        :new-target
                        #f)
                      :alloc
                      js-object-alloc-lazy
                      :strict
                      'normal
                      :constrsize
                      0))))))))
      (js-undefined)
      (js-put!
        !exports
        (& "intern" 30)
        !intern
        #f
        %this)
      (js-put!
        !exports
        (& "extern" 32)
        !extern
        #f
        %this)
      (js-put!
        !exports
        (& "HopcAstWalker" 40)
        !HopcAstWalker
        #f
        %this)
      (js-put!
        !exports
        (& "Parser" 48)
        (js-get ^4-JS2Scheme (& "Parser" 48) %this)
        #f
        %this)
      (js-put!
        !exports
        (& "compile" 49)
        (js-get ^4-JS2Scheme (& "compile" 49) %this)
        #f
        %this)
      (js-put!
        !exports
        (& "dump" 50)
        (js-get ^4-JS2Scheme (& "dump" 50) %this)
        #f
        %this)
      (js-put!
        !exports
        (& "ast" 51)
        (js-call1-obj
          %this
          (js-get %require (& "resolve" 52) %this)
          %require
          (& "./ast.js" 42))
        #f
        %this)
      #|J2SExportDefault|)))

hopscript
