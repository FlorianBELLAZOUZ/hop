;*=====================================================================*/
;*    .../project/hop/hop/node_modules/hopc/lib/_js2scheme.hop         */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Tue Jul 17 09:48:30 2018                          */
;*    Last change :  Wed Mar 11 09:15:04 2020 (serrano)                */
;*    Copyright   :  2018-20 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    JS2Scheme wrapper.                                               */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _js2scheme
   
   (library hopscript hop hopwidget nodejs js2scheme)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))
	   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (&with!
      
      (define exports (js-get module (& "exports") %this))
      
      (define controller #f)
      
      (define parse
	 (js-make-function %this
	    (lambda (this path)
	       (if (and (isa? this JsWrapper)
			(with-access::JsWrapper this (obj)
			   (eq? obj 'J2SParser)))
		   (let ((filename (js-tostring path %this)))
		      (if (file-exists? filename)
			  (with-access::JsWrapper this (data)
			     (call-with-input-file filename
				(lambda (ip)
				   (set! controller #f)
				   (j2s-parser ip
				      `(:debug ,(bigloo-debug)
					  :module-name ,(symbol->string (gensym)))
				      data))))
			  (raise
			     (instantiate::&io-file-not-found-error
				(proc "parse")
				(msg "file not found")
				(obj filename)))))
		   (js-raise-type-error %this 
		      "js->ast: not a parser ~a" this)))
	    1 (& "parse")))
      
      (define (token->js token)
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((tok (js-new0 %this js-object)))
	       (js-bind! %this tok (& "type")
		  :value (js-string->jsstring (symbol->string! (car token)))
		  :writable #f)
	       (js-bind! %this tok (& "value")
		  :value (cond
			    ((symbol? (cdr token))
			     (js-string->jsstring (symbol->string (cdr token))))
			    ((string? (cdr token))
			     (js-string->jsstring (cdr token)))
			    (else
			     (cdr token)))
		  :writable #f)
	       (js-bind! %this tok (& "filename")
		  :value (js-string->jsstring (cadr (cer token)))
		  :writable #f)
	       (js-bind! %this tok (& "pos")
		  :value (caddr (cer token))
		  :writable #f)
	       (js-bind! %this tok (& "location")
		  :value (cer token)
		  :writable #f
		  :enumerable #f)
	       tok)))
      
      (define parser-prototype
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((obj (js-new0 %this js-object)))
	       (js-bind! %this obj (& "parse")
		  :value parse
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "plugins")
		  :get (js-make-function %this
			  (lambda (this)
			     (with-access::JsWrapper this (data)
				data))
			  0 (& "get"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "addPlugin")
		  :value (js-make-function %this
			    (lambda (this key parser)
			       (with-access::JsWrapper this (data)
				  (set-cdr! data
				     (cons
					(cons (string->symbol
						 (js-tostring key %this))
					   (lambda (tok decl ctrl)
					      (set! controller ctrl)
					      (js->ast %this
						 (js-call2 %this parser this
						    (token->js tok) decl))))
					(cdr data)))))
			    2 (& "addPlugin"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "removePlugin")
		  :value (js-make-function %this
			    (lambda (this key)
			       (with-access::JsWrapper this (data)
				  (let* ((k (string->symbol
					       (js-tostring key %this)))
					 (c (assq k data)))
				     (delete! c data))))
			    2 (& "removePlugin"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "peekToken")
		  :value (js-make-function %this
			    (lambda (this token)
			       (if (vector? controller)
				   (token->js
				      ((vector-ref controller 2)))
				   (js-raise-type-error %this
				      "detached plugin parser" this)))
			    1 (& "peekToken"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "consumeToken")
		  :value (js-make-function %this
			    (lambda (this token)
			       (if (vector? controller)
				   (token->js
				      ((vector-ref controller 3)
				       (string->symbol
					  (js-tostring token %this))))
				   (js-raise-type-error %this
				      "detached plugin parser" this)))
			    1 (& "consumeToken"))
		  :writable #f
		  :enumerable #t)
	       
	       (js-bind! %this obj (& "consumeAny")
		  :value (js-make-function %this
			    (lambda (this token)
			       (if (vector? controller)
				   (token->js ((vector-ref controller 4)))
				   (js-raise-type-error %this
				      "detached plugin parser" this)))
			    1 (& "consumeAny"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "parseExpression")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (vector? controller)
				   (with-access::JsWrapper this (data)
				      ((vector-ref controller 5) #f #f data))
				   (js-raise-type-error %this
				      "detached plugin parser" this)))
			    0 (& "parseExpression"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "parsePrimary")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (vector? controller)
				   (with-access::JsWrapper this (data)
				      ((vector-ref controller 0) #f #f data))
				   (js-raise-type-error %this
				      "detached plugin parser" this)))
			    0 (& "parsePrimary"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "parsePrimaryDollar")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (vector? controller)
				   (with-access::JsWrapper this (data)
				      ((vector-ref controller 1) #f #f data))
				   (js-raise-type-error %this
				      "detached plugin parser" this)))
			    0 (& "parsePrimaryDollar"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "parseStatement")
		  :value (js-make-function %this
			    (lambda (this token)
			       (if (vector? controller)
				   (with-access::JsWrapper this (data)
				      ((vector-ref controller 6) data))
				   (js-raise-type-error %this
				      "detached plugin parser" this)))
			    1 (& "parseStatement"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "parseBlock")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (vector? controller)
				   (with-access::JsWrapper this (data)
				      ((vector-ref controller 7) data))
				   (js-raise-type-error %this
				      "detached plugin parser" this)))
			    0 (& "parseBlock"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "parseCondExpression")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (vector? controller)
				   (with-access::JsWrapper this (data)
				      ((vector-ref controller 8) #f #f #t data))
				   (js-raise-type-error %this
				      "detached plugin parser" this)))
			    0 (& "parseCondExpression"))
		  :writable #f
		  :enumerable #t)
	       (js-bind! %this obj (& "parseDollarExpression")
		  :value (js-make-function %this
			    (lambda (this)
			       (if (vector? controller)
				   (with-access::JsWrapper this (data)
				      ((vector-ref controller 9) data))
				   (js-raise-type-error %this
				      "detached plugin parser" this)))
			    0 (& "parseDollarExpression"))
		  :writable #f
		  :enumerable #t)
	       (for-each (lambda (s)
			    (let ((j (js-ascii-name->jsstring s)))
			       (js-bind! %this obj j :value j :writable #f)))
		  '("DOT" "DOTS" "SEMICOLON" "COMMA" "LBRACE" "RBRACE" "LPAREN"
		    "RPAREN" "ID" "DOLLAR" "LBRACKET" "RBRACKET" "OR" "BIT_OR"
		    "STRING" "await" "break" "case" "catch" "const" "continue"
		    "debugger" "default" "delete" "do" "else" "false" "finally"
		    "for" "function" "if" "in" "instanceof" "let" "new" "null"
		    "return" "switch" "this" "throw" "true" "try" "typeof" "var"
		    "void" "while" "with" "yield" "class" "extends" "super"
		    "static"))
	       (for-each (lambda (ns)
			    (js-bind! %this obj (js-ascii-name->jsstring (car ns))
			       :value (js-ascii->jsstring (cadr ns))
			       :writable #f))
		  '(("ELSE" "else") ("COLUMN" ":") ("EGAL" "=") ("NOTEGAL" "!=")
		    ("EGALEGAL" "==") ("NOTEGALEGAL" "!==")
		    ("LT" "<") ("GT" ">") ("LE" "<=") ("GE" ">=")
		    ("PLUS" "+") ("MINUS" "-") ("MUL" "*") ("PERCENT" "%")
		    ("PLUSPLUS" "++") ("MINUSMINUS" "--") 
		    ("SHIFTL" "<<") ("SHIFTR" ">>") ("USHIFTR" ">>>")
		    ("AMP" "&") ("HAT" "^") ("BANG" "!") ("TILDE" "~") ("AND" "&&")
		    ("PLUSEGAL" "+=") ("MINUSEGAL" "-=") ("MULEGAL" "*=") 
		    ("PERCENTEGAL" "%=") ("SHIFTLEGAL" "<<=") ("SHIFTREGAL" ">>=")
		    ("USHIFTREGAL" ">>>=") ("AMPEGAL" "&=") ("HATEGAL" "^=")
		    ("DIVEGAL" "/=") ("DIV" "/") ("QUESTIONMARK" "?")
		    ("LARROW" "=>")))
	       obj)))
      
      (with-access::JsGlobalObject %this (js-function-prototype)
	 (js-bind! %this exports (& "Parser")
	    :value (js-make-function %this (lambda (this) (js-undefined))
		      0 (& "Parser")
		      :__proto__ js-function-prototype
		      :alloc js-no-alloc
		      :prototype parser-prototype
		      :construct (lambda (_)
				    (let ((p (instantiate::JsWrapper
						(obj 'J2SParser)
						(cmap (instantiate::JsConstructMap))
						(data (list (cons (gensym) #f))))))
				       (js-object-proto-set! p parser-prototype)
				       (js-object-mode-set! p
					  (js-object-default-mode))
				       p)))
	    :writable #f :enumerable #t))
      
      (js-bind! %this exports (& "compile")
	 :value (js-make-function %this
		   (lambda (this ipath opath)
		      (let ((tgt (j2s-compile ipath "/tmp")))
			 (if (eq? opath (js-undefined))
			     (js-string->jsstring 
				(call-with-output-string
				   (lambda (op)
				      (pp tgt op))))
			     (call-with-output-file (js-tostring opath %this)
				(lambda (op)
				   (pp tgt op)
				   opath)))))
		   2 (& "compile"))
	 :writable #f
	 :enumerable #t)))
			 
;*---------------------------------------------------------------------*/
;*    js->ast ...                                                      */
;*---------------------------------------------------------------------*/
(define (js->ast %this n)

   (define (symbol-field? clazz f)
      (or (eq? (class-field-type f) 'symbol)
	  (and (eq? clazz J2SFun) (eq? (class-field-name f) 'idthis))
	  (eq? (class-field-name f) '_scmid)))
   
   (define (jsobject->node js)
      (let* ((cname (js-tostring (js-get js (& "__node__") %this) %this))
	     (clazz (find-class (string->symbol cname)))
	     (ctor (class-constructor clazz))
	     (inst ((class-allocator clazz)))
	     (fields (class-all-fields clazz)))
	 ;; instance fields
	 (let loop ((i (-fx (vector-length fields) 1)))
	    (when (>=fx i 0)
	       (let* ((f (vector-ref-ur fields i))
		      (n (class-field-name f))
		      (jn (js-name->jsstring (symbol->string! n))))
		  (cond
		     ((js-has-property js jn %this)
		      (let ((v (js->node (js-get js jn %this))))
			 ((class-field-mutator f)
			  inst
			  (cond
			     ((eq? (class-field-type f) 'symbol)
			      (if (string? v)
				  (string->symbol v)
				  (js-raise-type-error %this 
				     (format "js->ast: bad field type ~a.~a, string expected, ~~a provided"
					cname n)
				     v)))
			     ((eq? (class-field-type f) 'pair-nil)
			      (cond
				 ((or (null? v) (pair? v))
				  v)
				 ((vector? v)
				  (vector->list v))
				 (else
				  (js-raise-type-error %this 
				     (format "js->ast: bad field type ~a.~a, vector expected, ~~a provided"
					cname n)
				     v))))
			     ((eq? (class-field-type f) 'pair)
			      (cond
				 ((pair? v)
				  v)
				 ((vector? v)
				  (vector->list v))
				 (else
				  (js-raise-type-error %this 
				     (format "js->ast: bad field type ~a.~a, vector expected, ~~a provided"
					cname n)
				     v))))
			     ((eq? (class-field-type f) 'uint32)
			      (if (null? v)
				  (if (class-field-default-value? f)
				      (class-field-default-value f)
				      #u32:0)
				  v))
			     ((symbol-field? clazz f)
			      (if (string? v)
				  (string->symbol v)
				  v))
			     (else
			      v)))))
		     ((class-field-default-value? f)
		      ((class-field-mutator f)
		       inst (class-field-default-value f)))
		     ((not (member "nojson" (class-field-info f)))
		      (error "js->ast"
			 (format "Missing field \"~a\"" n) cname)))
		  (loop (-fx i 1)))))
	 ;; constructor
	 (when (procedure? ctor) ctor inst)
	 inst))

   (define (js->node n)
      (cond
	 ((isa? n J2SNode)
	  n)
	 ((or (isa? n JsString) (isa? n JsStringLiteral))
	  (js-jsstring->string n))
	 ((isa? n JsArray)
	  (map! js->node (jsarray->list n %this)))
	 ((isa? n JsObject)
	  (let ((n (jsobject->node n)))
	     (if (isa? n J2SNode)
		 (with-access::J2SNode n (loc)
		    (map! js->node loc)
		    n)
		 n)))
	 (else
	  n)))

   (js->node n))
