/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hopc/lib/hopc.js       */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Thu Jun 26 08:21:30 2014                          */
/*    Last change :  Tue Sep 10 14:21:01 2019 (serrano)                */
/*    Copyright   :  2014-19 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    HOPC http plugin help functions                                  */
/*=====================================================================*/
const Hop = require( "hop" );
const Ast = require( "./ast.js" );
const Walk = require( "./walk.js" );
const JS2Scheme = require( "./_js2scheme.hop" );

/*---------------------------------------------------------------------*/
/*    HopcAstPrototype ...                                             */
/*---------------------------------------------------------------------*/
var HopcAstPrototype = {
   toResponse: function( req ) {
      console.log( "AST=", Ast.tojson( this ) );
      return Hop.HTTPResponseString(
	 Ast.tojson( this ),
	 {
	    request: req,
	    contentType: "application/json"
	 }
      );
   }
}

/*---------------------------------------------------------------------*/
/*    initNode ...                                                     */
/*---------------------------------------------------------------------*/
function initNode( node, env ) {
   if( !(node instanceof Object) || (node instanceof Function) ) {
      return node;
   } else if( "__node__" in node ) {
      var o = new Ast[ node.__node__ ];

      for( var k in node ) {
	 o[ k ] = initNode( node[ k ], env );
      }

      if( "key" in node ) {
	 env[ node.key ] = o;
      }

      return o;
   } else if( node instanceof Array ) {
      return node.map( function( v, i, a ) { return initNode( v, env ) } );
   } else {
      return node;
   }
}

/*---------------------------------------------------------------------*/
/*    linkNode ...                                                     */
/*---------------------------------------------------------------------*/
function linkNode( node, env ) {
   
   if( !(node instanceof Object) || (node instanceof Function) ) {
      return node;
   } else if( "__node__" in node ) {
      for( var k in node ) {
	 node[ k ] = linkNode( node[ k ], env );
      }

      return node;
   } else if( node instanceof Array ) {
      node.forEach( function( v, i, a ) {
	 a[ i ] = linkNode( v, env );
      } );

      return node;
   } else if( "__ref__" in node ) {
      if( env[ node.__ref__ ] === undefined ) {
	 throw "hopc, wrong ast: dangling reference (" + node.__ref__  
	    + "): `" + node.__node__ + "' " + node.__loc__;
      }
      
      return env[ node.__ref__ ];
   } else {
      return node;
   }
}

/*---------------------------------------------------------------------*/
/*    intern ...                                                       */
/*    -------------------------------------------------------------    */
/*    Intialize the Ast obtained by parsing JSON serialization         */
/*---------------------------------------------------------------------*/
function intern( ast ) {
   if( "__ast__" in ast ) {
      var env = {};
      var o = { __hopc_ast__: true };

      o.__ast__ = linkNode( initNode( ast.__ast__, env ), env );
      o.__proto__ = HopcAstPrototype;

      return o;
   } else {
      throw "Illegal ast " + ast;
   }
}

/*---------------------------------------------------------------------*/
/*    HopcAstWalker ...                                                */
/*---------------------------------------------------------------------*/
function HopcAstWalker( obj ) {

   function findWalker( walker, ast ) {
      var a = ast;

      while( "__node__" in a ) {
	 if( a.__node__ in walker ) {
	    return walker[ a.__node__ ];
	 } else {
	    a = a.__proto__;
	 }
      }

      return ast.HopcWalk;
   }

   if( obj instanceof Object ) {
      for( var f in obj ) {
	 this.f = obj[ f ];
      }
   }
   
   return {
      walkNode: function walkNode( node ) {
	 if( node instanceof Array ) {
	    var _this = this;
	    node.forEach( function( v, i, a ) {
	       Array.prototype.splice.call( arguments, 0, 1, v );
	       a[ i ] = walkNode.apply( _this, arguments );
	    } );
	       
	    return node;
	 } else if( !(node instanceof Object) ) {
	    return node;
	 } else if( "__node__" in node ) {
	    return findWalker( this, node ).apply( this, arguments );
	 } else {
	    return node;
	 }
      },
      walk: function walk( ast ) {
	 var _ast = ast;
	 if( "__ast__" in ast ) {
	    Array.prototype.splice.call( arguments, 0, 1, ast.__ast__ );
	    _ast.__ast__ = this.walkNode.apply( this, arguments );
	    return _ast;
	 } else {
	    for( var k in ast ) {
	       ast[ k ] = this.walkNode( ast[ k ] );
	    }
	    return ast;
	 }
      }
   }
}
   
exports.intern = intern;
exports.HopcAstWalker = HopcAstWalker;
exports.Parser = JS2Scheme.Parser;
exports.compile = JS2Scheme.compile;
exports.ast = require.resolve( "./ast.js" );

