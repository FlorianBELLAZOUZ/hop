;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/node_modules/hop/lib/_hop.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed May  8 08:38:07 2024                          */
;*    Last change :  Thu May 16 07:01:21 2024 (serrano)                */
;*    Copyright   :  2024 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    HopJs native implementation                                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module __hopjs__hop

   (library http hopscript hop nodejs)

   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    js-function ...                                                  */
;*---------------------------------------------------------------------*/
(define-macro (js-function id name . size)
   `(js-make-function %this ,id
       (js-function-arity ,id)
       (js-function-info :name ,name :len 0)
       :size ,(if (pair? size) (car size) 1)))
   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   (js-export (createScheduler
		 createServer createServerSSL
		 isSocketServer socketPortNumber
		 addUser
		 Service Frame)

      ;; current worker
      (define worker
	 (with-access::JsGlobalObject %this (worker)
 	    worker))

      ;; service-table
      (define service-table
	 (make-service-table))

      ;; service-filters
      (define service-filters
	 (list (cons 'first (make-service-filter service-table))))
      
      ;; scheduler-async
      (define scheduler-async #f)
      
      ;; scheduler-accept
      (define (scheduler-accept this serv)
	 (with-access::JsWrapper this (obj data)
	    (set! data
	       (accept-thread %this obj serv))))

      ;; scheduler prototype
      (define sched-cmap
	 (js-make-jsconstructmap))
      (define sched-prototype
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((obj (js-new0 %this js-object)))
	       (js-bind! %this obj (& "accept")
		  :value (js-function scheduler-accept "accept")
		  :writable #f
		  :enumerable #t)
	       obj)))

      ;; adduser
      (define (add-user this user)
	 (let ((name (js-get user (& "name") %this))
	       (pass (js-get user (& "password") %this))
	       (svc (js-get user (& "services") %this))
	       (dir (js-get user (& "directories") %this)))
	    (add-user! (js-tostring name %this)
	       :password (js-tostring password %this)
	       :services (cond
			    ((eq? svc (& "*")) '*)
			    ((js-array? svc) (array->symbol-list svc %this))
			    (else '()))
	       :directories (cond
			       ((eq? dir (& "*")) '*)
			       ((js-array? dir) (array->string-list dir %this))
			       (else '())))))

      ;; createScheduler
      (define createScheduler
	 (js-function (lambda (this size)
			 (let ((sched (instantiate::JsWrapper
					 (obj (instantiate::pool-scheduler
						 (size size)
						 (filters service-filters)
						 (keep-alive-timeout (* 30 1000))
						 (accept-timeout (* 10 1000))))
					 (data service-table)
					 (cmap sched-cmap))))
			    (js-object-proto-set! sched sched-prototype)
			    sched))
	    "createScheduler"))
      
      ;; createServer
      (define createServer
	 (js-function (lambda (this port name somaxconn)
			 (make-server-socket port
			    :name (and (js-jsstring? name) (js-jsstring->string name))
			    :backlog somaxconn))
	    "createServer"))

      ;; createServerSSL
      (define createServerSSL
	 (js-function (lambda (this port name somaxconn cert key)
			 (make-ssl-server-socket port
			    :name (and (js-jsstring? name) (js-jsstring->string name))
			    :backlog somaxconn
			    :protocol 'tlsv1_2
			    :cert (js-jsstring->string cert)
			    :pkey (js-jsstring->string key)))
	    "createServerSSL"))

      ;; isSocketServer
      (define isSocketServer
	 (js-function (lambda (this o) (socket-server? o))
	    "isSocketServer"))

      ;; socketPortNumber
      (define socketPortNumber
	 (js-function (lambda (this o) (socket-port-number o))
	    "socketPortNumber"))

      ;; addUser
      (define addUser
	 (js-function add-user
	    "addUser"))

      ;; Service
      (define Service
	 (js-function (lambda (this proc path)
			 (unless scheduler-async
			    (with-access::WorkerHopThread worker (%loop)
			       (set! scheduler-async
				  (instantiate::UvAsync
				     (loop %loop)
				     (cb list)))))
			 (with-access::JsWrapper this ((table data))
			    (js-create-service %this proc
			       (unless (eq? path (js-undefined))
				  (js-tostring path %this))
			       #f #t #f worker service-table)))
	    "Service"))

      ;; Frame
      (define Frame
	 (js-function (lambda (this impl args)
			 (with-access::JsService impl (svc)
			    (with-access::hop-service svc (path)
			       (js-make-hopframe %this svc path args))))
	    "Frame"))

      #unspecified))

;*---------------------------------------------------------------------*/
;*    accept-thread ...                                                */
;*---------------------------------------------------------------------*/
(define (accept-thread %this sched serv)
   (thread-start!
      (instantiate::hopthread
	 (body (lambda ()
		  (scheduler-accept-loop sched serv #t '()))))))
   
;*---------------------------------------------------------------------*/
;*    js-create-service ...                                            */
;*---------------------------------------------------------------------*/
(define (js-create-service %this::JsGlobalObject impl path loc register import worker::WorkerHopThread table)
   
   (define (source::bstring impl)
      (if (js-function? impl)
	  (or (js-function-path impl) (pwd))
	  (pwd)))
   
   (define (fix-args len)
      (map (lambda (i)
	      (string->symbol (format "a~a" i)))
	 (iota len)))
   
   (define (service-debug id::symbol impl)
      (lambda (%this)
	 (js-service/debug id loc impl %this)))
   
   (define (js-service-parse-request %this svc req)
      (with-access::http-request req (path abspath)
	 (let ((args (service-parse-request svc req)))
	    (js-obj->jsobject args %this))))
   
   (cond
      ((eq? impl (js-undefined))
       (unless (eq? path (js-undefined))
	  (set! path (js-tostring impl %this))))
      ((not (js-procedure? impl))
       (error "service" "not a procedure" impl)))
   
   (let* ((path (or path (gen-service-url :public #t)))
	  (hoppath (make-hop-url-name path))
	  (src (source impl)))
      (multiple-value-bind (id wid)
	 (service-path->ids path)
	 (letrec* ((svcn (symbol->string! id))
		   (svcp (lambda (this . vals)
			    (with-access::hop-service svc (path)
			       (js-make-hopframe %this this path vals))))
		   (proc (if (js-procedure? impl)
			     (lambda (req . args)
				(js-apply %this impl req args))
			     (lambda (this . args)
				(js-undefined))))
		   (handler (if (>fx (bigloo-debug) 0)
				(lambda (svc req)
				   (js-worker-exec-throws worker svcn
				      (service-debug id
					 (lambda (%this)
					    (service-invoke svc req
					       (js-service-parse-request %this svc req))))))
				(lambda (svc req)
				   (tprint "HANDLER path=" path)
				   (js-worker-exec-throws worker svcn
				      (lambda (%this)
					 (service-invoke svc req
					    (js-service-parse-request %this svc req)))))))
		   (args (if (js-procedure? impl)
			     (fix-args (js-get impl (& "length") %this))
			     '()))
		   (svc (instantiate::hop-service
			   (ctx %this)
			   (proc proc)
			   (handler handler)
			   (javascript "HopService(~s, ~s)")
			   (path hoppath)
			   (id id)
			   (wid wid)
			   (args args)
			   (resource (dirname src))
			   (source src))))
	    (js-make-service %this svcp svcn
	       register import
	       (js-function-arity svcp) worker
	       svc
	       table)))))

;*---------------------------------------------------------------------*/
;*    array->string-list ...                                           */
;*---------------------------------------------------------------------*/
(define (array->string-list arr %this)
   (map! (lambda (v) (js-tostring v %this))
      (vector->list (jsarray->vector arr %this))))

;*---------------------------------------------------------------------*/
;*    array->symbol-list ...                                           */
;*---------------------------------------------------------------------*/
(define (array->symbol-list arr %this)
   (map! string->symbol (array->string-list arr %this)))

