;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/node_modules/hop/lib/_hop.hop       */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Wed May  8 08:38:07 2024                          */
;*    Last change :  Tue May 14 16:18:07 2024 (serrano)                */
;*    Copyright   :  2024 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    HopJs native implementation                                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module __hopjs__hop

   (library http hopscript hop nodejs)

   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    js-function ...                                                  */
;*---------------------------------------------------------------------*/
(define-macro (js-function id name . size)
   `(js-make-function %this ,id
       (js-function-arity ,id)
       (js-function-info :name ,name :len 0)
       :size ,(if (pair? size) (car size) 1)))
   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   (js-export (Service createScheduler
		 createServer createServerSSL
		 isSocketServer socketPortNumber)

      ;; JS export
      (define exports (js-get %module (& "exports") %this))

      ;; scheduler prototype
      (define sched-cmap
	 (js-make-jsconstructmap))
      (define sched-prototype
	 (with-access::JsGlobalObject %this (js-object)
	    (let ((obj (js-new0 %this js-object)))
	       (js-bind! %this obj (& "accept")
		  :value (js-function (lambda (this serv)
					 (with-access::JsWrapper this (obj data)
					    (set! data
					       (accept-thread %this this serv))))
			    "accept")
		  :writable #f
		  :enumerable #t)
	       obj)))

      ;; current worker
      (define worker
	 (with-access::JsGlobalObject %this (worker)
 	    worker))
      
      ;; Service
      (define Service
	 (js-function (lambda (this config)
			 (with-access::WorkerHopThread worker (%loop)
			    ;; add an async object to prevent the loop
			    ;; from terminating
			    (let ((async (instantiate::UvAsync
					    (loop %loop)
					    (cb list))))
			       async))
			 #unspecified)
	    "Service"))

      ;; createScheduler
      (define createScheduler
	 (js-function (lambda (this size)
			 (let ((sched (instantiate::JsWrapper
					 (obj (instantiate::pool-scheduler
						 (size size)
						 (filters '())
						 (keep-alive-timeout (* 30 1000))
						 (accept-timeout (* 10 1000))))
					 (data #unspecified)
					 (cmap sched-cmap))))
			    (js-object-proto-set! sched sched-prototype)
			    sched))
	    "createScheduler"))
      
      ;; createServer
      (define createServer
	 (js-function (lambda (this port name somaxconn)
			 (make-server-socket port
			    :name (and (js-jsstring? name) (js-jsstring->string name))
			    :backlog somaxconn))
	    "createServer"))

      ;; createServerSSL
      (define createServerSSL
	 (js-function (lambda (this port name somaxconn cert key)
			 (make-ssl-server-socket port
			    :name (and (js-jsstring? name) (js-jsstring->string name))
			    :backlog somaxconn
			    :protocol 'tlsv1_2
			    :cert (js-jsstring->string cert)
			    :pkey (js-jsstring->string key)))
	    "createServerSSL"))

      ;; isSocketServer
      (define isSocketServer
	 (js-function (lambda (this o) (socket-server? o))
	    "isSocketServer"))

      ;; socketPortNumber
      (define socketPortNumber
	 (js-function (lambda (this o) (socket-port-number o))
	    "socketPortNumber"))

      #unspecified))

;*---------------------------------------------------------------------*/
;*    accept-thread ...                                                */
;*---------------------------------------------------------------------*/
(define (accept-thread %this sched serv)
   (thread-start!
      (instantiate::hopthread
	 (body (lambda ()
		  (scheduler-accept-loop sched serv #t '()))))))
   
  
