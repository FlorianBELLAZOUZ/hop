/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hop/lib/hop.d.ts       */
/*    -------------------------------------------------------------    */
/*    Author      :  manuel serrano                                    */
/*    Creation    :  Tue Oct 24 09:46:13 2023                          */
/*    Last change :  Wed Mar 27 13:56:04 2024 (serrano)                */
/*    Copyright   :  2023-24 manuel serrano                            */
/*    -------------------------------------------------------------    */
/*    hopc types                                                       */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    Global constants                                                 */
/*---------------------------------------------------------------------*/
export const isServer: boolean;

/*---------------------------------------------------------------------*/
/*    Config                                                           */
/*---------------------------------------------------------------------*/
export interface Config {
   version: string;
   builid: string;
   hostname: string;
   engine: string;
   ports: { http: number | undefined , https: number | undefined };
   configDirectory: string;
   cacheDirectory: string;
   userdb: string | undefined;
   motd: string;
   verbose: number;
   debug: number;
   charset: string;
   security: {
      realm: string;
      serviceAuthentication: boolean
   }
}

/*---------------------------------------------------------------------*/
/*    CommandLineArgs                                                  */
/*---------------------------------------------------------------------*/
export interface CommandLineArgs {
   "config-dir"?: string;
   p?: number;
   "http-port"?: number;
   s?: number;
   "https-port"?: number;
   v?: number;
   userdb?: string;
   q: undefined;
   "config"?: string;
}

/*---------------------------------------------------------------------*/
/*    init ...                                                         */
/*---------------------------------------------------------------------*/
export function init(args?: undefined | CommandLineArgs): Config;

/*---------------------------------------------------------------------*/
/*    parseCommandLine ...                                             */
/*---------------------------------------------------------------------*/
export function parseCommandLine(argv: string[]): CommandLineArgs;

/*---------------------------------------------------------------------*/
/*    config ...                                                       */
/*---------------------------------------------------------------------*/
export function config(): Config;

/*---------------------------------------------------------------------*/
/*    Resolver ...                                                     */
/*---------------------------------------------------------------------*/
export class Resolver {
    constructor(root: string, ...modules: string[]);
    register(file: string): string;
    resolve(mod: string): string;
    path(url: string): string | false;
}

/*---------------------------------------------------------------------*/
/*    Service ...                                                      */
/*---------------------------------------------------------------------*/
export function Service(fun: (...args: any) => any, optOrUrl: any): (...args) => Frame;

/*---------------------------------------------------------------------*/
/*    ServiceImpl ...                                                  */
/*---------------------------------------------------------------------*/
export class ServiceImpl {
    static postResponse(req: any, res: any): void;
    static putResponse(req: any, res: any): void;
    static getResponse(req: any, res: any): void;
    constructor(fun: (...args: any) => any, optOrUrl: any);
    dollar(): string;
}

/*---------------------------------------------------------------------*/
/*    Frame ...                                                        */
/*---------------------------------------------------------------------*/
export class Frame {
   constructor(svc: ServiceImpl, args: any[]);
}

/*---------------------------------------------------------------------*/
/*    ResponseHop                                                      */
/*---------------------------------------------------------------------*/
export interface HTTPResponseHeader {
   connection?: string;
   charset?: string;
   contentLength?: number;
   header?: any;
}
   
/*---------------------------------------------------------------------*/
/*    Response ...                                                     */
/*---------------------------------------------------------------------*/
export class Response {
    constructor(val: any, status?: number, headers?: any);
    hopResponse(req: any, res: any): void;
}
export function HTTPResponseString(str: any, opt?: HTTPResponseHeader): Response;
export function HTTPResponseAuthentication(opt?: HTTPResponseHeader): Response;
export function HTTPResponseFile(path: any, opt?: HTTPResponseHeader): Response;

/*---------------------------------------------------------------------*/
/*    HTML tags                                                        */
/*---------------------------------------------------------------------*/
export declare class XmlElement {
   static attrsToString(attrs: any): string;
   static toResponse(n: any): any;
   constructor(tag: any, attrs: any, nodes: any);
   tag: any;
   attrs: any;
   nodes: any;
   tostring: boolean;
   toString(): boolean;
   toResponse(): boolean;
}

export declare class HtmlElement extends XmlElement {
    mimetype: string;
}

export declare class Tilde extends XmlElement {
}

export interface XmlKeyboardEvents {
   onkeypress?: Tilde;
   onkeydown?: Tilde;
   onkeyup?: Tilde;
}

export interface XmlMouseEvents {
   onclick?: Tilde;
   ondblclick?: Tilde;
   onmousedown?: Tilde;
   onmousemove?: Tilde;
   onmouseout?: Tilde;
   onmouseover?: Tilde;
   onmouseup?: Tilde;
   onmousewheel?: Tilde;
   onwheel?: Tilde;
}

export interface XmlLocation {
   filename: string;
   pos: number;
   name: string;
}

export interface XmlAttrs extends XmlKeyboardEvents, XmlMouseEvents {
   class?: string;
   id?: string;
   [propName: string]: string | Tilde | XmlLocation | Frame;
}
   
export function A(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function ABBR(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function ACRONYM(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function ADDRESS(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function APPLET(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function AREA(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function ARTICLE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function B(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function BASE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function BASEFONT(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function BDI(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function BDO(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function BIG(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function BLOCKQUOTE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function BODY(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function BR(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function BUTTON(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function CANVAS(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function CAPTION(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function CENTER(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function CITE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function CODE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function COL(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function COLGROUP(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function DATALIST(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function DD(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function DEL(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function DETAILS(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function DFN(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function DIR(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function DIV(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function DL(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function DT(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function EM(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function EMBED(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function FIELDSET(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function FIGURE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function FIGCAPTION(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function FONT(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function FOOTER(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function FORM(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function FRAME(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function FRAMESET(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function H1(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function H2(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function H3(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function H4(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function H5(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function H6(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function HEAD(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function HEADER(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function HGROUP(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function HR(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function I(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function IFRAME(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function IMG(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function INPUT(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function INS(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function ISINDEX(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function KBD(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function LABEL(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function LEGEND(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function LI(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function LINK(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function MAIN(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function MAP(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function MARQUEE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function MENU(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function MENUITEM(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function META(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function METER(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function NAV(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function NOFRAMES(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function NOSCRIPT(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function OBJECT(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function OL(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function OPTGROUP(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function OPTION(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function P(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function PARAM(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function PRE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function PROGRESS(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function Q(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function S(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function SAMP(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function SCRIPT(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function SECTION(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function SELECT(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function SMALL(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function SOURCE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function SPAN(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function STRIKE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function STRONG(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function STYLE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function SUB(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function SUMMARY(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function SUP(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function TABLE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function TBODY(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function TD(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function TEXTAREA(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function TFOOT(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function TH(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function THEAD(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function TIME(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function TITLE(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function TR(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function TRACK(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function TT(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function U(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function UL(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;
export function VAR(attrs: XmlAttrs, ...nodes: any[]): HTMLElement;

export function HTML(attrs: XmlAttrs, ...nodes: any[]): HtmlElement;
export function TILDE(attrs: XmlAttrs, ...nodes: any[]): Tilde;
export function DOLLAR(expr: any, loc: any): any;

type Svg = (attrs: XmlAttrs, ...nodes: any[]) => HTMLElement
   | {
      IMG: (attrs: XmlAttrs, ...nodes: any[]) => HTMLElement;
   };
   
export const SVG: Svg;
