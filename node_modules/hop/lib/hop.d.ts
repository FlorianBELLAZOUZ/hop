/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hop/lib/hop.d.ts       */
/*    -------------------------------------------------------------    */
/*    Author      :  manuel serrano                                    */
/*    Creation    :  Tue Oct 24 09:46:13 2023                          */
/*    Last change :  Wed Feb 21 14:12:58 2024 (serrano)                */
/*    Copyright   :  2023-24 manuel serrano                            */
/*    -------------------------------------------------------------    */
/*    hopc types                                                       */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    Global constants                                                 */
/*---------------------------------------------------------------------*/
export const isServer: boolean;

/*---------------------------------------------------------------------*/
/*    Config                                                           */
/*---------------------------------------------------------------------*/
export interface Config {
   version: string;
   builid: string;
   hostname: string;
   engine: string;
   ports: { http: number | undefined , https: number | undefined };
   configdir: string;
   userdb: string | undefined;
   motd: string;
   verbose: number;
   security: {
      realm: string;
      serviceAuthentication: boolean
   }
}

/*---------------------------------------------------------------------*/
/*    CommandLineArgs                                                  */
/*---------------------------------------------------------------------*/
export interface CommandLineArgs {
   "config-dir"?: string;
   p?: number;
   "http-port"?: number;
   s?: number;
   "https-port"?: number;
   v?: number;
   userdb?: string;
   q: undefined;
   "config"?: string;
}

/*---------------------------------------------------------------------*/
/*    init ...                                                         */
/*---------------------------------------------------------------------*/
export function init(args?: undefined | CommandLineArgs): Config;

/*---------------------------------------------------------------------*/
/*    parseCommandLine ...                                             */
/*---------------------------------------------------------------------*/
export function parseCommandLine(argv: string[]): CommandLineArgs;

/*---------------------------------------------------------------------*/
/*    config ...                                                       */
/*---------------------------------------------------------------------*/
export function config(): Config;

/*---------------------------------------------------------------------*/
/*    Resolver ...                                                     */
/*---------------------------------------------------------------------*/
export class Resolver {
    constructor(root: string, ...modules: string[]);
    register(specifier: any, parentURL?: string): void;
    resolve(mod: string): string;
}

/*---------------------------------------------------------------------*/
/*    Service ...                                                      */
/*---------------------------------------------------------------------*/
export class Service {
    static postResponse(req: any, res: any): void;
    static putResponse(req: any, res: any): void;
    static getResponse(req: any, res: any): void;
    constructor(fun: (...args: any) => any, optOrUrl: any);
    dollar(): string;
}

/*---------------------------------------------------------------------*/
/*    Response ...                                                     */
/*---------------------------------------------------------------------*/
export class Response {
    constructor(val: any, status?: number, headers?: any);
    hopResponse(req: any, res: any): void;
}
export function HTTPResponseString(str: any): Response;
export function HTTPResponseAuthentication(): Response;
export function HTTPResponseFile(path: any): Response;

/*---------------------------------------------------------------------*/
/*    HTML tags                                                        */
/*---------------------------------------------------------------------*/
declare class XmlElement {
    static attrsToString(attrs: any): string;
    static toResponse(n: any): any;
    constructor(tag: any, attrs: any, nodes: any);
    tag: any;
    attrs: any;
    nodes: any;
    tostring: boolean;
    toString(): boolean;
    toResponse(): boolean;
}
declare class HtmlElement extends XmlElement {
    mimetype: string;
}
declare class Tilde extends XmlElement {
}
export function A(attrs: any, ...nodes: any[]): XmlElement;
export function ABBR(attrs: any, ...nodes: any[]): XmlElement;
export function ACRONYM(attrs: any, ...nodes: any[]): XmlElement;
export function ADDRESS(attrs: any, ...nodes: any[]): XmlElement;
export function APPLET(attrs: any, ...nodes: any[]): XmlElement;
export function AREA(attrs: any, ...nodes: any[]): XmlElement;
export function ARTICLE(attrs: any, ...nodes: any[]): XmlElement;
export function B(attrs: any, ...nodes: any[]): XmlElement;
export function BASE(attrs: any, ...nodes: any[]): XmlElement;
export function BASEFONT(attrs: any, ...nodes: any[]): XmlElement;
export function BDI(attrs: any, ...nodes: any[]): XmlElement;
export function BDO(attrs: any, ...nodes: any[]): XmlElement;
export function BIG(attrs: any, ...nodes: any[]): XmlElement;
export function BLOCKQUOTE(attrs: any, ...nodes: any[]): XmlElement;
export function BODY(attrs: any, ...nodes: any[]): XmlElement;
export function BR(attrs: any, ...nodes: any[]): XmlElement;
export function BUTTON(attrs: any, ...nodes: any[]): XmlElement;
export function CANVAS(attrs: any, ...nodes: any[]): XmlElement;
export function CAPTION(attrs: any, ...nodes: any[]): XmlElement;
export function CENTER(attrs: any, ...nodes: any[]): XmlElement;
export function CITE(attrs: any, ...nodes: any[]): XmlElement;
export function CODE(attrs: any, ...nodes: any[]): XmlElement;
export function COL(attrs: any, ...nodes: any[]): XmlElement;
export function COLGROUP(attrs: any, ...nodes: any[]): XmlElement;
export function DATALIST(attrs: any, ...nodes: any[]): XmlElement;
export function DD(attrs: any, ...nodes: any[]): XmlElement;
export function DEL(attrs: any, ...nodes: any[]): XmlElement;
export function DETAILS(attrs: any, ...nodes: any[]): XmlElement;
export function DFN(attrs: any, ...nodes: any[]): XmlElement;
export function DIR(attrs: any, ...nodes: any[]): XmlElement;
export function DIV(attrs: any, ...nodes: any[]): XmlElement;
export function DL(attrs: any, ...nodes: any[]): XmlElement;
export function DT(attrs: any, ...nodes: any[]): XmlElement;
export function EM(attrs: any, ...nodes: any[]): XmlElement;
export function EMBED(attrs: any, ...nodes: any[]): XmlElement;
export function FIELDSET(attrs: any, ...nodes: any[]): XmlElement;
export function FIGURE(attrs: any, ...nodes: any[]): XmlElement;
export function FIGCAPTION(attrs: any, ...nodes: any[]): XmlElement;
export function FONT(attrs: any, ...nodes: any[]): XmlElement;
export function FOOTER(attrs: any, ...nodes: any[]): XmlElement;
export function FORM(attrs: any, ...nodes: any[]): XmlElement;
export function FRAME(attrs: any, ...nodes: any[]): XmlElement;
export function FRAMESET(attrs: any, ...nodes: any[]): XmlElement;
export function H1(attrs: any, ...nodes: any[]): XmlElement;
export function H2(attrs: any, ...nodes: any[]): XmlElement;
export function H3(attrs: any, ...nodes: any[]): XmlElement;
export function H4(attrs: any, ...nodes: any[]): XmlElement;
export function H5(attrs: any, ...nodes: any[]): XmlElement;
export function H6(attrs: any, ...nodes: any[]): XmlElement;
export function HEAD(attrs: any, ...nodes: any[]): XmlElement;
export function HEADER(attrs: any, ...nodes: any[]): XmlElement;
export function HGROUP(attrs: any, ...nodes: any[]): XmlElement;
export function HR(attrs: any, ...nodes: any[]): XmlElement;
export function I(attrs: any, ...nodes: any[]): XmlElement;
export function IFRAME(attrs: any, ...nodes: any[]): XmlElement;
export function INPUT(attrs: any, ...nodes: any[]): XmlElement;
export function INS(attrs: any, ...nodes: any[]): XmlElement;
export function ISINDEX(attrs: any, ...nodes: any[]): XmlElement;
export function KBD(attrs: any, ...nodes: any[]): XmlElement;
export function LABEL(attrs: any, ...nodes: any[]): XmlElement;
export function LEGEND(attrs: any, ...nodes: any[]): XmlElement;
export function LI(attrs: any, ...nodes: any[]): XmlElement;
export function LINK(attrs: any, ...nodes: any[]): XmlElement;
export function MAIN(attrs: any, ...nodes: any[]): XmlElement;
export function MAP(attrs: any, ...nodes: any[]): XmlElement;
export function MARQUEE(attrs: any, ...nodes: any[]): XmlElement;
export function MENU(attrs: any, ...nodes: any[]): XmlElement;
export function MENUITEM(attrs: any, ...nodes: any[]): XmlElement;
export function META(attrs: any, ...nodes: any[]): XmlElement;
export function METER(attrs: any, ...nodes: any[]): XmlElement;
export function NAV(attrs: any, ...nodes: any[]): XmlElement;
export function NOFRAMES(attrs: any, ...nodes: any[]): XmlElement;
export function NOSCRIPT(attrs: any, ...nodes: any[]): XmlElement;
export function OBJECT(attrs: any, ...nodes: any[]): XmlElement;
export function OL(attrs: any, ...nodes: any[]): XmlElement;
export function OPTGROUP(attrs: any, ...nodes: any[]): XmlElement;
export function OPTION(attrs: any, ...nodes: any[]): XmlElement;
export function P(attrs: any, ...nodes: any[]): XmlElement;
export function PARAM(attrs: any, ...nodes: any[]): XmlElement;
export function PRE(attrs: any, ...nodes: any[]): XmlElement;
export function PROGRESS(attrs: any, ...nodes: any[]): XmlElement;
export function Q(attrs: any, ...nodes: any[]): XmlElement;
export function S(attrs: any, ...nodes: any[]): XmlElement;
export function SAMP(attrs: any, ...nodes: any[]): XmlElement;
export function SCRIPT(attrs: any, ...nodes: any[]): XmlElement;
export function SECTION(attrs: any, ...nodes: any[]): XmlElement;
export function SELECT(attrs: any, ...nodes: any[]): XmlElement;
export function SMALL(attrs: any, ...nodes: any[]): XmlElement;
export function SOURCE(attrs: any, ...nodes: any[]): XmlElement;
export function SPAN(attrs: any, ...nodes: any[]): XmlElement;
export function STRIKE(attrs: any, ...nodes: any[]): XmlElement;
export function STRONG(attrs: any, ...nodes: any[]): XmlElement;
export function STYLE(attrs: any, ...nodes: any[]): XmlElement;
export function SUB(attrs: any, ...nodes: any[]): XmlElement;
export function SUMMARY(attrs: any, ...nodes: any[]): XmlElement;
export function SUP(attrs: any, ...nodes: any[]): XmlElement;
export function TABLE(attrs: any, ...nodes: any[]): XmlElement;
export function TBODY(attrs: any, ...nodes: any[]): XmlElement;
export function TD(attrs: any, ...nodes: any[]): XmlElement;
export function TEXTAREA(attrs: any, ...nodes: any[]): XmlElement;
export function TFOOT(attrs: any, ...nodes: any[]): XmlElement;
export function TH(attrs: any, ...nodes: any[]): XmlElement;
export function THEAD(attrs: any, ...nodes: any[]): XmlElement;
export function TIME(attrs: any, ...nodes: any[]): XmlElement;
export function TITLE(attrs: any, ...nodes: any[]): XmlElement;
export function TR(attrs: any, ...nodes: any[]): XmlElement;
export function TRACK(attrs: any, ...nodes: any[]): XmlElement;
export function TT(attrs: any, ...nodes: any[]): XmlElement;
export function U(attrs: any, ...nodes: any[]): XmlElement;
export function UL(attrs: any, ...nodes: any[]): XmlElement;
export function VAR(attrs: any, ...nodes: any[]): XmlElement;
export function HTML(attrs: any, ...nodes: any[]): HtmlElement;
export function TILDE(attrs: any, ...nodes: any[]): Tilde;
export function DOLLAR(expr: any): any;
