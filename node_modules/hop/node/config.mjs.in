// -*- Mode: typescript -*-
/*=====================================================================*/
/*    .../prgm/project/hop/hop/node_modules/hop/node/config.mjs.in     */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Wed Jan 31 13:57:37 2024                          */
/*    Last change :  Wed Mar 20 09:45:02 2024 (serrano)                */
/*    Copyright   :  2024 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Default configuration                                            */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    import                                                           */
/*---------------------------------------------------------------------*/
import { createRequire } from 'node:module';
import { existsSync, readFileSync } from "node:fs";
import * as path from  "node:path";
import * as os from "node:os";

export { config, init, parseCommandLine };

/*---------------------------------------------------------------------*/
/*    Dynamique require                                                */
/*---------------------------------------------------------------------*/
const minimist = createRequire(import.meta.url)("../../../minimist");

/*---------------------------------------------------------------------*/
/*    defaultConfig ...                                                */
/*---------------------------------------------------------------------*/
const defaultConfig = {
   version: "@VERSION@",
   buildid: "@BUILDTAG@",
   hostname: os.hostname(),
   engine: process.features.hop ? "hop" : "node",
   ports: { http: 8888, https: -1 },
   configDirectory: path.join(process.env.HOME, ".config", "hop"),
   cacheDirectory: path.join(process.env.HOME, ".config", "hop", "cache"),
   userdb: path.join(process.env.HOME, ".config", "hop", "users.json"),
   motd: "",
   verbose: 1,
   debug: 0,
   charset: "utf8",
   security: {
      "realm": "hop",
      "serviceAuthentication": true
   },
   credentials: {
      "key": path.join(process.cwd(), "key.pem"),
      "cert": path.join(process.cwd(), "key.pem")
   }
}

/*---------------------------------------------------------------------*/
/*    config ...                                                       */
/*---------------------------------------------------------------------*/
const config = {};

/*---------------------------------------------------------------------*/
/*    loadConfig ...                                                   */
/*    -------------------------------------------------------------    */
/*    The performance of this function is not critical.                */
/*---------------------------------------------------------------------*/
function loadConfig(file) {
   
   function expandShellEnvVar(v) {
      if (typeof v === "string") {
	 const m = v.match(/[$]([_a-zA-Z][_a-zA-Z0-9]*)/g);

	 if (m) {
	    m.forEach(s => v = v.replace(s, process.env[s.substring(1)] || ""));
	 }
	 return v;
      } else {
	 return v;
      }
   }

   function warning(k, cfg) {
      console.error(`warning: ignoring unknown configuration property "${k}=${cfg[k]}"`);
   }

   if (existsSync(file)) {
      try {
	 const cfg = JSON.parse(readFileSync(file));

	 // don't use Object.assign because loadConfig is only
	 // allowed to set properties, not to create new ones
	 for (let k in cfg) {
	    switch (k) {
	       case "//":
	       case "__":
		  break;

	       case "include":
		  cfg.include.forEach(f => {
		     loadConfig(path.join(path.dirname(file), expandShellEnvVar(f)));
		  });
		  break;

	       case "security":
		  for (let k in cfg.security) {
		     if (k in config.security) {
			config.security[k] = expandShellEnvVar(cfg.security[k]);
		     } else {
			warning(k, cfg);
		     }
		  }
		  break;

	       case "ports":
		  for (let k in cfg.ports) {
		     if (k in config.ports) {
			config.ports[k] = expandShellEnvVar(cfg.ports[k]);
		     } else {
			warning(k, cfg);
		     }
		  }
		  break;

	       default:
		  if (k in config) {
		     config[k] = expandShellEnvVar(cfg[k]);
		  } else {
		     warning(k, cfg);
		  }
	    }
	 }
      } catch (e) {
	 throw e;
      }
   }
}

/*---------------------------------------------------------------------*/
/*    loadConfigDir ...                                                */
/*---------------------------------------------------------------------*/
function loadConfigDir(dir) {
   const port = config.ports.http;
   const engine = config.engine;

   // base config file
   loadConfig(path.join(dir, "config.json"));

   // engine-base config file
   loadConfig(path.join(dir, `config.${engine}.json`));

   // per-engine config file 
   loadConfig(path.join(dir, `config.${port}.json`));
}

/*---------------------------------------------------------------------*/
/*    init ...                                                         */
/*---------------------------------------------------------------------*/
function init(args = undefined) {
   if (!Object.isFrozen(config)) {
      // default arguments
      if (!args) args = parseCommandLine(process.argv);
   
      // default configuration
      Object.assign(config, defaultConfig);
      
      if (args["config-directory"]) config.configDirectory = args["config-directory"];
      if (args["cache-directory"]) config.cacheDirectory = args["cache-directory"];
      if (args["p"] || args["http-port"]) config.ports.http = (args["p"] || args["http-port"]);
      if ("v" in args) config.verbose = ~~args.v;
      if ("g" in args) config.debug = ~~args.g;
      if ("userdb" in args) config.userdb = args.userdb;

      // config file
      if (!args.q) {
	 if ("config" in args) {
	    loadConfig(args.config);
	 } else {
	    loadConfigDir(config.configDirectory);
	    loadConfigDir(path.join(config.configDirectory, config.hostname));
	 }
      }

      // freeze the configuration
      Object.freeze(config.ports);
      Object.freeze(config.security);
      Object.freeze(config);
   }
   return config;
}

/*---------------------------------------------------------------------*/
/*    parseCommandLine ...                                             */
/*---------------------------------------------------------------------*/
function parseCommandLine(argv) {
   
   function help() {
      console.log("hop v" + version);
      console.log("usage: hop [options] ...");
      console.log("");
      console.log("Options:");
      console.log("  -h|--help              This message");
      console.log("  -p|--http-port PORT    HTTP port number");
      console.log("  -s|--https-port PORT   HTTPS port number");
      console.log("  -q                     Do not load any config file");
      console.log("  -vLevel                Verbosity level");
      console.log("  -gLevel                Debug level");
      console.log("  --config FILE          Load an alternate config file");
      console.log("  --config-directory DIR Set config directory");
      console.log("  --cache-directory DIR  Set cache directory");
      console.log("  --userdb FILE          Set user database name");
      console.log("");
      console.log("Default configuration:");
      console.log(`  - config-directory: ${config.configDirectory}`);
      console.log(`  - cache-directory: ${config.cacheDirectory}`);
      console.log(`  - http-port: ${config.ports.http}`);
      console.log(`  - https-port: ${config.ports.https}`);
      console.log(`  - userdb: ${config.userdb}`);
      
      process.exit(0);
   }

   // command line parsing
   const args = minimist(argv.slice(2), { names: ["v"] });

   if (args.h || args.help) {
      help();
   }

   return args;
}
