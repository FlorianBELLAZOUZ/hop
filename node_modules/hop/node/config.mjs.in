// -*- Mode: typescript -*-
/*=====================================================================*/
/*    .../project/hop/3.7.x/node_modules/hop/node/config.mjs.in        */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Wed Jan 31 13:57:37 2024                          */
/*    Last change :  Mon Feb  5 10:15:42 2024 (serrano)                */
/*    Copyright   :  2024 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Default configuration                                            */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    import                                                           */
/*---------------------------------------------------------------------*/
import { createRequire } from 'node:module';
import { existsSync, readFileSync } from "node:fs";
import * as path from  "node:path";
import * as os from "node:os";
import { format } from "node:util";

/*---------------------------------------------------------------------*/
/*    Dynamique require                                                */
/*---------------------------------------------------------------------*/
const minimist = createRequire(import.meta.url)("../../../minimist");

/*---------------------------------------------------------------------*/
/*    defaultConfig ...                                                */
/*---------------------------------------------------------------------*/
const defaultConfig = {
   version: "@VERSION@",
   buildid: "@BUILDTAG@",
   hostname: os.hostname(),
   engine: "node",
   ports: { http: 8888, https: 143 },
   configdir: path.join(process.env.HOME, ".config", "hop"),
   userdb: path.join(process.env.HOME, ".config", "hop", "user", "users.json"),
   motd: "",
   security: {
      "realm": "hop",
      "serviceAuthentication": true
   }
}

/*---------------------------------------------------------------------*/
/*    config ...                                                       */
/*---------------------------------------------------------------------*/
export const config = {};

/*---------------------------------------------------------------------*/
/*    loadConfig ...                                                   */
/*---------------------------------------------------------------------*/
function loadConfig(file) {
   if (existsSync(file)) {
      try {
	 const cfg = JSON.parse(readFileSync(file));
	 let includes = [];
	 let security = {};

	 delete cfg["//"];
	 delete cfg["__"];

	 if ("include" in cfg) {
	    includes = cfg.include;
	    delete cfg["include"];
	 }

	 if ("security" in cfg) {
	    security = cfg.security;
	    delete cfg["security"];
	 }
	 
	 Object.assign(config, cfg);
	 Object.assign(config.security, security);

	 includes.forEach(f => {
	    const subconfig = loadConfig(path.join(path.dirname(file), f));
	 });

      } catch (e) {
	 throw e;
      }
   }
}

/*---------------------------------------------------------------------*/
/*    loadConfigDir ...                                                */
/*---------------------------------------------------------------------*/
function loadConfigDir(dir) {
   // base config file
   loadConfig(path.join(dir, "config.json"));

   // engine-base config file
   loadConfig(path.join(dir, `config.${config.engine}.json`));

   // per-engine config file 
   loadConfig(path.join(dir, `config.${config.ports.http}.json`));
}

/*---------------------------------------------------------------------*/
/*    main ...                                                         */
/*---------------------------------------------------------------------*/
function main() {
   
   function help() {
      console.log("hop v" + version);
      console.log("usage: hop [options] ...");
      console.log("");
      console.log("Options:");
      console.log("  -h|--help             This message");
      console.log("  -p|--http-port PORT   HTTP port number");
      console.log("  -q                    Do not load any config file");
      console.log("  -q                    Do not load any config file");
      console.log("  -vLevel               Do not load any config file");
      console.log("  --config FILE         Load an alternate config file");
      console.log("  --config-dir DIR      Set config directory");
      console.log("  --userdb FILE         Set user database name");
      console.log("");
      console.log("Default configuration:");
      console.log(`  - config-dir: ${config.configdir}`);
      console.log(`  - http-port: ${config.ports.http}`);
      console.log(`  - https-port: ${config.ports.https}`);
      console.log(`  - userdb: ${config.userdb}`);
      
      process.exit(0);
   }

   // default configuration
   Object.assign(config, defaultConfig);
   
   // command line parsing
   const argv = process.argv.slice(2);
   const args = minimist(argv, { names: ["v"] });

   if (args.h || args.help) {
      help();
   }

   if (args["config-dir"]) config.configdir = args["config-dir"];
   if (args["p"] || args["http-port"]) config.ports.http = (args["p"] || args["http-port"]);
   
   // config file
   if (!args.q) {
      loadConfigDir(config.configdir);
      loadConfigDir(path.join(config.configdir, config.hostname));
   }

   // freeze the configuration
   Object.freeze(config.ports);
   Object.freeze(config.security);
   Object.freeze(config);

   // motd
   if (config.motd && !args.v || args.v > 0) {
      console.log(format(config.motd, config.ports.http, config.ports.https));
   }
}

main();
