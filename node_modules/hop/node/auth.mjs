/*=====================================================================*/
/*    .../prgm/project/hop/3.7.x/node_modules/hop/node/auth.mjs        */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Mon Feb  5 18:06:12 2024                          */
/*    Last change :  Wed Feb  7 12:53:38 2024 (serrano)                */
/*    Copyright   :  2024 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    authentication and users                                         */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    Import/Export                                                    */
/*---------------------------------------------------------------------*/
import { config } from "./config.mjs";
import { existsSync, readFileSync } from "node:fs";
import * as path from  "node:path";

/*---------------------------------------------------------------------*/
/*    usersMap ...                                                     */
/*---------------------------------------------------------------------*/
const usersMap = new Map();
const userAnonymous = { services: [], directories: [] };

/*---------------------------------------------------------------------*/
/*    digestPrivateKey ...                                             */
/*---------------------------------------------------------------------*/
const digestSession = Date.now() >> 2;
const digestPrivateKey = (Math.random() * 10000000 | Date.now()) + "";
const digestOpaque = `${config.hostname}:${config.ports.http}:${digestSession}`;

/*---------------------------------------------------------------------*/
/*    WWWAuthenticate ...                                              */
/*---------------------------------------------------------------------*/
export function WWWAuthenticate() {
   const nonce = Buffer.from(Date.now() + digestPrivateKey).toString('base64');
   const auth = `Digest realm="${config.security.realm}", qop=\"auth\", nonce="${nonce}", opaque="${digestOpaque}"`;
   return { "WWW-Authenticate": auth, "hop-session": digestSession }
}

/*---------------------------------------------------------------------*/
/*    parseDigest ...                                                  */
/*    -------------------------------------------------------------    */
/*    This function parses strings such as:                            */
/*      'Digest username="foo", realm="hop", nonce="MTc" ...'          */
/*---------------------------------------------------------------------*/
function parseDigest(s) {
   const rxName = /([a-zA-Z]+)=/y;
   const rxString = /"([^"]*)"/y;
   const rxValue = /[^", ][^, ]*/y;
   const rxSep = /,?[ ]+/y;
   const obj = {};
   let n;
   let v;
   
   rxName.lastIndex = 7;   
   while (n = s.match(rxName)) {
      rxString.lastIndex = rxName.lastIndex;
      if (v = s.match(rxString)) {
	 obj[n[1]] = v[1];
	 rxSep.lastIndex = rxString.lastIndex;
      } else {
	 rxValue.lastIndex = rxName.lastIndex;
	 if (v = s.match(rxValue)) {
	    obj[n[1]] = v[0];
	    rxSep.lastIndex = rxValue.lastIndex;
	 } else {
	    return false;
	 }
      }
      if (!s.match(rxSep)) {
	 return obj;
      } else {
	 rxName.lastIndex = rxSep.lastIndex;
      }
   }

   return obj;
}

/*---------------------------------------------------------------------*/
/*    authenticationDigest ...                                         */
/*---------------------------------------------------------------------*/
function authenticationDigest(req, digest) {
   const u = usersMap.get(digest.username);

   if (u && u.opaque === digestOpaque && u.real === config.security.realm) {
      console.log("p=", u.response);
   } else {
      return false;
   }
}

/*---------------------------------------------------------------------*/
/*    authentication ...                                               */
/*---------------------------------------------------------------------*/
function authentication(req) {
   let auth;
   let match;
   
   if (auth = req.get("authorization")) {
      if (match = auth.match(/^Digest /)) {
	 authenticationDigest(req, parseDigest(auth));
      } else if (auth.match(/^Basic ([^ :\t\r\n]*)/)) {
	 console.log("authentication basic=", auth);
	 console.log(match);
      } else {
	 console.log("authentication no match=", auth);
	 return userAnonymous;
      }
   }
   return userAnonymous;
}

/*---------------------------------------------------------------------*/
/*    authorizedService ...                                            */
/*    -------------------------------------------------------------    */
/*    Is service at URL authorized for this request?                   */
/*---------------------------------------------------------------------*/
export function authorizedService(req, url) {
   if (!config.security.serviceAuthentication) {
      return true;
   } else {
      const user = authentication(req);

      return user.services === "*" || user.services.indexOf(url) >= 0;
   }
}

/*---------------------------------------------------------------------*/
/*    loadUserConfiguration ...                                        */
/*    -------------------------------------------------------------    */
/*    Executed _after_ config.mjs has been loaded.                     */
/*    -------------------------------------------------------------    */
/*    Performance does not matter.                                     */
/*---------------------------------------------------------------------*/
function loadUserConfiguration() {

   function starOrStringArray(v) {
      return (v === "*" || (Array.isArray(v) && v.every(s => typeof s === "string")));
   }
   
   function checkUser(u) {
      for (let k in u) {
	 switch (k) {
	    case "name":
	       if (typeof u[k] !== "string") {
		  console.error(`warning: wrong user ${k} "${u.name}"`);
		  return false;
	       } else if (usersMap.has(u.name)) {
		  console.error(`warning: user redefinition "${u.name}"`);
		  return false;
	       }
	       break;
	       
	    case "password":
	       if (typeof u[k] !== "string") {
		  console.error(`warning: wrong user ${k} "${u.name}"`);
		  return false;
	       }
	       break;
	       
	    case "services":
	    case "directories":
	       if (!starOrStringArray(u[k])) {
		  console.error(`warning: wrong ${k} "${u[k]}"`);
		  return false;
	       }
	       break;

	    default:
	       console.error(`warning: unknown user propperty "${k}"`);
	       return false;
	 }
      }
      return true;
   }
	       
   if (!existsSync(config.userdb)) {
      console.error(`warning: userdb does not exists "${config.userdb}"`);
   } else {
      const users = JSON.parse(readFileSync(config.userdb));

      users.forEach(u => {
	 if (checkUser(u)) {
	    usersMap.set(u.name, u);
	    if (u.name === "anonymous") {
	       Object.assign(userAnonymous, u);
	    }	       
	 }
      });
   }
}

loadUserConfiguration();

