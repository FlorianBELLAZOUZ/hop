/*=====================================================================*/
/*    .../project/hop/3.7.x/node_modules/hop/node/ts-compiler.mjs      */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Tue Feb 13 09:30:38 2024                          */
/*    Last change :  Tue Feb 13 10:42:38 2024 (serrano)                */
/*    Copyright   :  2024 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Simple typescript compiler                                       */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    module                                                           */
/*---------------------------------------------------------------------*/
import * as ts from "typescript";
import * as path from "node:path";

export { compile };

/*---------------------------------------------------------------------*/
/*    global options                                                   */
/*---------------------------------------------------------------------*/
const HOPMODULESDIR = import.meta.url.replace(/^file:\/\//, "");

/*---------------------------------------------------------------------*/
/*    compile ...                                                      */
/*---------------------------------------------------------------------*/
async function compile(source) {
   try {
      const ts = (await import("typescript")).default;

      const options = {
	 pretty: false,
	 allowJS: true,
	 target: ts.ScriptTarget.ES2020,
	 module: ts.ModuleKind.ES2020,
	 autorequire: true,
	 moduleResolution: ts.ModuleResolutionKind.NodeJs,
	 pretty: false,
	 experimentalDecorators: true,
	 allowSyntheticDefaultImports: true,
	 sourceMap: true,
	 paths: {
	    "hop": [path.join(HOPMODULESDIR,"@types/hop.d.ts")],
	    "hop:*": [path.join(HOPMODULESDIR,"*")],
	    "@hop/*": [path.join(HOPMODULESDIR + "/@hop","*")]
	 }
      };

      const program = ts.createProgram([source], options);

      const emitResult = program.emit();

      const allDiagnostics = ts
	 .getPreEmitDiagnostics(program)
	 .concat(emitResult.diagnostics);

      allDiagnostics.forEach(diagnostic => {
	 if (diagnostic.file) {
	    let { line, character } = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start);
	    let message = ts.flattenDiagnosticMessageText(diagnostic.messageText, "\n");
	    console.log(`${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);
	 } else {
	    console.log(ts.flattenDiagnosticMessageText(diagnostic.messageText, "\n"));
	 }
      });
      if (emitResult.emitSkipped) {
	 return false;
      } else {
	 return source.replace(/\.ts$/, ".js");
      }
   } catch(e) {
      console.error("e=", e);
      return false;
   }
}
