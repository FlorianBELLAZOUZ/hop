/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hop/node/html.mjs      */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Fri Jan 19 15:55:58 2024                          */
/*    Last change :  Tue Mar 19 14:31:32 2024 (serrano)                */
/*    Copyright   :  2024 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    HTML implementation                                              */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    XmlElement ...                                                   */
/*---------------------------------------------------------------------*/
/* @sealed */
class XmlElement {
   tag;
   attrs;
   nodes;
   tostring  = false;

   constructor(tag, attrs, nodes) {
      this.tag = tag;
      this.attrs = attrs;
      this.nodes = nodes;
   }

   static attrsToString(attrs) {
      return Object.keys(attrs)
	 .map(k => `${k}="${attrs[k].toString()}"`).join(" ");
   }
   
   toString() {
      if (!this.tostring) {
	 this.tostring = "<" + this.tag
	    + (this.attrs ? " " + XmlElement.attrsToString(this.attrs) + ">" : ">")
	    + this.nodes.flatMap(XmlElement.toResponse).join("")
	    + "</" + this.tag + ">";
      }
      return this.tostring;
   }

   toResponse() {
      return this.toString();
   }

   static toResponse(n) {
      if (!(n instanceof Object)) {
	 return n.toString();
      } else if ("toResponse" in n) {
	 return n.toResponse();
      } else if (Array.isArray(n)) {
	 return n.flatMap(XmlElement.toResponse).join("");
      } else {
	 return n.toString();
      }
   }
}

/*---------------------------------------------------------------------*/
/*    Tilde ...                                                        */
/*---------------------------------------------------------------------*/
/* @sealed */
class Tilde extends XmlElement {
   toString() {
      if (!this.tostring) {
	 this.tostring = this.nodes.flatMap(n => n.toString()).join("");
      }
      return this.tostring;
   }
}

/*---------------------------------------------------------------------*/
/*    HtmlElement ...                                                  */
/*---------------------------------------------------------------------*/
/* @sealed */
class HtmlElement extends XmlElement {
   mimetype = "text/html";
}

/*---------------------------------------------------------------------*/
/*    HTML tags ...                                                    */
/*---------------------------------------------------------------------*/
export function A(attrs, ...nodes) {
   return new XmlElement("a", attrs, nodes);
}

export function ABBR(attrs, ...nodes) {
   return new XmlElement("abbr", attrs, nodes);
}

export function ACRONYM(attrs, ...nodes) {
   return new XmlElement("acronym", attrs, nodes);
}

export function ADDRESS(attrs, ...nodes) {
   return new XmlElement("address", attrs, nodes);
}

export function APPLET(attrs, ...nodes) {
   return new XmlElement("applet", attrs, nodes);
}

export function AREA(attrs, ...nodes) {
   return new XmlElement("area", attrs, nodes);
}

export function ARTICLE(attrs, ...nodes) {
   return new XmlElement("article", attrs, nodes);
}

export function B(attrs, ...nodes) {
   return new XmlElement("b", attrs, nodes);
}

export function BASE(attrs, ...nodes) {
   return new XmlElement("base", attrs, nodes);
}

export function BASEFONT(attrs, ...nodes) {
   return new XmlElement("basefont", attrs, nodes);
}

export function BDI(attrs, ...nodes) {
   return new XmlElement("bdi", attrs, nodes);
}

export function BDO(attrs, ...nodes) {
   return new XmlElement("bdo", attrs, nodes);
}

export function BIG(attrs, ...nodes) {
   return new XmlElement("big", attrs, nodes);
}

export function BLOCKQUOTE(attrs, ...nodes) {
   return new XmlElement("blockquote", attrs, nodes);
}

export function BODY(attrs, ...nodes) {
   return new XmlElement("body", attrs, nodes);
}

export function BR(attrs, ...nodes) {
   return new XmlElement("br", attrs, nodes);
}

export function BUTTON(attrs, ...nodes) {
   return new XmlElement("button", attrs, nodes);
}

export function CANVAS(attrs, ...nodes) {
   return new XmlElement("canvas", attrs, nodes);
}

export function CAPTION(attrs, ...nodes) {
   return new XmlElement("caption", attrs, nodes);
}

export function CENTER(attrs, ...nodes) {
   return new XmlElement("center", attrs, nodes);
}

export function CITE(attrs, ...nodes) {
   return new XmlElement("cite", attrs, nodes);
}

export function CODE(attrs, ...nodes) {
   return new XmlElement("code", attrs, nodes);
}

export function COL(attrs, ...nodes) {
   return new XmlElement("col", attrs, nodes);
}

export function COLGROUP(attrs, ...nodes) {
   return new XmlElement("colgroup", attrs, nodes);
}

export function DATALIST(attrs, ...nodes) {
   return new XmlElement("datalist", attrs, nodes);
}

export function DD(attrs, ...nodes) {
   return new XmlElement("dd", attrs, nodes);
}

export function DEL(attrs, ...nodes) {
   return new XmlElement("del", attrs, nodes);
}

export function DETAILS(attrs, ...nodes) {
   return new XmlElement("details", attrs, nodes);
}

export function DFN(attrs, ...nodes) {
   return new XmlElement("dfn", attrs, nodes);
}

export function DIR(attrs, ...nodes) {
   return new XmlElement("dir", attrs, nodes);
}

export function DIV(attrs, ...nodes) {
   return new XmlElement("div", attrs, nodes);
}

export function DL(attrs, ...nodes) {
   return new XmlElement("dl", attrs, nodes);
}

export function DT(attrs, ...nodes) {
   return new XmlElement("dt", attrs, nodes);
}

export function EM(attrs, ...nodes) {
   return new XmlElement("em", attrs, nodes);
}

export function EMBED(attrs, ...nodes) {
   return new XmlElement("embed", attrs, nodes);
}

export function FIELDSET(attrs, ...nodes) {
   return new XmlElement("fieldset", attrs, nodes);
}

export function FIGURE(attrs, ...nodes) {
   return new XmlElement("figure", attrs, nodes);
}

export function FIGCAPTION(attrs, ...nodes) {
   return new XmlElement("figcaption", attrs, nodes);
}

export function FONT(attrs, ...nodes) {
   return new XmlElement("font", attrs, nodes);
}

export function FOOTER(attrs, ...nodes) {
   return new XmlElement("footer", attrs, nodes);
}

export function FORM(attrs, ...nodes) {
   return new XmlElement("form", attrs, nodes);
}

export function FRAME(attrs, ...nodes) {
   return new XmlElement("frame", attrs, nodes);
}

export function FRAMESET(attrs, ...nodes) {
   return new XmlElement("frameset", attrs, nodes);
}

export function H1(attrs, ...nodes) {
   return new XmlElement("h1", attrs, nodes);
}

export function H2(attrs, ...nodes) {
   return new XmlElement("h2", attrs, nodes);
}

export function H3(attrs, ...nodes) {
   return new XmlElement("h3", attrs, nodes);
}

export function H4(attrs, ...nodes) {
   return new XmlElement("h4", attrs, nodes);
}

export function H5(attrs, ...nodes) {
   return new XmlElement("h5", attrs, nodes);
}

export function H6(attrs, ...nodes) {
   return new XmlElement("h6", attrs, nodes);
}

export function HEAD(attrs, ...nodes) {
   return new XmlElement("head", attrs, nodes);
}

export function HEADER(attrs, ...nodes) {
   return new XmlElement("header", attrs, nodes);
}

export function HGROUP(attrs, ...nodes) {
   return new XmlElement("hgroup", attrs, nodes);
}

export function HR(attrs, ...nodes) {
   return new XmlElement("hr", attrs, nodes);
}

export function I(attrs, ...nodes) {
   return new XmlElement("i", attrs, nodes);
}

export function IFRAME(attrs, ...nodes) {
   return new XmlElement("iframe", attrs, nodes);
}

export function IMG(attrs, ...nodes) {
   return new XmlElement("img", attrs, nodes);
}

export function INPUT(attrs, ...nodes) {
   return new XmlElement("input", attrs, nodes);
}

export function INS(attrs, ...nodes) {
   return new XmlElement("ins", attrs, nodes);
}

export function ISINDEX(attrs, ...nodes) {
   return new XmlElement("isindex", attrs, nodes);
}

export function KBD(attrs, ...nodes) {
   return new XmlElement("kbd", attrs, nodes);
}

export function LABEL(attrs, ...nodes) {
   return new XmlElement("label", attrs, nodes);
}

export function LEGEND(attrs, ...nodes) {
   return new XmlElement("legend", attrs, nodes);
}

export function LI(attrs, ...nodes) {
   return new XmlElement("li", attrs, nodes);
}

export function LINK(attrs, ...nodes) {
   return new XmlElement("link", attrs, nodes);
}

export function MAIN(attrs, ...nodes) {
   return new XmlElement("main", attrs, nodes);
}

export function MAP(attrs, ...nodes) {
   return new XmlElement("map", attrs, nodes);
}

export function MARQUEE(attrs, ...nodes) {
   return new XmlElement("marquee", attrs, nodes);
}

export function MENU(attrs, ...nodes) {
   return new XmlElement("menu", attrs, nodes);
}

export function MENUITEM(attrs, ...nodes) {
   return new XmlElement("menuitem", attrs, nodes);
}

export function META(attrs, ...nodes) {
   return new XmlElement("meta", attrs, nodes);
}

export function METER(attrs, ...nodes) {
   return new XmlElement("meter", attrs, nodes);
}

export function NAV(attrs, ...nodes) {
   return new XmlElement("nav", attrs, nodes);
}

export function NOFRAMES(attrs, ...nodes) {
   return new XmlElement("noframes", attrs, nodes);
}

export function NOSCRIPT(attrs, ...nodes) {
   return new XmlElement("noscript", attrs, nodes);
}

export function OBJECT(attrs, ...nodes) {
   return new XmlElement("object", attrs, nodes);
}

export function OL(attrs, ...nodes) {
   return new XmlElement("ol", attrs, nodes);
}

export function OPTGROUP(attrs, ...nodes) {
   return new XmlElement("optgroup", attrs, nodes);
}

export function OPTION(attrs, ...nodes) {
   return new XmlElement("option", attrs, nodes);
}

export function P(attrs, ...nodes) {
   return new XmlElement("p", attrs, nodes);
}

export function PARAM(attrs, ...nodes) {
   return new XmlElement("param", attrs, nodes);
}

export function PRE(attrs, ...nodes) {
   return new XmlElement("pre", attrs, nodes);
}

export function PROGRESS(attrs, ...nodes) {
   return new XmlElement("progress", attrs, nodes);
}

export function Q(attrs, ...nodes) {
   return new XmlElement("q", attrs, nodes);
}

export function S(attrs, ...nodes) {
   return new XmlElement("s", attrs, nodes);
}

export function SAMP(attrs, ...nodes) {
   return new XmlElement("samp", attrs, nodes);
}

export function SCRIPT(attrs, ...nodes) {
   return new XmlElement("script", attrs, nodes);
}

export function SECTION(attrs, ...nodes) {
   return new XmlElement("section", attrs, nodes);
}

export function SELECT(attrs, ...nodes) {
   return new XmlElement("select", attrs, nodes);
}

export function SMALL(attrs, ...nodes) {
   return new XmlElement("small", attrs, nodes);
}

export function SOURCE(attrs, ...nodes) {
   return new XmlElement("source", attrs, nodes);
}

export function SPAN(attrs, ...nodes) {
   return new XmlElement("span", attrs, nodes);
}

export function STRIKE(attrs, ...nodes) {
   return new XmlElement("strike", attrs, nodes);
}

export function STRONG(attrs, ...nodes) {
   return new XmlElement("strong", attrs, nodes);
}

export function STYLE(attrs, ...nodes) {
   return new XmlElement("style", attrs, nodes);
}

export function SUB(attrs, ...nodes) {
   return new XmlElement("sub", attrs, nodes);
}

export function SUMMARY(attrs, ...nodes) {
   return new XmlElement("summary", attrs, nodes);
}

export function SUP(attrs, ...nodes) {
   return new XmlElement("sup", attrs, nodes);
}

export function TABLE(attrs, ...nodes) {
   return new XmlElement("table", attrs, nodes);
}

export function TBODY(attrs, ...nodes) {
   return new XmlElement("tbody", attrs, nodes);
}

export function TD(attrs, ...nodes) {
   return new XmlElement("td", attrs, nodes);
}

export function TEXTAREA(attrs, ...nodes) {
   return new XmlElement("textarea", attrs, nodes);
}

export function TFOOT(attrs, ...nodes) {
   return new XmlElement("tfoot", attrs, nodes);
}

export function TH(attrs, ...nodes) {
   return new XmlElement("th", attrs, nodes);
}

export function THEAD(attrs, ...nodes) {
   return new XmlElement("thead", attrs, nodes);
}

export function TIME(attrs, ...nodes) {
   return new XmlElement("time", attrs, nodes);
}

export function TITLE(attrs, ...nodes) {
   return new XmlElement("title", attrs, nodes);
}

export function TR(attrs, ...nodes) {
   return new XmlElement("tr", attrs, nodes);
}

export function TRACK(attrs, ...nodes) {
   return new XmlElement("track", attrs, nodes);
}

export function TT(attrs, ...nodes) {
   return new XmlElement("tt", attrs, nodes);
}

export function U(attrs, ...nodes) {
   return new XmlElement("u", attrs, nodes);
}

export function UL(attrs, ...nodes) {
   return new XmlElement("ul", attrs, nodes);
}

export function VAR(attrs, ...nodes) {
   return new XmlElement("var", attrs, nodes);
}

/*---------------------------------------------------------------------*/
/*    HTML ...                                                         */
/*---------------------------------------------------------------------*/
export function HTML(attrs, ...nodes) {
   return new HtmlElement("html", attrs, nodes);
}

/*---------------------------------------------------------------------*/
/*    TILDE ...                                                        */
/*---------------------------------------------------------------------*/
export function TILDE(attrs, ...nodes) {
   return new Tilde("tilde", attrs, nodes);
}

/*---------------------------------------------------------------------*/
/*    DOLLAR ...                                                       */
/*---------------------------------------------------------------------*/
export function DOLLAR(expr) {
   switch (typeof expr) {
      case "string": return "'" + expr + "'";
      case "number": return expr;
      default: {
	 if ("dollar" in expr) {
	    return expr.dollar();
	 } else {
	    return `/* ${expr.toString()} */`;
	 }
      }
   }
}

/*---------------------------------------------------------------------*/
/*    SVG ...                                                          */
/*---------------------------------------------------------------------*/
export const SVG = (attrs, ...nodes) => new XmlElement("svg", attrs, nodes);
SVG.IMG = (attrs, ...nodes) => HtmlElement("svg:img", attrs, nodes);

