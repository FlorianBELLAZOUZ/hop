;*=====================================================================*/
;*    .../project/hop/hop/node_modules/hop/node/hop-backend.hop        */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Thu Sep  6 15:19:35 2018                          */
;*    Last change :  Fri Mar  1 15:05:33 2024 (serrano)                */
;*    Copyright   :  2018-24 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Hop native backend                                               */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _hop-backend
   
   (static (class Receiver
	      (url::bstring read-only)
	      (get (default #f))
	      (put (default #f))
	      (post (default #f))))

   (library hopscript hop hopwidget nodejs web)
   
   (export (hopscript %this this %scope %module)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*    -------------------------------------------------------------    */
;*    This is the function called by JavaScript when the Hop module    */
;*    is required. It binds the exports field of the newly             */
;*    allocated module                                                 */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)

   (define receiver-table
      (create-hashtable
	 :weak 'open-string
	 :size 128))

   (define %worker
      (with-access::JsGlobalObject %this (worker)
	 worker))
   
   (define (receiver-handler handler)
      (cond
	 ((isa? handler JsProcedure)
	  (with-access::JsProcedure handler (arity procedure)
	     (if (=fx arity 3)
		 (lambda (this req res)
		    (js-worker-exec-throws %worker "hop"
		       (lambda ()
			  (procedure this req res))))
		 (lambda (this req res)
		    (js-worker-exec-throws %worker "hop"
		       (lambda ()
			  (js-call2-procedure procedure (js-undefined) req res)))))))
	 ((isa? handler JsFunction)
	  (lambda (this req res)
	     (js-worker-exec-throws %worker "hop"
		(lambda ()
		   (js-call2 handler (js-undefined) req res)))))
	 (else
	  (tprint "pas jsprocedure"))))

   (define (get-receiver url)
      (let* ((abspath (js-tostring url %this))
	     (rcv (hashtable-get receiver-table abspath)))
	 (unless rcv
	    (set! rcv (instantiate::Receiver (url url)))
	    (hashtable-put! receiver-table abspath rcv))
	 rcv))
      
   (define (get this url handler)
      (with-access::Receiver (get-receiver url) (get)
	 (set! get (receiver-handler handler))))
   
   (define (post this url handler)
      (with-access::Receiver (get-receiver url) (post)
	 (set! post (receiver-handler handler))))
   
   (define (put this url handler)
      (with-access::Receiver (get-receiver url) (put)
	 (set! put (receiver-handler handler))))
   
   (define (static this url handler)
      (tprint "static " url))

   (define request-prototype-cmap
      (js-names->cmap
	 (vector (& "get"))
	 :writable #f :configurable #f :inline #t))

   (define response-prototype-cmap
      (js-names->cmap
	 (vector (& "status") (& "append") (& "send") (& "sendFile"))
	 :writable #f :configurable #f :inline #t))

   (define (http-request-get obj key)
      (with-access::http-request obj (header
					authorization
					connection)
	 (cond
	    ((eq? key (& "authorization"))
	     (if authorization
		 (js-string->jsstring authorization)
		 authorization))
	    ((eq? key (& "connection"))
	     (js-string->jsstring (symbol->string! connection)))
	    (else
	     (js-undefined)))))
   
   (define request-prototype
      (let ((o (instantiateJsObject
		  (cmap request-prototype-cmap)
		  (__proto__ (js-object-proto %this))
		  (elements (make-vector 1)))))
	 (js-object-inline-set! o 0
	    (js-make-function %this
	       (lambda (this key)
		  (if (isa? this JsWrapper)
		      (with-access::JsWrapper this (obj)
			 (http-request-get obj key))
		      (let ((fun (js-get this (& "get") %this)))
			 (js-call1 %this fun this key))))
	       (js-function-arity 1 0)
	       (js-function-info :name "get" :len 2)))
	 o))

   (define response-prototype
      (let ((o (instantiateJsObject
		  (cmap response-prototype-cmap)
		  (__proto__ (js-object-proto %this))
		  (elements (make-vector 4)))))
	 ;; status
	 (js-object-inline-set! o 0
	    (js-make-function %this
	       (lambda (this val)
		  (if (isa? this JsWrapper)
		      (with-access::JsWrapper this (obj)
			 (with-access::http-response-file-and-string obj (start-line)
			    (set! start-line
			       (status-start-line (js-tonumber val %this))))
			 (tprint "status " val))
		      (let ((fun (js-get this (& "append") %this)))
			 (js-call1 %this fun this val))))
	       (js-function-arity 2 0)
	       (js-function-info :name "status" :len 1)))
	 ;; append
	 (js-object-inline-set! o 1
	    (js-make-function %this
	       (lambda (this key val)
		  (if (isa? this JsWrapper)
		      (with-access::JsWrapper this (data)
			    (let ((h (cons (js-tostring key %this)
					(js-tostring val %this))))
			       (set! data (cons h data))))
		      (let ((fun (js-get this (& "append") %this)))
			 (js-call1 %this fun this key))))
	       (js-function-arity 2 0)
	       (js-function-info :name "append" :len 3)))
	 ;; send
	 (js-object-inline-set! o 2
	    (js-make-function %this
	       (lambda (this val)
		  (if (isa? this JsWrapper)
		      (with-access::JsWrapper this (obj)
			 (with-access::http-response-file-and-string obj (string)
			    (set! string (js-tostring val %this))))
		      (let ((fun (js-get this (& "send") %this)))
			 (js-call1 %this fun this val))))
	       (js-function-arity 1 0)
	       (js-function-info :name "send" :len 2)))
	 ;; sendfile
	 (js-object-inline-set! o 3
	    (js-make-function %this
	       (lambda (this val)
		  (if (isa? this JsWrapper)
		      (with-access::JsWrapper this (obj)
			 (with-access::JsWrapper this (obj)
			    (with-access::http-response-file-and-string obj (file)
			       (set! file (js-tostring val %this)))))
		      (let ((fun (js-get this (& "sendFile") %this)))
			 (js-call1 %this fun this val))))
	       (js-function-arity 1 0)
	       (js-function-info :name "sendFile" :len 2)))
	 o))
   
   (define (js-request req)
      (let ((jsr (instantiate::JsWrapper
		    (obj req)
		    (data #f))))
	 (js-object-proto-set! jsr request-prototype)
	 jsr))
   
   (define (js-response req)
      (let ((jsr (instantiate::JsWrapper
		    (obj (instantiate::http-response-file-and-string))
		    (data (list "X-Powered-By: Hop")))))
	 (js-object-proto-set! jsr response-prototype)
	 jsr))
   
   (define (backend-filter req)
      (when (isa? req http-server-request)
	 (with-access::http-server-request req (abspath method)
	    (let ((rcv (hashtable-get receiver-table abspath)))
	       (when rcv
		  (let ((jreq (js-request req))
			(jres (js-response req)))
		     (with-access::Receiver rcv (get put post)
			(case method
			   ((GET)
			    (when get (get (js-undefined) jreq jres)))
			   ((PUT)
			    (when put (put (js-undefined) jreq jres)))
			   ((POST)
			    (when post (post (js-undefined) jreq jres)))
			   (else
			    (tprint "method=" method))))
		     (with-access::JsWrapper jres (obj data)
			(with-access::http-response-file-and-string obj (header)
			   (set! header (reverse! data))
			   obj))))))))
   
   (with-access::JsGlobalObject %this (js-object)
      (let ((exports (js-new0 %this js-object)))
         (js-put! %module (& "exports") exports #f %this)
         ;; bind the load function is the pseudo javascript module
         (js-put! exports (& "init")
            (js-make-function %this
               (lambda (this config)
		  (hop-filter-add! backend-filter)
		  (let ((o (js-new0 %this js-object)))
		     (js-put! o (& "get")
			(js-make-function %this
			   get
			   (js-function-arity get)
			   (js-function-info :name "get" :len 2))
			#f %this)
		     (js-put! o (& "post")
			(js-make-function %this
			   post
			   (js-function-arity post)
			   (js-function-info :name "post" :len 2))
			#f %this)
		     (js-put! o (& "put")
			(js-make-function %this
			   put
			   (js-function-arity put)
			   (js-function-info :name "put" :len 2))
			#f %this)
		     (js-put! o (& "static")
			(js-make-function %this
			   static
			   (js-function-arity static)
			   (js-function-info :name "static" :len 2))
			#f %this)
		     o))
	       (js-function-arity 1 0)
	       (js-function-info :name "init" :len 1))
	    #f %this))))

;*---------------------------------------------------------------------*/
;*    make-cmap ...                                                    */
;*---------------------------------------------------------------------*/
(define-inline (make-cmap props)
   (js-make-jsconstructmap 
      :methods (make-vector (vector-length props))
      :props props
      :ctor (make-cell (vector-length props))))

;*---------------------------------------------------------------------*/
;*    status-start-line ...                                            */
;*---------------------------------------------------------------------*/
(define (status-start-line status)
   (case status
      ((100) "HTTP/1.1 100 Continue")
      ((101) "HTTP/1.1 101 Switching Protocols")
      ((102) "HTTP/1.1 102 102 Processing")
      ((103) "HTTP/1.1 103 Early Hints")
      ((200) "HTTP/1.1 200 OK")
      ((201) "HTTP/1.1 201 Created")
      ((202) "HTTP/1.1 202 Accepted")
      ((203) "HTTP/1.1 203 Non-Authoritative Information")
      ((204) "HTTP/1.1 204 No Content")
      ((205) "HTTP/1.1 205 Reset Content")
      ((206) "HTTP/1.1 206 Partial Content")
      ((207) "HTTP/1.1 207 Multi-Status")
      ((208) "HTTP/1.1 208 Already Reported")
      ((226) "HTTP/1.1 226 IM used")
      ((300) "HTTP/1.1 300 Multiple Choices")
      ((301) "HTTP/1.1 301 Moved Permanently")
      ((302) "HTTP/1.1 302 Found")
      ((303) "HTTP/1.1 303 See Other")
      ((304) "HTTP/1.1 304 Not Modified")
      ((305) "HTTP/1.1 305 Use Proxy")
      ((306) "HTTP/1.1 306 unused")
      ((307) "HTTP/1.1 307 Temporary Redirect")
      ((308) "HTTP/1.1 308 Permanent Redirect")
      ((400) "HTTP/1.1 400 Bad Request")
      ((401) "HTTP/1.1 401 Unauthorized")
      ((402) "HTTP/1.1 402 Payment Required")
      ((403) "HTTP/1.1 403 Forbidden")
      ((404) "HTTP/1.1 404 Not Found")
      ((405) "HTTP/1.1 405 Method Not Allowed")
      ((406) "HTTP/1.1 406 Not Acceptable")
      ((409) "HTTP/1.1 407 Proxy Authentication Required")
      ((408) "HTTP/1.1 408 Request Timeout")
      ((409) "HTTP/1.1 409 Conflict")
      ((410) "HTTP/1.1 410 Gone")
      ((411) "HTTP/1.1 411 Length Required")
      ((412) "HTTP/1.1 412 Precondition Failed")
      ((413) "HTTP/1.1 413 Payload Too Large")
      ((414) "HTTP/1.1 414 URI Too Long")
      ((415) "HTTP/1.1 415 Unsupported Media Type")
      ((416) "HTTP/1.1 416 Range Not Satisfiable")
      ((417) "HTTP/1.1 417 Expectation Failed")
      ((418) "HTTP/1.1 418 I'm a teapot")
      ((421) "HTTP/1.1 421 Misdirected Request")
      ((422) "HTTP/1.1 422 Unprocessable Content")
      ((423) "HTTP/1.1 423 Locked")
      ((424) "HTTP/1.1 424 Failed Dependency")
      ((425) "HTTP/1.1 425 Too Early")
      ((426) "HTTP/1.1 426 Upgrade Required")
      ((428) "HTTP/1.1 428 Precondition Required")
      ((429) "HTTP/1.1 429 Too Many Requests")
      ((431) "HTTP/1.1 431 Request Header Fields Too Large")
      ((451) "HTTP/1.1 451 Unavailable For Legal Reasons")
      ((500) "HTTP/1.1 500 Internal Server Error")
      ((501) "HTTP/1.1 501 Not Implemented")
      ((502) "HTTP/1.1 502 Bad Gateway")
      ((503) "HTTP/1.1 503 Service Unavailable")
      ((504) "HTTP/1.1 504 Gateway Timeout")
      ((505) "HTTP/1.1 505 HTTP Version Not Supported")
      ((506) "HTTP/1.1 506 Variant Also Negotiates")
      ((507) "HTTP/1.1 507 Insufficient Storage")
      ((508) "HTTP/1.1 508 Loop Detected")
      ((510) "HTTP/1.1 510 Not Extended")
      ((511) "HTTP/1.1 511 Network Authentication Required")
      (else (format "HTTP/1.1 ~a" status))))
      
