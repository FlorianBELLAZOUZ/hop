/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hop/node/event.mjs     */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Tue Apr  2 11:20:11 2024                          */
/*    Last change :  Thu May  2 11:22:47 2024 (serrano)                */
/*    Copyright   :  2024 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Server broadcast implementation                                  */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    The module                                                       */
/*---------------------------------------------------------------------*/
export { init, serverEventInit, broadcast, registerWebsocket };

/*---------------------------------------------------------------------*/
/*    serverEventKey ...                                               */
/*---------------------------------------------------------------------*/
let serverEventKey = Date.now();
let ssl = false;
let websockets = [];

const hostTable = new Map();
const eventTable = new Map();

const minPingTime = 30 * 1000;

let eventEncode = false;

/*---------------------------------------------------------------------*/
/*    getServerEventKey ...                                            */
/*---------------------------------------------------------------------*/
function getServerEventKey(host) {
   return host + "//" + serverEventKey++;
}

/*---------------------------------------------------------------------*/
/*    init ...                                                         */
/*---------------------------------------------------------------------*/
function init(config, encode) {
   ssl = config.ports.https > 0;
   eventEncode = encode;
}

/*---------------------------------------------------------------------*/
/*    serverEventInit ...                                              */
/*---------------------------------------------------------------------*/
function serverEventInit(pt) {
   const host = this.header("host");
   const key = getServerEventKey(host);
   const pingTime = Math.round(
      (pt > minPingTime ? pt: minPingTime) + (Math.random() * 5000));
   hostTable.set(host, key);
   return { key, host, ssl, pingTime }
}

/*---------------------------------------------------------------------*/
/*    registerWebsocket ...                                            */
/*---------------------------------------------------------------------*/
function registerWebsocket(host, ws) {
   websockets.push(ws);
   ws.on('message', message => {
      const m = message.toString().match(/^([^ ]+) ([^ ]+) ?(.*)$/)
      if (m && hostTable.get(host) === m[1]) {
	 const evt = m[3];
	 const old = eventTable.get(evt);
	 if (old) {
	    old.push(ws);
	 } else {
	    eventTable.set(evt, [ws]);
	 }
      }
   });
}
   
/*---------------------------------------------------------------------*/
/*    broadcastResPrototype ...                                        */
/*---------------------------------------------------------------------*/
const broadcastResPrototype = {
   append: function(key, val) {
      if (key === "Hop-Serialize") {
	 this.format = val;
      }
   },
   send: function(val) {
      this.send = val;
   } 
}

/*---------------------------------------------------------------------*/
/*    broadcastReq ...                                                 */
/*---------------------------------------------------------------------*/
const broadcastReq = {
   get(k) { return (k === "Hop-Serialize") ? "json" : false; }
};

/*---------------------------------------------------------------------*/
/*    broadcast ...                                                    */
/*---------------------------------------------------------------------*/
function broadcast(evt, val) {
   const wss = eventTable.get(evt);

   if (wss) {
      const name = encodeURIComponent(evt);
      const res = { __proto__: broadcastResPrototype };
      eventEncode(broadcastReq, res, val);
      const msg = res.format + " " + name + " " + res.send;

      try {
	 wss.forEach(ws => ws.send(msg));
      } catch(e) {
	 console.error("broadcast, cannot foreach...wss=", wss);
	 throw e;
      }
   }
}

