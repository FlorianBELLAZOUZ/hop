/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hop/node/event.mjs     */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Tue Apr  2 11:20:11 2024                          */
/*    Last change :  Thu May  2 17:45:28 2024 (serrano)                */
/*    Copyright   :  2024 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Server broadcast implementation                                  */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    The module                                                       */
/*---------------------------------------------------------------------*/
export { ServerEvent };

/*---------------------------------------------------------------------*/
/*    serverEventKey ...                                               */
/*---------------------------------------------------------------------*/
const minPingTime = 30 * 1000;

/*---------------------------------------------------------------------*/
/*    broadcastResPrototype ...                                        */
/*---------------------------------------------------------------------*/
const broadcastResPrototype = {
   append: function(key, val) {
      if (key === "Hop-Serialize") {
	 this.format = val;
      }
   },
   send: function(val) {
      this.send = val;
   } 
}

/*---------------------------------------------------------------------*/
/*    broadcastReq ...                                                 */
/*---------------------------------------------------------------------*/
const broadcastReq = {
   get(k) { return (k === "Hop-Serialize") ? "json" : false; }
};

/*---------------------------------------------------------------------*/
/*    SeverEvent ...                                                   */
/*---------------------------------------------------------------------*/
/* @sealed */
class SeverEvent {
   #hop;
   #serverEventKey = Date.now();
   #ssl = false;
   #websockets = [];
   #respond;
   #hostTable = new Map();
   #eventTable = new Map();

   
   constructor(hop, respond) {
      this.#hop = hop;
      this.#respond = respond;
   }

   init(req, pt) {
      // the user is to be grabbed here
      const host = req.header("host");
      const key = host + "//" + this.#serverEventKey++;
      const pingTime = Math.round(
	 (pt > minPingTime ? pt: minPingTime) + (Math.random() * 5000));
      this.#hostTable.set(host, { key, req });
      return { key, host, ssl, pingTime }
   }

   broadcast(evt, val) {
      const wss = this.#eventTable.get(evt);
      
      if (wss) {
	 const name = encodeURIComponent(evt);
	 const res = { __proto__: broadcastResPrototype };
	 this.#respond(broadcastReq, res, val);
	 const msg = res.format + " " + name + " " + res.send;

	 try {
	    wss.forEach(ws => ws.send(msg));
	 } catch(e) {
	    console.error("broadcast, cannot foreach...wss=", wss);
	    throw e;
	 }
      }
   }
   
   registerWebsocket(host, ws) {
      this.#websockets.push(ws);
      ws.on('message', message => {
	 const m = message.toString().match(/^([^ ]+) ([^ ]+) ?(.*)$/)
	 if (m) {
	    const h = this.#hostTable.get(host);

	    if (h && h.key === m[1]) {
	       const evt = m[3];
	       if (this.#hop.auth.authorizedEvent(h.req, evt)) {
		  const old = this.#eventTable.get(evt);
		  if (old) {
		     old.push(ws);
		  } else {
		     this.#eventTable.set(evt, [ws]);
		  }
	       }
	    }
	 }
      });
   }
}
