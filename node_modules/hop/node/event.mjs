/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hop/node/event.mjs     */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Tue Apr  2 11:20:11 2024                          */
/*    Last change :  Fri Jul 12 08:30:53 2024 (serrano)                */
/*    Copyright   :  2024 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Server broadcast implementation                                  */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    The module                                                       */
/*---------------------------------------------------------------------*/
export { ServerEvent };

/*---------------------------------------------------------------------*/
/*    debug                                                            */
/*---------------------------------------------------------------------*/
const debug =
   (process.env.NODE_DEBUG && process.env.NODE_DEBUG.indexOf("broadcast") !== -1);

/*---------------------------------------------------------------------*/
/*    minPingTime ...                                                  */
/*---------------------------------------------------------------------*/
const minPingTime = 30 * 1000;

/*---------------------------------------------------------------------*/
/*    broadcastResPrototype ...                                        */
/*---------------------------------------------------------------------*/
const broadcastResPrototype = {
   append: function(key, val) {
      if (key === "hop-serialize") {
	 this.format = val;
      }
   },
   send: function(val) {
      this.send = val;
   } 
}

/*---------------------------------------------------------------------*/
/*    broadcastReq ...                                                 */
/*---------------------------------------------------------------------*/
const broadcastReq = {
   get(k) { return (k === "hop-serialize") ? "json" : false; }
};

/*---------------------------------------------------------------------*/
/*    ServerEvent ...                                                  */
/*---------------------------------------------------------------------*/
/* @sealed */
class ServerEvent {
   #hop;
   #serverEventKey = Date.now();
   #websockets = [];
   #respond;
   #hostTable = new Map();
   #eventTable = new Map();

   
   constructor(hop, respond) {
      this.#hop = hop;
      this.#respond = respond;
   }

   init(req, pt) {
      const host = req.get("host");
      const key = host + "//" + this.#serverEventKey++;
      const ssl = req.httpVersion !== "1.1";
      const pingTime = Math.round(
	 (pt > minPingTime ? pt: minPingTime) + (Math.random() * 5000));
      this.#hostTable.set(host, { key, req });
      if (debug) console.log("event.mjs: init", host, key);
      return { key, host, ssl, pingTime };
   }

   broadcast(evt, val) {
      const wss = this.#eventTable.get(evt);

      if (debug) console.log("event.mjs: broadcast", evt, typeof wss);
      
      if (wss) {
	 const name = encodeURIComponent(evt);
	 const res = { __proto__: broadcastResPrototype };
	 this.#respond(broadcastReq, res, val);
	 const msg = res.format + " " + name + " " + res.send;

	 try {
	    wss.forEach(ws => {
	       if (debug) console.log("event.mjs: ws.send", msg);
	       ws.send(msg);
	    });
	 } catch(e) {
	    if (debug) console.error("broadcast, cannot foreach...wss=", wss);
	    throw e;
	 }
      }
   }
   
   registerWebsocket(host, ws) {
      if (debug) console.log("event.mjs: registerWebsocket", host);
      this.#websockets.push(ws);

      ws.on('message', message => {
	 const m = message.toString().match(/^([^ ]+) ([^ ]+) ?(.*)$/)

	 if (debug) {
	    console.log("event.mjs: registerWebsocket.onmessage",
			message.toString());
	 }
	 
	 if (m) {
	    const h = this.#hostTable.get(host);

	    switch (m[2]) {
	       case "ping": {
		  if (debug) console.log("event.mjs: registerWebsocket.onmessage ping");
		  ws.send("pong");
		  break;
	       }

	       case "register": {
		  if (h && h.key === m[1]) {
		     const evt = m[3];
		     if (this.#hop.auth.authorizedEvent(h.req, evt)) {
			const old = this.#eventTable.get(evt);
			
			if (debug) console.log("event.mjs: register", evt);
			
			if (old) {
			   old.push(ws);
			} else {
			   this.#eventTable.set(evt, [ws]);
			}
		     } else {
			if (debug) console.log("event.mjs: registerWebsocket.onmessage unauthorized message", message.toString());
		     }
		  }
		  break;
	       }

	       default: {
		  if (debug) console.log("event.mjs: registerWebsocket.onmessage illegal message", message.toString());
	       }
	    }
	 } else {
	    if (debug) console.log("event.mjs: registerWebsocket.onmessage illegal message", message.toString());
	 }
      });
   }
}
