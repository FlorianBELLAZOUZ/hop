/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hop/node/hop.mjs       */
/*    -------------------------------------------------------------    */
/*    Author      :  manuel serrano                                    */
/*    Creation    :  Tue Oct 24 09:50:25 2023                          */
/*    Last change :  Sun Mar  3 08:09:53 2024 (serrano)                */
/*    Copyright   :  2023-24 manuel serrano                            */
/*    -------------------------------------------------------------    */
/*    ESM module                                                       */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    Import/Export                                                    */
/*---------------------------------------------------------------------*/
import { createRequire } from 'node:module';
import { basename, dirname, normalize, relative } from "node:path";
import { existsSync, statSync, readFileSync } from "node:fs";
import * as http from "node:http";
import * as https from "node:https";
import { URL, pathToFileURL, fileURLToPath } from 'node:url';
import { cwd } from "node:process";
import * as loader from "@hop/hopc/hop-loader.mjs";
import { init as authInit, WWWAuthenticate, authorizedService } from "./auth.mjs";
import { init as configInit, parseCommandLine } from "./config.mjs";
import { format } from "node:util";

export * from "./html.mjs";
export { parseCommandLine } from "./config.mjs";
export { hopInit as init,
	 Resolver, Service, Response, 
	 HTTPResponseFile, HTTPResponseString, HTTPResponseAuthentication };

/*---------------------------------------------------------------------*/
/*    Dynamique require                                                */
/*---------------------------------------------------------------------*/
const require = createRequire(import.meta.url);

/*---------------------------------------------------------------------*/
/*    Default parameters                                               */
/*---------------------------------------------------------------------*/
export const isServer = true;

const hopBase = "/hop";

let backend = undefined;

/*---------------------------------------------------------------------*/
/*    getRootDir ...                                                   */
/*---------------------------------------------------------------------*/
function getRootDir(url) {
   if (!url) {
      return process.cwd();
   } else {
      const urlpath = (url instanceof URL ? fileURLToPath(url) : url.replace(/^file:\/\//, ""));
      const normpath = normalize(urlpath);
      if (!existsSync(urlpath)) {
	 throw `Service.resolve: path does not exists ${url}`;
      } else {
	 if (statSync(urlpath).isDirectory()) {
	    return normpath;
	 } else {
	    return dirname(normpath);
	 }
      }
   }
}

/*---------------------------------------------------------------------*/
/*    backendInit ...                                                  */
/*---------------------------------------------------------------------*/
function backendInit(config) {
   const mod = (config.engine === "hop" ? "./hop-backend.hop" : "./node-backend.js");
   return require(mod).init(config);
}

/*---------------------------------------------------------------------*/
/*    config ...                                                       */
/*---------------------------------------------------------------------*/
let config = false;

/*---------------------------------------------------------------------*/
/*    hopInit ...                                                      */
/*---------------------------------------------------------------------*/
function hopInit(args = undefined) {
   if (!config) {
      config = configInit(args);
      backend = backendInit(config);
      authInit();
      
      // motd
      if (config.motd && config.verbose >= 1) {
         console.log(format(config.motd, config.ports.http, config.ports.https));
      }
   }
   return config;
}

/*---------------------------------------------------------------------*/
/*    Resolver ...                                                     */
/*---------------------------------------------------------------------*/
/* @sealed */
class Resolver {
   #root;
   #hooks = []
   #resolveTable = new Map();
   #num;
   #uses = new Set();

   static num = 1;

   constructor(root, ...modules) {
      this.#root = getRootDir(root);
      this.#num = Resolver.num++;

      modules.forEach(m => this.register(m, root));
      hopInit();
      backend.static(`${hopBase}/${this.#num}`, this.#root);
   }

   register(specifier, parentURL) {
      const dir = parentURL || this.#root;
      const file = require.resolve(specifier, { paths: [ dir ] });
      const m = import(file);

      m.then(ns => this.#hooks.push(ns.resolve));
   }

   resolve(mod) {
      const old = this.#resolveTable.get(mod);

      if (old) {
	 return old.url;
      } else {
	 const hooks = this.#hooks;
	 const root = this.#root;
	 const ctx = { parentURL: pathToFileURL(root) };
	 let index = 0;

	 const nextr = async (s, c) => {
	    if (index === hooks.length) {
	       const p = require.resolve(s, { paths: [ root ] });
	       return { url: pathToFileURL(p) };
	    } else {
	       return hooks[index++](s, ctx, nextr);
	    }
	 }
	 
	 return loader.resolve(mod, ctx, nextr)
	    .then(u => {
	       const file = fileURLToPath(u.url);
	       const relfile = relative(this.#root, file);
	       const url = `${hopBase}/${this.#num}/${relfile}`;

	       this.#resolveTable.set(mod, { url });
	       return url;
	    });
      }
   }
}

/*---------------------------------------------------------------------*/
/*    serviceUrl ...                                                   */
/*---------------------------------------------------------------------*/
function serviceUrl(file) {
   if (file[0] === "/") {
      return file;
   } else {
      return hopBase + "/" + file;
   }
}

/*---------------------------------------------------------------------*/
/*    Service ...                                                      */
/*---------------------------------------------------------------------*/
/* @sealed */
class Service {
   #fun;
   #url;
   #key = Math.round(Math.random() * 100000);

   constructor(fun, optOrUrl) {
      hopInit();
      
      this.#fun = fun;
      if (typeof optOrUrl === "string") {
	 this.#url = serviceUrl(optOrUrl);
	 backend.get(this.#url, Service.getResponse.bind(this));
	 backend.post(this.#url, Service.postResponse.bind(this));
	 backend.put(this.#url, Service.putResponse.bind(this));
      } else if (typeof optOrUrl === "object") {
	 if ("url" in optOrUrl) {
	    backend.post(this.#url, Service.postResponse.bind(this));
	 }
      } else {
	 throw "Service: not implemented yet";
      }
   }

   dollar() {
      return `hop.server.import('${this.#url}')`;
   }

   static postResponse(req, res) {
      if (authorizedService(req, this.#url)) {
	 let rep = undefined;
	 switch (req.get("Hop-Serialize")) {
	    case "json": {
	       const args = req.get("Hop-Arguments");
	       rep = this.#fun.apply(req, JSON.parse(args));
	       break;
	    }
	    default:
	       rep = this.#fun.call(req, req.query);
	 }
	 return hopResponse(req, res, rep);
      } else {
	 return hopResponse(req, res, HTTPResponseAuthentication());
      }
   }
   
   static putResponse(req, res) {
      if (authorizedService(req, this.#url)) {
	 let rep = undefined;
	 rep = this.#fun.call(req, req.query);
	 return hopResponse(req, res, rep);
      } else {
	 return hopResponse(req, res, HTTPResponseAuthentication());
      }
   }
   
   static getResponse(req, res) {
      if (authorizedService(req, this.#url)) {
	 let rep;
	 switch (req.query["Hop-Serialize"]) {
	    case "json-url": {
	       const args = decodeURIComponent(req.query["Hop-Arguments"]);
	       rep = this.#fun.apply(req, JSON.parse(args));
	       break;
	    }
	    default: {
	       rep = this.#fun.call(req, req.query);
	    }
	 }
	 return hopResponse(req, res, rep);
      } else {
	 return hopResponse(req, res, HTTPResponseAuthentication());
      }
   }
}

/*---------------------------------------------------------------------*/
/*    hopResponse ...                                                  */
/*---------------------------------------------------------------------*/
function hopResponse(req, res, val) {
   console.error(">>> hopResponse ", req.path, " val=", typeof(val));
   
   if (val instanceof Response) {
      console.error("<<< hopResponse... Response");
      val.hopResponse(req, res);
      return res;
   } else if (val instanceof Promise) {
      console.error("<<< hopResponse... promise");
      return val.then(val => hopResponse(req, res, val));
   } else {
      // keep-alive
      if (req.get("connection")) {
	 res.set("Connection", req.Connection);
      }
      console.error("hopResponse.2 ", req.path, typeof(val));

      if (typeof(val) === "number") {
	 const str = val.toString();
	 res.append("Content-Length", str.length);
	 res.append("Hop-Serialize", "number");
	 res.send(str);
      } else if (val === undefined) {
	 res.append("Content-Length", "0");
	 res.append("Hop-Serialize", "undefined");
	 res.send("");
      } else if (val === null) {
	 res.append("Content-Length", "0")
	 res.append("Hop-Serialize", "null");
	 res.send("");
      } else if (val === true) {
	 res.append("Content-Length", "0")
	 res.append("Hop-Serialize", "true");
	 res.send("");
      } else if (val === false) {
	 res.append("Content-Length", "0");
	 res.append("Hop-Serialize", "false");
	 res.send("");
      } else if (!req.get("Hop-Serialize")) {
	 const str = val.toString();
	 console.error("hopResponse.3 ", req.path, " ", str.length);
	 res.append("Content-Length", str.length);
	 res.append("Content-Type", val?.mimetype ?? "application/text");
	 res.send(str);
      } else if (typeof(val) === "string") {
	 res.append("Content-Length", val.length);
	 res.send(val);
      } else if ("toResponse" in val) {
	 const str = val.toResponse();
	 res.append("Content-Length", str.length);
	 res.append("Hop-Serialize", "string");
	 res.send(str);
      } else {
	 const str = JSON.stringify(val);
	 res.append("Content-Length", str.length);
	 res.append("Hop-Serialize", "json");
	 res.send(str);
      }
      return res;
   }
}
   
/*---------------------------------------------------------------------*/
/*    Response                                                         */
/*---------------------------------------------------------------------*/
/* @sealed */
class Response {
   val;
   status;
   headers;
   
   constructor(val, status = 200, headers = undefined) {
      this.val = val;
      this.status = status;
      this.headers = headers;
   }
   
   hopResponse(req, res) {
      throw "not implemented";
   }
}

/*---------------------------------------------------------------------*/
/*    ResponseString ...                                               */
/*---------------------------------------------------------------------*/
/* @sealed */
class ResponseString extends Response {
   hopResponse(req, res) {
      // status
      res.status(this.status);

      // header
      if (this.headers) {
	 for (let k in this.headers) {
	    res.append(k, this.headers[k]);
	 }
      }

      // content
      res.send(this.val);
   }
}

/*---------------------------------------------------------------------*/
/*    ResponseFile ...                                                 */
/*---------------------------------------------------------------------*/
/* @sealed */
class ResponseFile extends Response {
   HopResponse(req, res) {
      // header
      if (this.headers) {
	 for (let k in this.headers) {
	    res.append(k, this.headers[k]);
	 }
      }

      res.sendFile(this.val);
   }
}

/*---------------------------------------------------------------------*/
/*    HTTPResponseFile ...                                             */
/*---------------------------------------------------------------------*/
function HTTPResponseFile(path) {
   return new ResponseFile(path, 200, { "Content-Disposition": `inline; filename="${basename(path)}"`});
}

/*---------------------------------------------------------------------*/
/*    HTTPResponseString ...                                           */
/*---------------------------------------------------------------------*/
function HTTPResponseString(str) {
   return new ResponseString(str);
}

/*---------------------------------------------------------------------*/
/*    HTTPResponseAuthentication ...                                   */
/*---------------------------------------------------------------------*/
function HTTPResponseAuthentication() {
   return new ResponseString("Unauthorized", 401, WWWAuthenticate());
}

