/*=====================================================================*/
/*    serrano/prgm/project/hop/3.7.x/node_modules/hop/node/hop.mjs     */
/*    -------------------------------------------------------------    */
/*    Author      :  manuel serrano                                    */
/*    Creation    :  Tue Oct 24 09:50:25 2023                          */
/*    Last change :  Wed Jan 24 13:42:09 2024 (serrano)                */
/*    Copyright   :  2023-24 manuel serrano                            */
/*    -------------------------------------------------------------    */
/*    ESM module                                                       */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    Import/Export                                                    */
/*---------------------------------------------------------------------*/
import { createRequire } from 'node:module';
import * as path from "node:path";
import { existsSync, statSync } from "node:fs";
import { pathToFileURL } from 'node:url';
//import { resolveHop } from "./hop-loader.mjs";
import { cwd } from "node:process";
import * as loader from "./hop-loader.mjs";
export * from "./html.mjs";

/*---------------------------------------------------------------------*/
/*    Dynamique require                                                */
/*---------------------------------------------------------------------*/
const require = createRequire(import.meta.url);

/*---------------------------------------------------------------------*/
/*    Default parameters                                               */
/*---------------------------------------------------------------------*/
export const isServer = true;
export const engine = "node";

const urlRoot = "/hop";
const resolveBase = "/$";
const resolveSeed = Math.round(Math.random() * 100000);
const port = 8888;

let express = false;
let app = false;

const resolveTable = new Map();
const resolveRootTable = new Map();

/*---------------------------------------------------------------------*/
/*    expressInit ...                                                  */
/*---------------------------------------------------------------------*/
function expressInit() {
   if (!express) {
      // this must be changed for ../../express
      express = require("../../../express");
      app = express();
      app.listen(port);
   }
}

/*---------------------------------------------------------------------*/
/*    resolve ...                                                      */
/*    -------------------------------------------------------------    */
/*    Resolve module name "mod" according to the root directory        */
/*    "dirOrFile". The options might be an object with the following   */
/*    properties:                                                      */
/*      - secure: boolean                                              */
/*---------------------------------------------------------------------*/
export async function resolve(mod, dirOrFile, options) {
   
   function rootPath(root) {
      if (!root) {
	 return cwd();
      } else {
	 const rootpath = (root instanceof URL ? fileURLToPath(root) : root.replace(/^file:\/\//, ""));
	 const normpath = path.normalize(rootpath);

	 if (!existsSync(rootpath)) {
	    throw `hop.resolve: path does not exists ${root}`;
	 } else {
	    if (statSync(rootpath).isDirectory()) {
	       return normpath;
	    } else {
	       return path.dirname(normpath);
	    }
	 }
      }
   }

   const old = resolveTable.get(mod);
   const root = rootPath(dirOrFile);

   if (old && old.root === root && old.options?.secure === options?.secure) {
      return old.url;
   } else {
      const next = async (url, context, next) => 
	 require.resolve(url, { paths: [ rootPath(root) ] });
      const resmod = await loader.resolve(mod, {}, next);
					  
      let base = resolveRootTable.get(root);
      let url;

      if (!base) {
	 base = urlRoot + resolveBase + "/" + resolveRootTable.size + "/"
	    + path.basename(root);
	 resolveRootTable.set(root, base);
	 app.use(base, express.static(root));
	 url = path.resolve(base + "/" + mod);
      } else {
	 url = path.resolve(base + "/" + mod);
      }
	 
      resolveTable.set(mod, { url, root, options });

      return url;
   }
}
   
/*---------------------------------------------------------------------*/
/*    Service ...                                                      */
/*---------------------------------------------------------------------*/
/* @sealed */
export class Service {
   #fun;
   #url;
   #key = undefined;
   #dir = undefined;
   
   constructor(fun, url, file) {
      this.#fun = fun;
      this.#url = url;
      this.#key = Math.round(Math.random() * 100000);
      
      expressInit();
   
      app.get(urlRoot + "/" + url, (req, res) => {
	 hopResponse(req, res, fun.call(req, req.query));
      });
   }

   resolve(mod) {
      if (this.#dir) {
	 const resmod = require.resolve(mod, { paths: [ this.#dir ] });
	 const relmod = path.relative(this.#dir, resmod);
	 const url = path.resolve(urlRoot + "/" + this.#url + "/static/" + this.#key + "/" + relmod);
	 
	 //const res = await resolve(mod, {}, u => mod);
	 return url;
      } else {
	 return false;
      }
   }
}

/*---------------------------------------------------------------------*/
/*    hopResponse ...                                                  */
/*---------------------------------------------------------------------*/
function hopResponse(req, res, val) {

   // keep-alive
   if (req.get("connection")) {
      res.set("Connection", req.Connection);
   }
   
   if (val instanceof response) {
      val.hopResponse(req, res);
   } else if (typeof(val) === "string") {
      res.send(val);
   } else if (val instanceof Promise) {
      val.then(val => hopResponse(req, res, val));
   } else {
      res.send(val.toString());
   }
}

/*---------------------------------------------------------------------*/
/*    response                                                         */
/*---------------------------------------------------------------------*/
export class response {
   val;
   constructor(val) {
      this.val = val;
   }
   hopResponse(req, res) {
      throw "not implemented";
   }
}

/*---------------------------------------------------------------------*/
/*    responseString ...                                               */
/*---------------------------------------------------------------------*/
export class responseString extends response {
   hopResponse(req, res) {
      res.send(this.val);
   }
}

/*---------------------------------------------------------------------*/
/*    responseFile ...                                                 */
/*---------------------------------------------------------------------*/
export class responseFile extends response {
   hopResponse(res) {
      res.sendFile(this.val);
   }
}


