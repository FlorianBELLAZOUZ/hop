/*=====================================================================*/
/*    serrano/prgm/project/hop/3.7.x/node_modules/hop/node/hop.mjs     */
/*    -------------------------------------------------------------    */
/*    Author      :  manuel serrano                                    */
/*    Creation    :  Tue Oct 24 09:50:25 2023                          */
/*    Last change :  Mon Jan 22 10:32:01 2024 (serrano)                */
/*    Copyright   :  2023-24 manuel serrano                            */
/*    -------------------------------------------------------------    */
/*    ESM module                                                       */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    Import/Export                                                    */
/*---------------------------------------------------------------------*/
import { createRequire } from 'node:module';
import * as path from "node:path";
import { fileURLToPath, pathToFileURL } from 'node:url';
import { resolve } from "./hop-loader.mjs";
export * from "./html.mjs";

/*---------------------------------------------------------------------*/
/*    Dynamique require                                                */
/*---------------------------------------------------------------------*/
const require = createRequire(import.meta.url);

/*---------------------------------------------------------------------*/
/*    Default parameters                                               */
/*---------------------------------------------------------------------*/
export const isServer = true;
export const engine = "node";

const urlRoot = "/hop";
const port = 8888;

let express = false;
let eapp = false;

/*---------------------------------------------------------------------*/
/*    expressInit ...                                                  */
/*---------------------------------------------------------------------*/
function expressInit() {
   if (!express) {
      // this must be changed for ../../express
      express = require("../../../express");
      eapp = express();
      eapp.listen(port);
   }
}

/*---------------------------------------------------------------------*/
/*    Service ...                                                      */
/*---------------------------------------------------------------------*/
/* @sealed */
export class Service {
   #fun;
   #url;
   #key;
   #dir;
   
   constructor(fun, url, file) {
      this.#fun = fun;
      this.#url = url;
      this.#dir = path.normalize(path.dirname(fileURLToPath(file)));
      this.#key = Math.round(Math.random() * 100000);
      
      if (!express) {
	 expressInit();
      }
   
      eapp.get(urlRoot + "/" + url, (req, res) => {
	 hopResponse(req, res, fun.call(req, req.query));
      });
      eapp.use(urlRoot + "/" + url + "/static/" + this.#key, express.static(this.#dir));
   }

   resolve(mod) {
      console.error("RESOLVE mod=", mod);
      const resmod = require.resolve(mod, { paths: [ this.#dir ] });
      console.error("mod=", mod, "dir=", this.#dir, "res=", resmod);
      const relmod = path.relative(this.#dir, resmod);
      const url = path.resolve(urlRoot + "/" + this.#url + "/static/" + this.#key + "/" + relmod);
      console.log("URL=", url);
 
      console.error("resolve=", relmod);
      //const res = await resolve(mod, {}, u => mod);
      return url;
   }
}

/*---------------------------------------------------------------------*/
/*    hopResponse ...                                                  */
/*---------------------------------------------------------------------*/
function hopResponse(req, res, val) {

   // keep-alive
   if (req.get("connection")) {
      res.set("Connection", req.Connection);
   }
   
   if (val instanceof response) {
      val.hopResponse(req, res);
   } else if (typeof(val) === "string") {
      res.send(val);
   } else if (val instanceof Promise) {
      val.then(val => hopResponse(req, res, val));
   } else {
      res.send(val.toString());
   }
}

/*---------------------------------------------------------------------*/
/*    response                                                         */
/*---------------------------------------------------------------------*/
export class response {
   val;
   constructor(val) {
      this.val = val;
   }
   hopResponse(req, res) {
      throw "not implemented";
   }
}

/*---------------------------------------------------------------------*/
/*    responseString ...                                               */
/*---------------------------------------------------------------------*/
export class responseString extends response {
   hopResponse(req, res) {
      res.send(this.val);
   }
}

/*---------------------------------------------------------------------*/
/*    responseFile ...                                                 */
/*---------------------------------------------------------------------*/
export class responseFile extends response {
   hopResponse(res) {
      res.sendFile(this.val);
   }
}


