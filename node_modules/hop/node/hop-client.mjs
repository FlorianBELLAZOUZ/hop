/*=====================================================================*/
/*    .../project/hop/3.7.x/node_modules/hop/node/hop-client.mjs       */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Wed Jan 31 08:34:57 2024                          */
/*    Last change :  Wed Jan 31 13:29:12 2024 (serrano)                */
/*    Copyright   :  2024 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Hop client-side part.                                            */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    Service ...                                                      */
/*---------------------------------------------------------------------*/
export function Service(base) {
   var svc = function() { return new Frame(this, base, arguments) };
   svc.base = base;
   svc.__proto__ = Service.prototype;
   return svc;
}

Service.prototype = {
   __proto__: Function.prototype
};

/*---------------------------------------------------------------------*/
/*    Frame ...                                                        */
/*---------------------------------------------------------------------*/
class Frame {
   #svc;
   #path;
   #args;
   #options;
   #header;
   
   constructor(svc, path, args, options, header) {
      this.#svc = svc;
      this.#path = path;
      this.#args = Array.from(args);
      this.#options = options;
      this.#header = header;
   }

   toString() {
      return this.#path;
   }

   post(opts) {
      return new Promise((res, rej) => {
	 const req = Frame.XMLHttpRequest(res, rej);
	 req.open("POST", this.#path, true);

	 if (this.#args.length > 0) {
	    req.setRequestHeader("Hop-Serialize", "json");
	    req.setRequestHeader("Hop-Arguments", JSON.stringify(this.#args));
	 }
	 
	 try {
	    req.send();
	 } catch (e) {
	    rej(e);
	 }
      });
   }

   static XMLHttpRequest(res, rej) {
      const req = new XMLHttpRequest();

      req.onreadystatechange = req.onload = function() {
	 if (this.readyState === 4) {
	    switch (this.status) {
	       case 200:
		  res(decode(req, this));
		  break;
		  
	       case 400:
	       case 407:
	       case 500:
		  rej(this.response);
		  break;
		  
	       default: {
		  if (this.status > 200 && this.status < 300) {
		     res(this.response);
		  } else {
		     rej(this.response);
		  }
		  break;
	       }
	    }
	 }
      };
      
      return req;
   }
}

/*---------------------------------------------------------------------*/
/*    jsonArgp ...                                                     */
/*    -------------------------------------------------------------    */
/*    Can the argument being serialized using the JSON format?         */
/*---------------------------------------------------------------------*/
function jsonArgp(n) {
   const t = typeof(n);
   return t === "number" || t === "string" || t === "boolean";
}

/*---------------------------------------------------------------------*/
/*    decode ...                                                       */
/*---------------------------------------------------------------------*/
function decode(req) {
   switch (req.getResponseHeader("Hop-Serialize")) {
      case "string": return req.response;
      case "number": return Number(req.response);
      case "json": return JSON.parse(req.response);
      case "null": return null;
      case "undefined": return undefined;
      case "true": return true;
      case "false": return false;
      default: return undefined;
   }
}

/*---------------------------------------------------------------------*/
/*    explicit window export                                           */
/*---------------------------------------------------------------------*/
window.Service = Service;
window.Frame = Frame;

/*---------------------------------------------------------------------*/
/*    Generated part                                                   */
/*---------------------------------------------------------------------*/
