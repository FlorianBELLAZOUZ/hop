/*=====================================================================*/
/*    .../project/hop/hop/node_modules/hop/node/hop-client.mjs         */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Wed Jan 31 08:34:57 2024                          */
/*    Last change :  Wed Mar 27 10:57:26 2024 (serrano)                */
/*    Copyright   :  2024 Manuel Serrano                               */
/*    -------------------------------------------------------------    */
/*    Hop client-side part.                                            */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    Module declaration                                               */
/*---------------------------------------------------------------------*/
export { server };

/*---------------------------------------------------------------------*/
/*    Frame ...                                                        */
/*---------------------------------------------------------------------*/
class Frame {
   #svc;
   #path;
   #args;
   #options;
   #header;
   
   constructor(svc, path, args, options, header) {
      this.#svc = svc;
      this.#path = path;
      this.#args = Array.from(args);
      this.#options = options;
      this.#header = header;
   }

   toString() {
      if (this.#args) {
	 let json = JSON.stringify(this.#args);
	 return this.#path + "?Hop-Serialize=json-url&Hop-Arguments="
	    + encodeURIComponent(json);
      } else {
	 return this.#path;
      }
   }

   post(opts) {
      return new Promise((res, rej) => {
	 const req = Frame.XMLHttpRequest(res, rej);

	 if (this.#args.length > 0) {
	    req.open("POST", this.#path, false);
	    req.setRequestHeader("Hop-Serialize", "json");
	    req.setRequestHeader("Hop-Arguments", JSON.stringify(this.#args));
	 } else {
	    req.open("PUT", this.#path, false);
	 }
	 
	 try {
	    req.send();
	 } catch (e) {
	    rej(e);
	 }
      });
   }

   static XMLHttpRequest(res, rej) {
      const req = new XMLHttpRequest();

      req.onreadystatechange = req.onload = function() {
	 if (this.readyState === 4) {
	    switch (this.status) {
	       case 200:
		  res(decode(req, this));
		  break;
		  
	       case 400:
	       case 407:
	       case 500:
		  rej(this.response);
		  break;
		  
	       default: {
		  if (this.status > 200 && this.status < 300) {
		     res(this.response);
		  } else {
		     rej(this.response);
		  }
		  break;
	       }
	    }
	 }
      };

      return req;
   }
}

/*---------------------------------------------------------------------*/
/*    jsonArgp ...                                                     */
/*    -------------------------------------------------------------    */
/*    Can the argument being serialized using the JSON format?         */
/*---------------------------------------------------------------------*/
function jsonArgp(n) {
   const t = typeof(n);
   return t === "number" || t === "string" || t === "boolean";
}

/*---------------------------------------------------------------------*/
/*    decode ...                                                       */
/*---------------------------------------------------------------------*/
function decode(req) {
   switch (req.getResponseHeader("Hop-Serialize")) {
      case "string": return req.response;
      case "number": return Number(req.response);
      case "json": return JSON.parse(req.response);
      case "null": return null;
      case "undefined": return undefined;
      case "true": return true;
      case "false": return false;
      default: return req.response;
   }
}

/*---------------------------------------------------------------------*/
/*    Service ...                                                      */
/*---------------------------------------------------------------------*/
function Service(base) {
   var svc = function() { return new Frame(this, base, arguments) };
   svc.base = base;
   svc.__proto__ = Service.prototype;
   return svc;
}

Service.prototype = {
   __proto__: Function.prototype
};

/*---------------------------------------------------------------------*/
/*    Server ...                                                       */
/*---------------------------------------------------------------------*/
class ClientServer {
   import(base) {
      return new Service(base);
   }
}

/*---------------------------------------------------------------------*/
/*    server ...                                                       */
/*---------------------------------------------------------------------*/
const server = new ClientServer();

/*---------------------------------------------------------------------*/
/*    HTMLTag ...                                                      */
/*---------------------------------------------------------------------*/
function HTMLTag(tag) {
   
   function toNode(n) {
      if (typeof(n) === "string") {
	 return document.createTextNode(n);
      } else if (typeof(n) === "number") {
	 return document.createTextNode(n.toString());
      } else {
	 return n;
      }
   }
   
   return (attrs, ...nodes) => {
      const el = document.createElement(tag);

      // node attributes
      for (let k in attrs) {
	 if (k === "class") {
	    el.className = attrs.class;
	 } else {
	    const v = attrs[k];

	    if (v instanceof TILDE) {
	       const evt = k.replace(/^on/, "");
	       const hdl = eval(`(() => function (event) { ${v.nodes} })()`);
	       console.log(evt, hdl);
	       el.addEventListener(evt, hdl);
	    } else {
	       el.setAttribute(k, attrs[k]);
	    }
	 }
      }

      // node children
      nodes.forEach(n => el.appendChild(toNode(n)));

      return el;
   }
}

/*---------------------------------------------------------------------*/
/*    HTML tags ...                                                    */
/*---------------------------------------------------------------------*/
export const A = HTMLTag("A");
export const ABBR = HTMLTag("ABBR");
export const ACRONYM = HTMLTag("ACRONYM");
export const ADDRESS = HTMLTag("ADDRESS");
export const APPLET = HTMLTag("APPLET");
export const AREA = HTMLTag("AREA");
export const ARTICLE = HTMLTag("ARTICLE");
export const B = HTMLTag("B");
export const BASE = HTMLTag("BASE");
export const BASEFONT = HTMLTag("BASEFONT");
export const BDI = HTMLTag("BDI");
export const BDO = HTMLTag("BDO");
export const BIG = HTMLTag("BIG");
export const BLOCKQUOTE = HTMLTag("BLOCKQUOTE");
export const BODY = HTMLTag("BODY");
export const BR = HTMLTag("BR");
export const BUTTON = HTMLTag("BUTTON");
export const CANVAS = HTMLTag("CANVAS");
export const CAPTION = HTMLTag("CAPTION");
export const CENTER = HTMLTag("CENTER");
export const CITE = HTMLTag("CITE");
export const CODE = HTMLTag("CODE");
export const COL = HTMLTag("COL");
export const COLGROUP = HTMLTag("COLGROUP");
export const DATALIST = HTMLTag("DATALIST");
export const DD = HTMLTag("DD");
export const DEL = HTMLTag("DEL");
export const DETAILS = HTMLTag("DETAILS");
export const DFN = HTMLTag("DFN");
export const DIR = HTMLTag("DIR");
export const DIV = HTMLTag("DIV");
export const DL = HTMLTag("DL");
export const DT = HTMLTag("DT");
export const EM = HTMLTag("EM");
export const EMBED = HTMLTag("EMBED");
export const FIELDSET = HTMLTag("FIELDSET");
export const FIGURE = HTMLTag("FIGURE");
export const FIGCAPTION = HTMLTag("FIGCAPTION");
export const FONT = HTMLTag("FONT");
export const FOOTER = HTMLTag("FOOTER");
export const FORM = HTMLTag("FORM");
export const FRAME = HTMLTag("FRAME");
export const FRAMESET = HTMLTag("FRAMESET");
export const H1 = HTMLTag("H1");
export const H2 = HTMLTag("H2");
export const H3 = HTMLTag("H3");
export const H4 = HTMLTag("H4");
export const H5 = HTMLTag("H5");
export const H6 = HTMLTag("H6");
export const HEAD = HTMLTag("HEAD");
export const HEADER = HTMLTag("HEADER");
export const HGROUP = HTMLTag("HGROUP");
export const HR = HTMLTag("HR");
export const I = HTMLTag("I");
export const IFRAME = HTMLTag("IFRAME");
export const IMG = HTMLTag("IMG");
export const INPUT = HTMLTag("INPUT");
export const INS = HTMLTag("INS");
export const ISINDEX = HTMLTag("ISINDEX");
export const KBD = HTMLTag("KBD");
export const LABEL = HTMLTag("LABEL");
export const LEGEND = HTMLTag("LEGEND");
export const LI = HTMLTag("LI");
export const LINK = HTMLTag("LINK");
export const MAIN = HTMLTag("MAIN");
export const MAP = HTMLTag("MAP");
export const MARQUEE = HTMLTag("MARQUEE");
export const MENU = HTMLTag("MENU");
export const MENUITEM = HTMLTag("MENUITEM");
export const META = HTMLTag("META");
export const METER = HTMLTag("METER");
export const NAV = HTMLTag("NAV");
export const NOFRAMES = HTMLTag("NOFRAMES");
export const NOSCRIPT = HTMLTag("NOSCRIPT");
export const OBJECT = HTMLTag("OBJECT");
export const OL = HTMLTag("OL");
export const OPTGROUP = HTMLTag("OPTGROUP");
export const OPTION = HTMLTag("OPTION");
export const P = HTMLTag("P");
export const PARAM = HTMLTag("PARAM");
export const PRE = HTMLTag("PRE");
export const PROGRESS = HTMLTag("PROGRESS");
export const Q = HTMLTag("Q");
export const S = HTMLTag("S");
export const SAMP = HTMLTag("SAMP");
export const SCRIPT = HTMLTag("SCRIPT");
export const SECTION = HTMLTag("SECTION");
export const SELECT = HTMLTag("SELECT");
export const SMALL = HTMLTag("SMALL");
export const SOURCE = HTMLTag("SOURCE");
export const SPAN = HTMLTag("SPAN");
export const STRIKE = HTMLTag("STRIKE");
export const STRONG = HTMLTag("STRONG");
export const STYLE = HTMLTag("STYLE");
export const SUB = HTMLTag("SUB");
export const SUMMARY = HTMLTag("SUMMARY");
export const SUP = HTMLTag("SUP");
export const TABLE = HTMLTag("TABLE");
export const TBODY = HTMLTag("TBODY");
export const TD = HTMLTag("TD");
export const TEXTAREA = HTMLTag("TEXTAREA");
export const TFOOT = HTMLTag("TFOOT");
export const TH = HTMLTag("TH");
export const THEAD = HTMLTag("THEAD");
export const TIME = HTMLTag("TIME");
export const TITLE = HTMLTag("TITLE");
export const TR = HTMLTag("TR");
export const TRACK = HTMLTag("TRACK");
export const TT = HTMLTag("TT");
export const U = HTMLTag("U");
export const UL = HTMLTag("UL");
export const VAR = HTMLTag("VAR");

export function TILDE(attrs, ...nodes) {
   if (!new.target) {
      return new TILDE(attrs, ...nodes);
   } else {
      this.nodes = nodes;
   }
}
