;*=====================================================================*/
;*    /tmp/HOPNEW/hop/node_modules/syslog/lib/_syslog.hop              */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Sun Jul  6 06:15:53 2014                          */
;*    Last change :  Sun Feb 23 15:49:39 2020 (serrano)                */
;*    Copyright   :  2014-20 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    SYSLOG JS bindings                                               */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _syslog

   (library hopscript hop hopwidget nodejs)
   
   (export (class SyslogInclude
	      (val read-only)))
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)

   (define (js-tofixnum n %this)
      (let ((n (js-tointeger n %this)))
	 (cond
	    ((fixnum? n) n)
	    ((flonum? n) (flonum->fixnum n))
	    (else 0))))

   (&with!
      (with-access::JsGlobalObject %this (__proto__)
	 
	 (define exports (js-get module (& "exports") %this))
	 
	 ;; bind the module in the syslog scope
	 (js-put! scope (& "module") module #f %this)
	 
	 ;; open
	 (js-bind! %this exports (& "open")
	    :value (js-make-function %this
		      (lambda (this name option facility)
			 (openlog (js-tostring name %this)
			    (js-tofixnum option %this)
			    (js-tofixnum facility %this)))
		      (js-function-arity 3 0)
		      (js-function-info :name "open" :len 3))
	    :writable #f
	    :enumerable #f)
	 ;; log
	 (js-bind! %this exports (& "log")
	    :value (js-make-function %this
		      (lambda (this level msg)
			 (syslog (js-tofixnum level %this)
			    (js-tostring msg %this)))
		      (js-function-arity 2 0)
		      (js-function-info :name "log" :len 2))
	    :writable #f
	    :enumerable #f)
	 ;; close objects
	 (js-bind! %this exports (& "close")
	    :value (js-make-function %this
		      (lambda (this val)
			 (closelog))
		      (js-function-arity 0 0)
		      (js-function-info :name "close" :len 0))
	    :writable #f
	    :enumerable #f)
	 
	 ;; options
	 (for-each (lambda (id)
		      (js-bind! %this exports
			 (js-ascii-name->jsstring (symbol->string! id))
			 :value (syslog-option id)
			 :writable #f
			 :enumerable #f))
	    '(LOG_CONS LOG_NDELAY LOG_ODELAY LOG_PID))
	 
	 ;; facilities
	 (for-each (lambda (id)
		      (js-bind! %this exports
			 (js-ascii-name->jsstring (symbol->string! id))
			 :value (syslog-facility id)
			 :writable #f
			 :enumerable #f))
	    '(LOG_AUTH LOG_AUTHPRIV LOG_CRON LOG_DAEMON LOG_FTP LOG_KERN
	      LOG_LOCAL0 LOG_LOCAL1 LOG_LOCAL2 LOG_LOCAL3 LOG_LOCAL4
	      LOG_LOCAL5 LOG_LOCAL6 LOG_LOCAL7
	      LOG_LPR LOG_MAIL LOG_NEWS LOG_SYSLOG LOG_USER LOG_UUCP))
	 
	 ;; levels
	 (for-each (lambda (id)
		      (js-bind! %this exports 
			 (js-ascii-name->jsstring (symbol->string! id))
			 :value (syslog-level id)
			 :writable #f
			 :enumerable #f))
	    '(LOG_EMERG LOG_ALERT LOG_CRIT LOG_ERR LOG_WARNING LOG_NOTICE
	      LOG_INFO LOG_DEBUG)))))

;*---------------------------------------------------------------------*/
;*    The return value for dynamic-load                                */
;*---------------------------------------------------------------------*/
hopscript

