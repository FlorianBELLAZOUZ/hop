/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/ts/lib/ts.js           */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Tue Mar 13 07:37:34 2018                          */
/*    Last change :  Tue Feb 15 11:33:39 2022 (serrano)                */
/*    Copyright   :  2018-22 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    TS Hop.js language                                               */
/*=====================================================================*/
"use hopscript";

/*---------------------------------------------------------------------*/
/*    imports                                                          */
/*---------------------------------------------------------------------*/
import fs from "fs";
import path from "path";
import util from "util";
import { config } from "hop:config";
import { systemSync as system } from "hop:system";

/*---------------------------------------------------------------------*/
/*    global configuration                                             */
/*---------------------------------------------------------------------*/
const tjson = require("./tsrc.json");
const tsrc = path.join(config.rcDirectory, "tsrc.js");

const node = "node";
const tmp = process.env.TMP || "/tmp";

let tsModulesDir = false;

/*---------------------------------------------------------------------*/
/*    which ...                                                        */
/*---------------------------------------------------------------------*/
function which(cmd) {
   return process.env.PATH.split(":")
      .find(s => fs.existsSync(s + "/" + cmd));
}

/*---------------------------------------------------------------------*/
/*    getTypeScriptModulesDir ...                                      */
/*---------------------------------------------------------------------*/
function getTypeScriptModulesDir() {
   if (tsModulesDir) {
      return tsModulesDir;
   } else {
      if (process.env.HOP_NODEJS) {
	 tsModulesDir = process.env.HOP_TSMODULESDIR;
      } else {
      	 const dir = path.join(tmp, "tshop");
      	 const node = path.join(dir, "node");
      
	 if (!fs.existsSync(dir)) fs.mkdirSync(dir);
      	 fs.writeFileSync(node, "#!/bin/bash\nrp=`realpath $1`\ndir=`dirname $rp`\nrealpath $dir/../..");
      	 fs.chmodSync(node, "a+rx");
	 
	 const tscpath = system(`sh -c "env PATH=${dir}:$PATH tsc --help"`);

	 if (tscpath.length !== 0) {
      	    tsModulesDir = tscpath.replace(/[ \t\n]+$/, "");
      	 } else {
	    const tscdir = which("tsc");
	    
	    if (tscdir) {
	       const realpath = system(`sh -c "realpath ${tscdir}/tsc"`);
	       
	       if (realpath.status === 0) {
	       	  const buf = fs.readFileSync(realpath);
	       	  const m = buf.match(/require([(]['"][^'"]*['"][)])/);
	       
	       	  if (m) return path.normalize(path.dirname(realpath) + buf[1]);
	       }
	    }
	    
	    throw "tsc not found";
	 }
      }
   }
   
   return tsModulesDir;
}

/*---------------------------------------------------------------------*/
/*    modified ...                                                     */
/*---------------------------------------------------------------------*/
function modified(src, tgt) {
   return fs.statSync(src).mtime > fs.statSync(tgt).mtime;
}

/*---------------------------------------------------------------------*/
/*    Symbol.compiler ...                                              */
/*---------------------------------------------------------------------*/
exports[Symbol.compiler] = (file, options) => {
   const target = options.tempfile || `${config.cacheDir}/${path.basename(file).replace(/[.]ts$/, "")}.ast.json`;
   let res = 0;
   const debug = (process.env.HOPTRACE && process.env.HOPTRACE.match("nodejs:compile"));
   
   if (!fs.existsSync(target) || modified(file, target) || options["no-cache"]) {
      const ts = require.resolve("../comp/comp.js");
      const main = ("module-main" in options) ? options["module-main"] : true;
      const tsmoddir = getTypeScriptModulesDir();
      const emitjs = debug;
      const cmd = `sh -c "${node} ${ts} ${file} ${target} ${main} ${config.modulesDir} ${tsmoddir} ${emitjs} 2>&1"`;
      
      if (!fs.existsSync(config.cacheDir)) {
      	 fs.mkdirSync(config.cacheDir, { recursive : true });
      }

      if (debug) {
      	 console.log(`compiling "${cmd}"`);
      }
      res = system(cmd);
   } else if (debug) {
	 console.log(`using pre-compiled ${target}`);
   }
   
   if (typeof res !== "object") {
      if (typeof res === "string") {
	 console.error(res);
      }
      return { type: "filename", syntax: "ast.json", value: target }
   } else {
      return { type: "json-error", value: res.data };
   }
}
