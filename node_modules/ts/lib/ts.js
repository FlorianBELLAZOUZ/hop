/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/ts/lib/ts.js           */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Tue Mar 13 07:37:34 2018                          */
/*    Last change :  Tue May  4 12:42:47 2021 (serrano)                */
/*    Copyright   :  2018-21 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    TS Hop.js language                                               */
/*=====================================================================*/
"use hopscript";

/*---------------------------------------------------------------------*/
/*    imports                                                          */
/*---------------------------------------------------------------------*/
import fs from "fs";
import path from "path";
import util from "util";
import { config } from "hop:config";
import { systemSync as system } from "hop:system";

/*---------------------------------------------------------------------*/
/*    global configuration                                             */
/*---------------------------------------------------------------------*/
const tjson = require( "./tsrc.json" );
const tsrc = path.join( config.rcDirectory, "tsrc.js" );

const node = "node";
const tmp = process.env.TMP || "/tmp";

let tsModulesDir = false;

/*---------------------------------------------------------------------*/
/*    getTypeScriptModulesDir ...                                      */
/*---------------------------------------------------------------------*/
function getTypeScriptModulesDir() {
   if( tsModulesDir ) {
      return tsModulesDir;
   } else {
      if( process.env.HOP_NODEJS ) {
	 tsModulesDir = process.env.HOP_TSMODULESDIR;
      } else {
      	 const dir = path.join( tmp, "tshop" );
      	 const node = path.join( dir, "node" );
      
	 if( !fs.existsSync( dir ) ) fs.mkdirSync( dir );
      	 fs.writeFileSync( node, "#!/bin/bash\nrp=`realpath $1`\ndir=`dirname $rp`\nrealpath $dir/../.." );
      	 fs.chmodSync( node, "a+rx" );

      	 tsModulesDir = system( `sh -c "env PATH=${dir}:$PATH tsc --help"` ).replace( /[ \t\n]+$/, "" );
      }
   }
   
   return tsModulesDir;
}

/*---------------------------------------------------------------------*/
/*    modified ...                                                     */
/*---------------------------------------------------------------------*/
function modified( src, tgt ) {
   return fs.statSync( src ).mtime > fs.statSync( tgt ).mtime;
}

/*---------------------------------------------------------------------*/
/*    Symbol.compiler ...                                              */
/*---------------------------------------------------------------------*/
exports[ Symbol.compiler ] = (file, options) => {
   const target = options.tempfile || `${config.cacheDir}/${path.basename( file ).replace( /[.]ts$/, "" )}.ast.json`;
   let res = 0;
   
   if( !fs.existsSync( target ) || modified( file, target ) || options[ "no-cache" ] ) {
      const ts = require.resolve( "../comp/comp.js" );
      const main = ("module-main" in options) ? options[ "module-main" ] : true;
      const tsmoddir = getTypeScriptModulesDir();
      const cmd = `sh -c "${node} ${ts} ${file} ${target} ${main} ${config.modulesDir} ${tsmoddir} 2>&1"`;
      
      if( !fs.existsSync( config.cacheDir ) ) {
      	 fs.mkdirSync( config.cacheDir, { recursive : true } );
      }

      if( process.env.HOPTRACE && process.env.HOPTRACE.match( "nodejs:compile" ) ) {
      	 console.log( `compiling "${cmd}"` );
      }
      res = system( cmd );
   } else if( process.env.HOPTRACE && process.env.HOPTRACE.match( "nodejs:compile" ) ) {
	 console.log( `using pre-compiled ${target}` );
   }
   
   if( typeof res !== "object" ) {
      if( typeof res === "string" ) {
	 console.error( res );
      }
      return { type: "filename", syntax: "ast.json", value: target }
   } else {
      return { type: "json-error", value: res.data };
   }
}
