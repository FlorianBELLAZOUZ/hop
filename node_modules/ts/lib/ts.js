/*=====================================================================*/
/*    serrano/prgm/project/hop/3.5.x/node_modules/ts/lib/ts.js         */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Tue Mar 13 07:37:34 2018                          */
/*    Last change :  Mon Mar 22 13:49:38 2021 (serrano)                */
/*    Copyright   :  2018-21 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    TS Hop.js language                                              */
/*=====================================================================*/
"use hopscript";

/*---------------------------------------------------------------------*/
/*    imports                                                          */
/*---------------------------------------------------------------------*/
const fs = require( "fs" );
const path = require( "path" );
const util = require( "util" );
import { systemSync as system } from hop.system;

/*---------------------------------------------------------------------*/
/*    global configuration                                             */
/*---------------------------------------------------------------------*/
const config = require( "./tsrc.json" );
const tsrc = path.join( require( hop.config ).rcDirectory, "tsrc.js" );

/*---------------------------------------------------------------------*/
/*    modified ...                                                     */
/*---------------------------------------------------------------------*/
function modified( src, tgt ) {
   return fs.statSync( src ).mtime > fs.statSync( tgt ).mtime;
}

/*---------------------------------------------------------------------*/
/*    Symbol.compiler ...                                              */
/*---------------------------------------------------------------------*/
exports[ Symbol.compiler ] = (file, options) => {
   console.log( "FILE=", file, " opt=", options );
/*    const defopts = fs.exists( tsrc ) ? require( tsrc ) : false;     */
/*    const cc = (options && options.cc)                               */
/* 	 || (defopts && defopts.cc)                                    */
/* 	 || (config && config.cc)                                      */
/* 	 || require( hop.config ).bigloo[ "c-compiler" ];              */
/*    const cmd = (options && options.cmd)                             */
/* 	 || (defopts && defopts.cmd)                                   */
/* 	 || (config && config.cmd)                                     */
/* 	 || config.commandLine;                                        */
/*    const target = (options && options.target)                       */
/* 	 || getTarget( file );                                         */
/*    const P = (options && options.disableLinenumOpt)                 */
/* 	 || (defopts && defopts.disableLinenumOpt)                     */
/* 	 || (config && config.disableLinenumOpt)                       */
/* 	 || "";                                                        */
/*    const srcMap = (options ? options.sourceMappingURL : #:bigloo-debug() > 0); */
/*                                                                     */
/*    if( !fs.existsSync( target ) || modified( file, target ) ) {     */
/*       const status = system( util.format( cmd, cc, srcMap ? "" : P, file, target ) ); */
/*       if( status != 0 ) {                                           */
/* 	 throw `compilation failed with status ${status}`;             */
/*       }                                                             */
/*    }                                                                */
/*                                                                     */
/*    if( srcMap ) {                                                   */
/*       const smap = sourceMap( file, target );                       */
/*       return { type: "filename", value: target, sourceMappingURL: smap }; */
/*    } else {                                                         */
/*       return { type: "filename", value: target };                   */
/*    }                                                                */
   return { type: "filename", syntax: "json", value: "/tmp/foo.json.ast" }
}
