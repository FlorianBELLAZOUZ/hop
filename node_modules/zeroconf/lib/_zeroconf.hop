;*=====================================================================*/
;*    .../project/hop/hop/node_modules/zeroconf/lib/_zeroconf.hop      */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Thu Sep  6 15:19:35 2018                          */
;*    Last change :  Sat Mar 19 17:44:52 2022 (serrano)                */
;*    Copyright   :  2018-22 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    ZEROCONF library bindings                                        */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _zeroconf
   (library hopscript hop nodejs)
   (export (hopscript %this this %scope %module)))

;*---------------------------------------------------------------------*/
;*    make-service-event-elements ...                                  */
;*---------------------------------------------------------------------*/
(define (make-service-event-elements clazz %this)
   (vector-map (lambda (k)
		  (let ((name (symbol->string! (class-field-name k)))
			(get (class-field-accessor k)))
		     (instantiate::JsWrapperDescriptor
			(name (js-string->name name))
			(enumerable #t)
			(configurable #f)
			(writable #f)
			(%get (lambda (obj owner propname %this)
				 (with-access::JsWrapper owner (obj)
				    (js-obj->jsobject (get obj) %this))))
			(%set (lambda (obj v owner propname %this)
				 #unspecified)))))
      (class-all-fields clazz)))

;*---------------------------------------------------------------------*/
;*    make-service-event-cmap ...                                      */
;*---------------------------------------------------------------------*/
(define (make-service-event-cmap clazz %this)
   (js-names->cmap 
      (vector-map (lambda (k)
		     (js-string->name (symbol->string! (class-field-name k))))
	 (class-all-fields clazz))
      :accessor #t :writable #f :enumerable #t :configurable #f :inline #f))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*    -------------------------------------------------------------    */
;*    This is the function called by JavaScript when the Hop module    */
;*    is required. It binds the exports field of the newly             */
;*    allocated module                                                 */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   
   (js-export (Zeroconf)
      
      (define jszc #f)
      
      (define (start-zeroconf)
	 (unless jszc
	    (let ((zc (zeroconf-start)))
	       (set! jszc
		  (instantiate::JsWrapper
		     (obj zc)
		     (cmap (js-make-jsconstructmap))
		     (data '()))))))
      
      (define (get-zc this)
	 (if (eq? jszc this)
	     (with-access::JsWrapper jszc (obj)
		obj)
	     (js-raise-type-error %this 
		"zeroconf: not a zeroconf controller" this)))

      (define service-event-elements
	 (make-service-event-elements zeroconf-service-event %this))

      (define service-event-cmap
	 (make-service-event-cmap zeroconf-service-event %this))
      
      (define (addEventListener this event proc)
	 (let ((zc (get-zc this)))
	    (if (not (js-procedure? proc))
		(js-raise-type-error %this 
		   "zeroconf: wrong listener" proc)
		(add-event-listener! zc (js-tostring event %this)
		   (lambda (e::zeroconf-service-event)
		      (with-access::JsGlobalObject %this (worker)
			 (js-worker-exec worker "zeroconf"
			    #t
			    (lambda ()
			       (let ((obj (instantiateJsWrapper
					     (__proto__ (js-null))
					     (obj e)
					     (data '())
					     (cmap service-event-cmap)
					     (elements service-event-elements))))
				  (js-call1 %this proc this obj))))))))))

      (define (publish this name type port . opts)
	 (let ((zc (get-zc this)))
	    (zeroconf-backend-publish-service! zc
	       (js-tostring name %this)
	       (if (eq? port (js-undefined))
		   (hop-default-port)
		   (js-tointeger type %this))
	       (js-tostring type %this)
	       (map (lambda (s) (js-tostring s %this)) opts))))
      
      (define (zeroconf this)
	 (unless jszc
	    (let ((zc (begin (zeroconf-start) (zeroconf-backend))))
	       (set! jszc
		  (instantiate::JsWrapper
		     (obj zc)
		     (cmap (js-make-jsconstructmap))
		     (data '())))
	       ;; backend
	       (js-bind! %this jszc (& "backend")
		  :value (js-string->jsstring
			    (symbol->string! (class-name (object-class zc))))
		  :writable #f
		  :enumerable #t)
	       ;; addEventListener
	       (js-bind! %this jszc (& "addEventListener")
		  :value (js-make-function %this
			    addEventListener
			    (js-function-arity addEventListener)
			    (js-function-info :name "addEventListener" :len 2))
		  :writable #f
		  :enumerable #t)
	       ;; publish
	       (js-bind! %this jszc (& "publish")
		  :value (js-make-function %this
			    publish
			    (js-function-arity publish)
			    (js-function-info :name "publish" :len 4))
		  :writable #f
		  :enumerable #t)
	       jszc)))
      
      (define Zeroconf
	 (js-make-function %this
	    zeroconf
	    (js-function-arity zeroconf)
	    (js-function-info :name "Zeroconf" :len 0)))
      
      Zeroconf))
