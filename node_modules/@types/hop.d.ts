/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/@types/hop.d.ts        */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Sun Mar 20 18:23:22 2022                          */
/*    Last change :  Sun Feb 26 15:27:25 2023 (serrano)                */
/*    Copyright   :  2022-23 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    Hop type declarations.                                           */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    info                                                             */
/*---------------------------------------------------------------------*/
export const engine: string;
export const isServer :boolean;
export const isWorker :boolean;
export const hostname :string;
export const hostip :string;
export const version :string;
export const buildId: string;
export const buildTag: string;
export const buildArch: string;
export const rcDirectory :string;
export const cacheDirectory :string;
export const port: number;
export const ports: number[];
export const standalone: any;
export const sealed: any;
export const charset: string;

/*---------------------------------------------------------------------*/
/*    debug                                                            */
/*---------------------------------------------------------------------*/
export function log(...vals): any;
export function tof(...vals): string;

/*---------------------------------------------------------------------*/
/*    Requests                                                         */
/*---------------------------------------------------------------------*/
export function isLocalRequest(req: any): boolean;
export function requestHostAddress(req: any): string | boolean;
export function requestLocalAddress(req: any): string | boolean;

/*---------------------------------------------------------------------*/
/*    Responses                                                        */
/*---------------------------------------------------------------------*/
export interface HTTPResponseHeader {
   startLine?: string;
   contentType?: string;
   contentLength?: number;
   charset?: string;
   connection?: string;
   header?: any
}

export interface HTTPResponseFile {}
export interface HTTPResponseString {}
export interface HTTPResponseXML {}
export interface HTTPResponseHop {}
export interface HTTPResponseAsync {}
export interface HTTPResponseProxy {}
export interface HTTPResponseAuthenticate {}
export interface HTTPResponseJSON {}
export interface HTTPResponseError {}

/*---------------------------------------------------------------------*/
/*    Services                                                         */
/*---------------------------------------------------------------------*/
export type HTTPResponse = HTTPResponseFile | HTTPResponseString | HTTPResponseXML;
export type SvcResponse = HTTPResponse | XMLDocument | string | number | undefined;

export type SvcFun = (a0: any, a1?: any, a2?: any, a3?: any) => SvcResponse;
export type Service = {};

export function Service(fun: SvcFun, name?: string): any;
export function HTTPResponseFile(path: string, header?: HTTPResponseHeader): HTTPResponseFile;
export function HTTPResponseString(string: string, header?: HTTPResponseHeader): HTTPResponseString;
export function HTTPResponseXml(xml: any, header?: HTTPResponseHeader): HTTPResponseXML;
export function HTTPResponseHop(xml: any, header?: HTTPResponseHeader): HTTPResponseHop;
export function HTTPResponseAsync(xml: any, header?: HTTPResponseHeader): HTTPResponseAsync;
export function HTTPResponseProxy(xml: any, header?: HTTPResponseHeader): HTTPResponseProxy;
export function HTTPResponseAuthenticate(xml: any, header?: HTTPResponseHeader): HTTPResponseAuthenticate;
export function HTTPResponseJson(xml: any, header?: HTTPResponseHeader): HTTPResponseJSON;
export function HTTPResponseError(xml: any, header?: HTTPResponseHeader): HTTPResponseError;

/*---------------------------------------------------------------------*/
/*    broadcast                                                        */
/*---------------------------------------------------------------------*/
export function broadcast(evt: string, value: any): void;

/*---------------------------------------------------------------------*/
/*    Lib                                                              */
/*---------------------------------------------------------------------*/
export function md5sum(s :string): string;
export function sha1sum(s :string): string;
export function base64encode(s :string): string;
export function base64decode(s :string): string;
